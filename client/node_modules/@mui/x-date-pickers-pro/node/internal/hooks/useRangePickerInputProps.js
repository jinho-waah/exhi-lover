"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRangePickerInputProps = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _internals = require("@mui/x-date-pickers/internals");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useRangePickerInputProps = ({
  wrapperVariant,
  open,
  actions,
  readOnly,
  disabled,
  disableOpenPicker,
  onBlur,
  rangePosition,
  onRangePositionChange,
  localeText: inLocaleText
}) => {
  const localeText = (0, _internals.useLocaleText)();
  const startRef = React.useRef(null);
  const endRef = React.useRef(null);
  React.useEffect(() => {
    if (!open) {
      return;
    }
    if (rangePosition === 'start') {
      startRef.current?.focus();
    } else if (rangePosition === 'end') {
      endRef.current?.focus();
    }
  }, [rangePosition, open]);
  const openRangeStartSelection = event => {
    event.stopPropagation();
    onRangePositionChange('start');
    if (!readOnly && !disableOpenPicker) {
      actions.onOpen();
    }
  };
  const openRangeEndSelection = event => {
    event.stopPropagation();
    onRangePositionChange('end');
    if (!readOnly && !disableOpenPicker) {
      actions.onOpen();
    }
  };
  const focusOnRangeStart = () => {
    if (open) {
      onRangePositionChange('start');
    }
  };
  const focusOnRangeEnd = () => {
    if (open) {
      onRangePositionChange('end');
    }
  };
  const readOnlyInput = readOnly ?? wrapperVariant === 'mobile';
  const startInputProps = (0, _extends2.default)({
    inputRef: startRef,
    label: inLocaleText?.start ?? localeText.start,
    onKeyDown: (0, _internals.onSpaceOrEnter)(openRangeStartSelection),
    onFocus: focusOnRangeStart,
    focused: open ? rangePosition === 'start' : undefined
  }, !readOnly && !disabled && {
    onClick: openRangeStartSelection
  }, {
    readOnly: readOnlyInput,
    disabled
  });
  const endInputProps = (0, _extends2.default)({
    inputRef: endRef,
    label: inLocaleText?.end ?? localeText.end,
    onKeyDown: (0, _internals.onSpaceOrEnter)(openRangeEndSelection),
    onFocus: focusOnRangeEnd,
    focused: open ? rangePosition === 'end' : undefined
  }, !readOnly && !disabled && {
    onClick: openRangeEndSelection
  }, {
    readOnly: readOnlyInput,
    disabled
  });
  const rootProps = {
    onBlur
  };
  return {
    startInput: startInputProps,
    endInput: endInputProps,
    root: rootProps
  };
};
exports.useRangePickerInputProps = useRangePickerInputProps;