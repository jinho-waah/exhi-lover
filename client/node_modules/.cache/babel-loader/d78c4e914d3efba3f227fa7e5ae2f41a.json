{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * internal utility\n *\n * Why? to read `sx` values and attach component's CSS variables\n *      eg. <Card sx={{ borderRadius: 0 }} /> should attach\n *          `--Card-radius: 0px` so that developers don't have to remember\n *\n * Why not reuse `styleFunctionSx`?\n *     `styleFunctionSx` is more expensive as it iterates over all the keys\n */\n// eslint-disable-next-line import/prefer-default-export\n\nexport const resolveSxValue = (_ref, keys) => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  let sxObject = {};\n\n  function resolveSx(sxProp) {\n    if (typeof sxProp === 'function') {\n      const result = sxProp(theme);\n      resolveSx(result);\n    } else if (Array.isArray(sxProp)) {\n      sxProp.forEach(sxItem => {\n        if (typeof sxItem !== 'boolean') {\n          resolveSx(sxItem);\n        }\n      });\n    } else if (typeof sxProp === 'object') {\n      sxObject = _extends({}, sxObject, sxProp);\n    }\n  }\n\n  if (ownerState.sx) {\n    resolveSx(ownerState.sx);\n    keys.forEach(key => {\n      const value = sxObject[key];\n\n      if (typeof value === 'string' || typeof value === 'number') {\n        if (key === 'borderRadius') {\n          if (typeof value === 'number') {\n            sxObject[key] = `${value}px`;\n          } else {\n            var _theme$vars;\n\n            sxObject[key] = ((_theme$vars = theme.vars) == null ? void 0 : _theme$vars.radius[value]) || value;\n          }\n        } else if (['p', 'padding', 'm', 'margin'].indexOf(key) !== -1 && typeof value === 'number') {\n          sxObject[key] = theme.spacing(value);\n        } else {\n          sxObject[key] = value;\n        }\n      } else if (typeof value === 'function') {\n        sxObject[key] = value(theme);\n      } else {\n        sxObject[key] = undefined;\n      }\n    });\n  }\n\n  return sxObject;\n};","map":{"version":3,"names":["_extends","resolveSxValue","keys","theme","ownerState","sxObject","resolveSx","sxProp","result","Array","isArray","forEach","sxItem","sx","key","value","_theme$vars","vars","radius","indexOf","spacing","undefined"],"sources":["/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@mui/joy/styles/styleUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * internal utility\n *\n * Why? to read `sx` values and attach component's CSS variables\n *      eg. <Card sx={{ borderRadius: 0 }} /> should attach\n *          `--Card-radius: 0px` so that developers don't have to remember\n *\n * Why not reuse `styleFunctionSx`?\n *     `styleFunctionSx` is more expensive as it iterates over all the keys\n */ // eslint-disable-next-line import/prefer-default-export\nexport const resolveSxValue = ({\n  theme,\n  ownerState\n}, keys) => {\n  let sxObject = {};\n  function resolveSx(sxProp) {\n    if (typeof sxProp === 'function') {\n      const result = sxProp(theme);\n      resolveSx(result);\n    } else if (Array.isArray(sxProp)) {\n      sxProp.forEach(sxItem => {\n        if (typeof sxItem !== 'boolean') {\n          resolveSx(sxItem);\n        }\n      });\n    } else if (typeof sxProp === 'object') {\n      sxObject = _extends({}, sxObject, sxProp);\n    }\n  }\n  if (ownerState.sx) {\n    resolveSx(ownerState.sx);\n    keys.forEach(key => {\n      const value = sxObject[key];\n      if (typeof value === 'string' || typeof value === 'number') {\n        if (key === 'borderRadius') {\n          if (typeof value === 'number') {\n            sxObject[key] = `${value}px`;\n          } else {\n            var _theme$vars;\n            sxObject[key] = ((_theme$vars = theme.vars) == null ? void 0 : _theme$vars.radius[value]) || value;\n          }\n        } else if (['p', 'padding', 'm', 'margin'].indexOf(key) !== -1 && typeof value === 'number') {\n          sxObject[key] = theme.spacing(value);\n        } else {\n          sxObject[key] = value;\n        }\n      } else if (typeof value === 'function') {\n        sxObject[key] = value(theme);\n      } else {\n        sxObject[key] = undefined;\n      }\n    });\n  }\n  return sxObject;\n};"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI;;AACJ,OAAO,MAAMC,cAAc,GAAG,OAG3BC,IAH2B,KAGlB;EAAA,IAHmB;IAC7BC,KAD6B;IAE7BC;EAF6B,CAGnB;EACV,IAAIC,QAAQ,GAAG,EAAf;;EACA,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;IACzB,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;MAChC,MAAMC,MAAM,GAAGD,MAAM,CAACJ,KAAD,CAArB;MACAG,SAAS,CAACE,MAAD,CAAT;IACD,CAHD,MAGO,IAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;MAChCA,MAAM,CAACI,OAAP,CAAeC,MAAM,IAAI;QACvB,IAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;UAC/BN,SAAS,CAACM,MAAD,CAAT;QACD;MACF,CAJD;IAKD,CANM,MAMA,IAAI,OAAOL,MAAP,KAAkB,QAAtB,EAAgC;MACrCF,QAAQ,GAAGL,QAAQ,CAAC,EAAD,EAAKK,QAAL,EAAeE,MAAf,CAAnB;IACD;EACF;;EACD,IAAIH,UAAU,CAACS,EAAf,EAAmB;IACjBP,SAAS,CAACF,UAAU,CAACS,EAAZ,CAAT;IACAX,IAAI,CAACS,OAAL,CAAaG,GAAG,IAAI;MAClB,MAAMC,KAAK,GAAGV,QAAQ,CAACS,GAAD,CAAtB;;MACA,IAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;QAC1D,IAAID,GAAG,KAAK,cAAZ,EAA4B;UAC1B,IAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;YAC7BV,QAAQ,CAACS,GAAD,CAAR,GAAiB,GAAEC,KAAM,IAAzB;UACD,CAFD,MAEO;YACL,IAAIC,WAAJ;;YACAX,QAAQ,CAACS,GAAD,CAAR,GAAgB,CAAC,CAACE,WAAW,GAAGb,KAAK,CAACc,IAArB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8CD,WAAW,CAACE,MAAZ,CAAmBH,KAAnB,CAA/C,KAA6EA,KAA7F;UACD;QACF,CAPD,MAOO,IAAI,CAAC,GAAD,EAAM,SAAN,EAAiB,GAAjB,EAAsB,QAAtB,EAAgCI,OAAhC,CAAwCL,GAAxC,MAAiD,CAAC,CAAlD,IAAuD,OAAOC,KAAP,KAAiB,QAA5E,EAAsF;UAC3FV,QAAQ,CAACS,GAAD,CAAR,GAAgBX,KAAK,CAACiB,OAAN,CAAcL,KAAd,CAAhB;QACD,CAFM,MAEA;UACLV,QAAQ,CAACS,GAAD,CAAR,GAAgBC,KAAhB;QACD;MACF,CAbD,MAaO,IAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;QACtCV,QAAQ,CAACS,GAAD,CAAR,GAAgBC,KAAK,CAACZ,KAAD,CAArB;MACD,CAFM,MAEA;QACLE,QAAQ,CAACS,GAAD,CAAR,GAAgBO,SAAhB;MACD;IACF,CApBD;EAqBD;;EACD,OAAOhB,QAAP;AACD,CA5CM"},"metadata":{},"sourceType":"module"}