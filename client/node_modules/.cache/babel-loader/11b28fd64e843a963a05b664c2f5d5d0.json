{"ast":null,"code":"import { loadNavermapsScript } from \"./chunk-XOWKJF45.mjs\";\nimport { useClientOptions } from \"./chunk-4CM6CARW.mjs\"; // src/use-navermaps.ts\n\nimport { suspend } from \"suspend-react\";\n\nasync function load(options) {\n  var _a;\n\n  if (typeof window !== \"undefined\" && ((_a = window.naver) == null ? void 0 : _a.maps)) {\n    return window.naver.maps;\n  }\n\n  if (!options) {\n    throw new Error(\"react-naver-maps: set options with `useNavermaps.config`\");\n  }\n\n  return await loadNavermapsScript(options);\n}\n\nfunction useNavermaps() {\n  var _a;\n\n  if (typeof window === \"undefined\") {\n    throw new Error(\"react-naver-maps: browser\");\n  }\n\n  if ((_a = window.naver) == null ? void 0 : _a.maps) {\n    return window.naver.maps;\n  }\n\n  const options = useClientOptions();\n  return suspend(load, [options, \"react-naver-maps/loadClient\"]);\n}\n\nexport { useNavermaps };","map":{"version":3,"mappings":";;;AAAA,SAASA,OAAT,QAAwB,eAAxB;;AAMA,eAAeC,IAAf,CAAoBC,OAApB,EAAyE;EANzE;;EAOE,IAAI,OAAOC,MAAP,KAAkB,WAAlB,KAAkB,CAAeC,YAAOC,KAAtB,KAAe,IAAf,GAAe,MAAf,GAAeD,GAAcE,IAA/C,CAAJ,EAAyD;IACvD,OAAOH,OAAOE,KAAP,CAAaC,IAApB;EACF;;EAEA,IAAI,CAACJ,OAAL,EAAc;IACZ,MAAM,IAAIK,KAAJ,CAAU,0DAAV,CAAN;EACF;;EAEA,OAAO,MAAMC,oBAAoBN,OAApB,CAAb;AACF;;AAEO,SAASO,YAAT,GAAwB;EAlB/B;;EAmBE,IAAI,OAAON,MAAP,KAAkB,WAAtB,EAAmC;IACjC,MAAM,IAAII,KAAJ,CAAU,2BAAV,CAAN;EACF;;EAMA,KAAIH,YAAOC,KAAX,KAAI,IAAJ,GAAI,MAAJ,GAAID,GAAcE,IAAlB,EAAwB;IACtB,OAAOH,OAAOE,KAAP,CAAaC,IAApB;EACF;;EAEA,MAAMJ,UAAUQ,kBAAhB;EAEA,OAAOV,QAAQC,IAAR,EAAc,CAACC,OAAD,EAAU,6BAAV,CAAd,CAAP;AACF","names":["suspend","load","options","window","_a","naver","maps","Error","loadNavermapsScript","useNavermaps","useClientOptions"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/use-navermaps.ts"],"sourcesContent":["import { suspend } from 'suspend-react';\n\nimport { useClientOptions } from './contexts/client-options';\nimport { loadNavermapsScript } from './load-navermaps-script';\nimport type { ClientOptions } from './types/client';\n\nasync function load(options?: ClientOptions): Promise<typeof naver.maps> {\n  if (typeof window !== 'undefined' && window.naver?.maps) {\n    return window.naver.maps;\n  }\n\n  if (!options) {\n    throw new Error('react-naver-maps: set options with `useNavermaps.config`');\n  }\n\n  return await loadNavermapsScript(options);\n}\n\nexport function useNavermaps() {\n  if (typeof window === 'undefined') {\n    throw new Error('react-naver-maps: browser');\n  }\n\n  /**\n   * TODO: Provider option 이 변경될 경우 클리어하는 로직 필요\n   * ex) submodule 에 파노라마 추가시 window.naver.maps가 존재하므로 새로 로드하지 않음\n   */\n  if (window.naver?.maps) {\n    return window.naver.maps;\n  }\n\n  const options = useClientOptions();\n\n  return suspend(load, [options, 'react-naver-maps/loadClient']);\n}\n\n// useNavermaps.preload = (options: any) => {\n//   if (!window) {\n//     return;\n//   }\n\n//   return preload(load, [options, 'react-naver-maps/loadClient']);\n// };\n\n// useNavermaps.clear = (options: any) => {\n//   return clear([options, 'react-naver-maps/loadClient']);\n// };\n"]},"metadata":{},"sourceType":"module"}