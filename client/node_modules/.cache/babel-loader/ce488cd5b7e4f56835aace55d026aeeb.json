{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews(_ref) {\n  let {\n    onChange,\n    onViewChange,\n    openTo,\n    view: inView,\n    views,\n    autoFocus,\n    focusedView: inFocusedView,\n    onFocusedViewChange\n  } = _ref;\n\n  var _views, _views2;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(`MUI: \\`view=\"${inView}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(`MUI: \\`openTo=\"${openTo}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  const viewIndex = views.indexOf(view);\n  const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;\n  const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;\n  const handleChangeView = useEventCallback(newView => {\n    setView(newView);\n\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const globalSelectionState = isSelectionFinishedOnCurrentView && Boolean(nextView) ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState);\n\n    if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n\n    onFocusedViewChange == null ? void 0 : onFocusedViewChange(viewToFocus, hasFocus);\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    defaultView: defaultView.current,\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}","map":{"version":3,"names":["React","useEventCallback","unstable_useControlled","useControlled","warnedOnceNotValidView","useViews","onChange","onViewChange","openTo","view","inView","views","autoFocus","focusedView","inFocusedView","onFocusedViewChange","_views","_views2","process","env","NODE_ENV","includes","console","warn","join","defaultView","useRef","setView","name","state","controlled","default","current","defaultFocusedView","setFocusedView","viewIndex","indexOf","previousView","nextView","handleChangeView","newView","goToNextView","setValueAndGoToNextView","value","currentViewSelectionState","isSelectionFinishedOnCurrentView","globalSelectionState","Boolean","handleFocusedViewChange","viewToFocus","hasFocus","prevFocusedView"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/@mui/x-date-pickers/internals/hooks/useViews.js"],"sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews({\n  onChange,\n  onViewChange,\n  openTo,\n  view: inView,\n  views,\n  autoFocus,\n  focusedView: inFocusedView,\n  onFocusedViewChange\n}) {\n  var _views, _views2;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(`MUI: \\`view=\"${inView}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(`MUI: \\`openTo=\"${openTo}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  const viewIndex = views.indexOf(view);\n  const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;\n  const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;\n  const handleChangeView = useEventCallback(newView => {\n    setView(newView);\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const globalSelectionState = isSelectionFinishedOnCurrentView && Boolean(nextView) ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState);\n    if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n\n    onFocusedViewChange == null ? void 0 : onFocusedViewChange(viewToFocus, hasFocus);\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    defaultView: defaultView.current,\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}