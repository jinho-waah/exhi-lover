{"ast":null,"code":"\"use client\"; // src/useMutation.ts\n\nimport _objectSpread from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from \"react\";\nimport { MutationObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { noop, shouldThrowError } from \"./utils.js\";\n\nfunction useMutation(options, queryClient) {\n  var client = useQueryClient(queryClient);\n\n  var _React$useState = React.useState(function () {\n    return new MutationObserver(client, options);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      observer = _React$useState2[0];\n\n  React.useEffect(function () {\n    observer.setOptions(options);\n  }, [observer, options]);\n  var result = React.useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return observer.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [observer]), function () {\n    return observer.getCurrentResult();\n  }, function () {\n    return observer.getCurrentResult();\n  });\n  var mutate = React.useCallback(function (variables, mutateOptions) {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n\n  return _objectSpread(_objectSpread({}, result), {}, {\n    mutate: mutate,\n    mutateAsync: result.mutate\n  });\n}\n\nexport { useMutation };","map":{"version":3,"mappings":";;;;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,sBAAhD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,IAAT,EAAeC,gBAAf,QAAuC,YAAvC;;AAUO,SAASC,WAAT,CAMLC,OANK,EAOLC,WAPK,EAQmD;EACxD,IAAMC,SAASN,eAAeK,WAAf,CAAf;;EAEA,sBAAyBR,eACvB;IAAA,OACE,IAAIC,gBAAJ,CACEQ,MADF,EAEEF,OAFF,CADF;EAAA,CADuB,CAAzB;EAAA;EAAA,IAAOG,QAAP;;EAQMV,gBAAU,YAAM;IACpBU,SAASC,UAAT,CAAoBJ,OAApB;EACF,CAFM,EAEH,CAACG,QAAD,EAAWH,OAAX,CAFG;EAIN,IAAMK,SAAeZ,2BACbA,kBACJ,UAACa,aAAD;IAAA,OACEH,SAASI,SAAT,CAAmBZ,cAAca,UAAd,CAAyBF,aAAzB,CAAnB,CADF;EAAA,CADI,EAGJ,CAACH,QAAD,CAHI,CADa,EAMnB;IAAA,OAAMA,SAASM,gBAAT,EAAN;EAAA,CANmB,EAOnB;IAAA,OAAMN,SAASM,gBAAT,EAAN;EAAA,CAPmB,CAArB;EAUA,IAAMC,SAAejB,kBAGnB,UAACkB,SAAD,EAAYC,aAAZ,EAA8B;IAC5BT,SAASO,MAAT,CAAgBC,SAAhB,EAA2BC,aAA3B,EAA0CC,KAA1C,CAAgDhB,IAAhD;EACF,CALmB,EAMnB,CAACM,QAAD,CANmB,CAArB;;EASA,IACEE,OAAOS,KAAP,IACAhB,iBAAiBK,SAASH,OAAT,CAAiBe,YAAlC,EAAgD,CAACV,OAAOS,KAAR,CAAhD,CAFF,EAGE;IACA,MAAMT,OAAOS,KAAb;EACF;;EAEA,uCAAYT,MAAZ;IAAoBK,cAApB;IAA4BM,aAAaX,OAAOK;EAAhD;AACF","names":["React","MutationObserver","notifyManager","useQueryClient","noop","shouldThrowError","useMutation","options","queryClient","client","observer","setOptions","result","onStoreChange","subscribe","batchCalls","getCurrentResult","mutate","variables","mutateOptions","catch","error","throwOnError","mutateAsync"],"sources":["/Users/andrew/node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"]},"metadata":{},"sourceType":"module"}