{"ast":null,"code":"// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey, resolveStaleTime, skipToken } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = class {\n  #queryCache;\n  #mutationCache;\n  #defaultOptions;\n  #queryDefaults;\n  #mutationDefaults;\n  #mountCount;\n  #unsubscribeFocus;\n  #unsubscribeOnline;\n\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.#queryCache = config.queryCache || new QueryCache();\n    this.#mutationCache = config.mutationCache || new MutationCache();\n    this.#defaultOptions = config.defaultOptions || {};\n    this.#queryDefaults = /* @__PURE__ */new Map();\n    this.#mutationDefaults = /* @__PURE__ */new Map();\n    this.#mountCount = 0;\n  }\n\n  mount() {\n    this.#mountCount++;\n    if (this.#mountCount !== 1) return;\n    this.#unsubscribeFocus = focusManager.subscribe(async focused => {\n      if (focused) {\n        await this.resumePausedMutations();\n        this.#queryCache.onFocus();\n      }\n    });\n    this.#unsubscribeOnline = onlineManager.subscribe(async online => {\n      if (online) {\n        await this.resumePausedMutations();\n        this.#queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    this.#mountCount--;\n    if (this.#mountCount !== 0) return;\n    this.#unsubscribeFocus?.();\n    this.#unsubscribeFocus = void 0;\n    this.#unsubscribeOnline?.();\n    this.#unsubscribeOnline = void 0;\n  }\n\n  isFetching(filters) {\n    return this.#queryCache.findAll({ ...filters,\n      fetchStatus: \"fetching\"\n    }).length;\n  }\n\n  isMutating(filters) {\n    return this.#mutationCache.findAll({ ...filters,\n      status: \"pending\"\n    }).length;\n  }\n\n  getQueryData(queryKey) {\n    const options = this.defaultQueryOptions({\n      queryKey\n    });\n    return this.#queryCache.get(options.queryHash)?.state.data;\n  }\n\n  ensureQueryData(options) {\n    const cachedData = this.getQueryData(options.queryKey);\n    if (cachedData === void 0) return this.fetchQuery(options);else {\n      const defaultedOptions = this.defaultQueryOptions(options);\n      const query = this.#queryCache.build(this, defaultedOptions);\n\n      if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {\n        void this.prefetchQuery(defaultedOptions);\n      }\n\n      return Promise.resolve(cachedData);\n    }\n  }\n\n  getQueriesData(filters) {\n    return this.#queryCache.findAll(filters).map(_ref => {\n      let {\n        queryKey,\n        state\n      } = _ref;\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const defaultedOptions = this.defaultQueryOptions({\n      queryKey\n    });\n    const query = this.#queryCache.get(defaultedOptions.queryHash);\n    const prevData = query?.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (data === void 0) {\n      return void 0;\n    }\n\n    return this.#queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(() => this.#queryCache.findAll(filters).map(_ref2 => {\n      let {\n        queryKey\n      } = _ref2;\n      return [queryKey, this.setQueryData(queryKey, updater, options)];\n    }));\n  }\n\n  getQueryState(queryKey) {\n    const options = this.defaultQueryOptions({\n      queryKey\n    });\n    return this.#queryCache.get(options.queryHash)?.state;\n  }\n\n  removeQueries(filters) {\n    const queryCache = this.#queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(filters, options) {\n    const queryCache = this.#queryCache;\n    const refetchFilters = {\n      type: \"active\",\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const defaultedCancelOptions = {\n      revert: true,\n      ...cancelOptions\n    };\n    const promises = notifyManager.batch(() => this.#queryCache.findAll(filters).map(query => query.cancel(defaultedCancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: filters.refetchType ?? filters.type ?? \"active\"\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    const fetchOptions = { ...options,\n      cancelRefetch: options?.cancelRefetch ?? true\n    };\n    const promises = notifyManager.batch(() => this.#queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      let promise = query.fetch(void 0, fetchOptions);\n\n      if (!fetchOptions.throwOnError) {\n        promise = promise.catch(noop);\n      }\n\n      return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n    }));\n    return Promise.all(promises).then(noop);\n  }\n\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n\n    if (defaultedOptions.retry === void 0) {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query)) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n\n  ensureInfiniteQueryData(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.ensureQueryData(options);\n  }\n\n  resumePausedMutations() {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations();\n    }\n\n    return Promise.resolve();\n  }\n\n  getQueryCache() {\n    return this.#queryCache;\n  }\n\n  getMutationCache() {\n    return this.#mutationCache;\n  }\n\n  getDefaultOptions() {\n    return this.#defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.#defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n\n  getQueryDefaults(queryKey) {\n    const defaults = [...this.#queryDefaults.values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n\n  getMutationDefaults(mutationKey) {\n    const defaults = [...this.#mutationDefaults.values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n\n  defaultQueryOptions(options) {\n    if (options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    }\n\n    if (defaultedOptions.refetchOnReconnect === void 0) {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n\n    if (defaultedOptions.throwOnError === void 0) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n\n    if (defaultedOptions.enabled !== true && defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n\n    return { ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey && this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.#queryCache.clear();\n    this.#mutationCache.clear();\n  }\n\n};\nexport { QueryClient };","map":{"version":3,"mappings":"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","names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","resolveStaleTime","skipToken","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","constructor","config","queryCache","mutationCache","defaultOptions","Map","mount","subscribe","focused","resumePausedMutations","onFocus","online","onOnline","unmount","isFetching","filters","findAll","fetchStatus","length","isMutating","status","getQueryData","queryKey","options","defaultQueryOptions","get","queryHash","state","data","ensureQueryData","cachedData","fetchQuery","defaultedOptions","query","build","revalidateIfStale","isStaleByTime","staleTime","prefetchQuery","Promise","resolve","getQueriesData","map","setQueryData","updater","prevData","setData","manual","setQueriesData","batch","getQueryState","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","invalidate","refetchType","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","ensureInfiniteQueryData","isOnline","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","values","result","queryDefault","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","refetchOnReconnect","networkMode","suspense","persister","enabled","queryFn","defaultMutationOptions","mutations","clear"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type {\n  CancelOptions,\n  DataTag,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureInfiniteQueryDataOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  NoInfer,\n  OmitKeyof,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get(options.queryHash)?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    if (cachedData === undefined) return this.fetchQuery(options)\n    else {\n      const defaultedOptions = this.defaultQueryOptions(options)\n      const query = this.#queryCache.build(this, defaultedOptions)\n\n      if (\n        options.revalidateIfStale &&\n        query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))\n      ) {\n        void this.prefetchQuery(defaultedOptions)\n      }\n\n      return Promise.resolve(cachedData)\n    }\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TError>(options.queryHash)\n      ?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query),\n    )\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options as any)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  ensureInfiniteQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: EnsureInfiniteQueryDataOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n\n    return this.ensureQueryData(options as any)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n  >(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<\n        QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n        'queryKey'\n      >\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = void,\n    TContext = unknown,\n  >(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (\n      defaultedOptions.enabled !== true &&\n      defaultedOptions.queryFn === skipToken\n    ) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}