{"ast":null,"code":"import _objectSpread from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateFieldInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n\nvar _queries;\n\n// src/queryCache.ts\nimport { hashQueryKeyByOptions, matchQuery } from \"./utils.js\";\nimport { Query } from \"./query.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar QueryCache = (_queries = /*#__PURE__*/new WeakMap(), /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryCache, _Subscribable);\n\n  var _super = _createSuper(QueryCache);\n\n  function QueryCache() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, QueryCache);\n\n    _this = _super.call(this);\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _queries, {\n      writable: true,\n      value: void 0\n    });\n\n    _this.config = config;\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _queries, /* @__PURE__ */new Map());\n\n    return _this;\n  }\n\n  _createClass(QueryCache, [{\n    key: \"build\",\n    value: function build(client, options, state) {\n      var _options$queryHash;\n\n      var queryKey = options.queryKey;\n      var queryHash = (_options$queryHash = options.queryHash) !== null && _options$queryHash !== void 0 ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n      var query = this.get(queryHash);\n\n      if (!query) {\n        query = new Query({\n          cache: this,\n          queryKey: queryKey,\n          queryHash: queryHash,\n          options: client.defaultQueryOptions(options),\n          state: state,\n          defaultOptions: client.getQueryDefaults(queryKey)\n        });\n        this.add(query);\n      }\n\n      return query;\n    }\n  }, {\n    key: \"add\",\n    value: function add(query) {\n      if (!_classPrivateFieldGet(this, _queries).has(query.queryHash)) {\n        _classPrivateFieldGet(this, _queries).set(query.queryHash, query);\n\n        this.notify({\n          type: \"added\",\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(query) {\n      var queryInMap = _classPrivateFieldGet(this, _queries).get(query.queryHash);\n\n      if (queryInMap) {\n        query.destroy();\n\n        if (queryInMap === query) {\n          _classPrivateFieldGet(this, _queries).delete(query.queryHash);\n        }\n\n        this.notify({\n          type: \"removed\",\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n\n      notifyManager.batch(function () {\n        _this2.getAll().forEach(function (query) {\n          _this2.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(queryHash) {\n      return _classPrivateFieldGet(this, _queries).get(queryHash);\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return _toConsumableArray(_classPrivateFieldGet(this, _queries).values());\n    }\n  }, {\n    key: \"find\",\n    value: function find(filters) {\n      var defaultedFilters = _objectSpread({\n        exact: true\n      }, filters);\n\n      return this.getAll().find(function (query) {\n        return matchQuery(defaultedFilters, query);\n      });\n    }\n  }, {\n    key: \"findAll\",\n    value: function findAll() {\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var queries = this.getAll();\n      return Object.keys(filters).length > 0 ? queries.filter(function (query) {\n        return matchQuery(filters, query);\n      }) : queries;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(event) {\n      var _this3 = this;\n\n      notifyManager.batch(function () {\n        _this3.listeners.forEach(function (listener) {\n          listener(event);\n        });\n      });\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _this4 = this;\n\n      notifyManager.batch(function () {\n        _this4.getAll().forEach(function (query) {\n          query.onFocus();\n        });\n      });\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _this5 = this;\n\n      notifyManager.batch(function () {\n        _this5.getAll().forEach(function (query) {\n          query.onOnline();\n        });\n      });\n    }\n  }]);\n\n  return QueryCache;\n}(Subscribable));\nexport { QueryCache };","map":{"version":3,"mappings":"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","names":["hashQueryKeyByOptions","matchQuery","Query","notifyManager","Subscribable","QueryCache","config","Map","client","options","state","queryKey","queryHash","query","get","cache","defaultQueryOptions","defaultOptions","getQueryDefaults","add","has","set","notify","type","queryInMap","destroy","delete","batch","getAll","forEach","remove","values","filters","defaultedFilters","exact","find","queries","Object","keys","length","filter","event","listeners","listener","onFocus","onOnline"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/queryCache.ts"],"sourcesContent":["import { hashQueryKeyByOptions, matchQuery } from './utils'\nimport { Query } from './query'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport type { QueryFilters } from './utils'\nimport type { Action, QueryState } from './query'\nimport type {\n  DefaultError,\n  NotifyEvent,\n  QueryKey,\n  QueryOptions,\n  WithRequired,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (\n    error: DefaultError,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\nexport interface QueryStore {\n  has: (queryHash: string) => boolean\n  set: (queryHash: string, query: Query) => void\n  get: (queryHash: string) => Query | undefined\n  delete: (queryHash: string) => void\n  values: () => IterableIterator<Query>\n}\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  #queries: QueryStore\n\n  constructor(public config: QueryCacheConfig = {}) {\n    super()\n    this.#queries = new Map<string, Query>()\n  }\n\n  build<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    client: QueryClient,\n    options: WithRequired<\n      QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query)\n\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.#queries.get(query.queryHash)\n\n    if (queryInMap) {\n      query.destroy()\n\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash)\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.#queries.get(queryHash) as\n      | Query<TQueryFnData, TError, TData, TQueryKey>\n      | undefined\n  }\n\n  getAll(): Array<Query> {\n    return [...this.#queries.values()]\n  }\n\n  find<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData>(\n    filters: WithRequired<QueryFilters, 'queryKey'>,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((query) =>\n      matchQuery(defaultedFilters, query),\n    ) as Query<TQueryFnData, TError, TData> | undefined\n  }\n\n  findAll(filters: QueryFilters = {}): Array<Query> {\n    const queries = this.getAll()\n    return Object.keys(filters).length > 0\n      ? queries.filter((query) => matchQuery(filters, query))\n      : queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}