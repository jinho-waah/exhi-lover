{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { fetchShowTagsId, fetchTagName } from \"../../lib/api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n_c = TemplateBlock;\n\nconst PostTemplate = _ref => {\n  _s();\n\n  let {\n    shows\n  } = _ref;\n  const [tags, setTags] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setError(null);\n        const tagsIdData = await Promise.all(shows.map(async show => {\n          const data = await fetchShowTagsId(show.id);\n          return data;\n        }));\n        const tagData = await Promise.all(tagsIdData.flatMap(_ref2 => {\n          let {\n            exhibition_id,\n            tags\n          } = _ref2;\n          return tags.map(async tagId => {\n            const name = await fetchTagName(tagId);\n            return {\n              exhibition_id,\n              tagId,\n              name\n            };\n          });\n        }));\n        const tagsById = {};\n        tagData.forEach(_ref3 => {\n          let {\n            exhibition_id,\n            tagId,\n            name\n          } = _ref3;\n\n          if (!tagsById[exhibition_id]) {\n            tagsById[exhibition_id] = {};\n          }\n\n          tagsById[exhibition_id][tagId] = name;\n        });\n        setTags(tagsById);\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    fetchData();\n  }, [shows]);\n  return /*#__PURE__*/_jsxDEV(TemplateBlock, {\n    children: shows.map((show, index) => {\n      const key = `${show.show_name}`; // create unique key prop value\n\n      const colorIndex = index % colorSet.length; // determine color index based on position in array\n\n      const color = colorSet[colorIndex]; // get color from colorSet array\n\n      return /*#__PURE__*/_jsxDEV(Post, {\n        show: show,\n        color: color,\n        tags: tags === null || tags === void 0 ? void 0 : tags[show.id]\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this); // pass color as prop to Post component\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostTemplate, \"RCjiX3icWyozmgzM7GUvl1NaVC8=\");\n\n_c2 = PostTemplate;\nexport default _c3 = /*#__PURE__*/React.memo(PostTemplate);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TemplateBlock\");\n$RefreshReg$(_c2, \"PostTemplate\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","styled","Post","colorSet","fetchShowTagsId","fetchTagName","TemplateBlock","div","PostTemplate","shows","tags","setTags","error","setError","fetchData","tagsIdData","Promise","all","map","show","data","id","tagData","flatMap","exhibition_id","tagId","name","tagsById","forEach","e","index","key","show_name","colorIndex","length","color","memo"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { fetchShowTagsId, fetchTagName } from \"../../lib/api/api\";\n\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n\nconst PostTemplate = ({ shows }) => {\n  const [tags, setTags] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setError(null);\n\n        const tagsIdData = await Promise.all(\n          shows.map(async (show) => {\n            const data = await fetchShowTagsId(show.id);\n            return data;\n          })\n        );\n\n        const tagData = await Promise.all(\n          tagsIdData.flatMap(({ exhibition_id, tags }) => {\n            return tags.map(async (tagId) => {\n              const name = await fetchTagName(tagId);\n              return { exhibition_id, tagId, name };\n            });\n          })\n        );\n\n        const tagsById = {};\n        tagData.forEach(({ exhibition_id, tagId, name }) => {\n          if (!tagsById[exhibition_id]) {\n            tagsById[exhibition_id] = {};\n          }\n          tagsById[exhibition_id][tagId] = name;\n        });\n\n        setTags(tagsById);\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    fetchData();\n  }, [shows]);\n\n  return (\n    <TemplateBlock>\n      {shows.map((show, index) => {\n        const key = `${show.show_name}`; // create unique key prop value\n        const colorIndex = index % colorSet.length; // determine color index based on position in array\n        const color = colorSet[colorIndex]; // get color from colorSet array\n        return (\n          <Post show={show} key={key} color={color} tags={tags?.[show.id]} />\n        ); // pass color as prop to Post component\n      })}\n    </TemplateBlock>\n  );\n};\n\nexport default React.memo(PostTemplate);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}