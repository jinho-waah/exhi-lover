{"ast":null,"code":"import { useEventTarget } from \"./chunk-YH7PRLMG.mjs\"; // src/listener.tsx\n\nimport { useEffect } from \"react\";\n\nfunction useListener(target, type, listener) {\n  useEffect(() => {\n    const _listener = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return listener(...args, target);\n    };\n\n    const mapEventListener = naver.maps.Event.addListener(target, type, _listener);\n    return () => {\n      naver.maps.Event.removeListener(mapEventListener);\n    };\n  }, [target, type, listener]);\n}\n\nvar Listener = props => {\n  const {\n    target: propTarget,\n    type,\n    listener\n  } = props;\n  const contextTarget = useEventTarget();\n  const target = propTarget || contextTarget;\n\n  if (!target) {\n    throw new Error(\"react-naver-maps: No Target to add listener\");\n  }\n\n  useListener(target, type, listener);\n  return null;\n};\n\nfunction getListenerKeys(props) {\n  return Object.keys(props).filter(key => /on[A-Z]\\w+/.test(key));\n}\n\nexport { useListener, Listener, getListenerKeys };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAMO,SAASC,WAAT,CAAqBC,MAArB,EAAkCC,IAAlC,EAAgDC,QAAhD,EAAoF;EACzFJ,UAAU,MAAM;IACd,MAAMK,YAAY;MAAA,kCAAIC,IAAJ;QAAIA,IAAJ;MAAA;;MAAA,OAAoBF,SAAS,GAAGE,IAAZ,EAAkBJ,MAAlB,CAApB;IAAA,CAAlB;;IACA,MAAMK,mBAAmBC,MAAMC,IAAN,CAAWC,KAAX,CAAiBC,WAAjB,CAA6BT,MAA7B,EAAqCC,IAArC,EAA2CE,SAA3C,CAAzB;IAEA,OAAO,MAAM;MACXG,MAAMC,IAAN,CAAWC,KAAX,CAAiBE,cAAjB,CAAgCL,gBAAhC;IACF,CAFA;EAGF,CAPA,EAOG,CAACL,MAAD,EAASC,IAAT,EAAeC,QAAf,CAPH;AAQF;;AAQO,IAAMS,WAAsCC,KAAD,IAAW;EAC3D,MAAM;IACJZ,QAAQa,UADJ;IAEJZ,IAFI;IAGJC;EAHI,IAIFU,KAJJ;EAMA,MAAME,gBAAgBC,gBAAtB;EACA,MAAMf,SAASa,cAAcC,aAA7B;;EACA,IAAI,CAACd,MAAL,EAAa;IACX,MAAM,IAAIgB,KAAJ,CAAU,6CAAV,CAAN;EACF;;EAGAjB,YAAaC,MAAb,EAAgDC,IAAhD,EAAsDC,QAAtD;EAEA,OAAO,IAAP;AACF,CAjBO;;AAmBA,SAASe,eAAT,CAAwDL,KAAxD,EAAkE;EACvE,OAAOM,OAAOC,IAAP,CAAYP,KAAZ,EAAmBQ,MAAnB,CAA0BC,OAAO,aAAaC,IAAb,CAAkBD,GAAlB,CAAjC,CAAP;AACF","names":["useEffect","useListener","target","type","listener","_listener","args","mapEventListener","naver","maps","Event","addListener","removeListener","Listener","props","propTarget","contextTarget","useEventTarget","Error","getListenerKeys","Object","keys","filter","key","test"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/listener.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport type { FunctionComponent } from 'react';\n\nimport { useEventTarget } from './contexts/event-target';\nimport type { AllowedKey } from './types/utils';\n\nexport function useListener(target: any, type: string, listener: (...args: any[]) => void) {\n  useEffect(() => {\n    const _listener = (...args: any[]) => listener(...args, target);\n    const mapEventListener = naver.maps.Event.addListener(target, type, _listener);\n\n    return () => {\n      naver.maps.Event.removeListener(mapEventListener);\n    };\n  }, [target, type, listener]);\n}\n\nexport interface Props {\n  target?: any;\n  type: string;\n  listener: (...args: any[]) => any;\n}\n\nexport const Listener: FunctionComponent<Props> = (props) => {\n  const {\n    target: propTarget,\n    type,\n    listener,\n  } = props;\n\n  const contextTarget = useEventTarget();\n  const target = propTarget || contextTarget;\n  if (!target) {\n    throw new Error('react-naver-maps: No Target to add listener');\n  }\n\n  // TODO: FIX DefinitelyTyped\n  useListener((target as unknown) as EventTarget, type, listener);\n\n  return null;\n};\n\nexport function getListenerKeys<P extends Record<string, any>>(props: P) {\n  return Object.keys(props).filter(key => /on[A-Z]\\w+/.test(key)) as unknown as Array<AllowedKey<P, `on${string}`>>;\n}\n"]},"metadata":{},"sourceType":"module"}