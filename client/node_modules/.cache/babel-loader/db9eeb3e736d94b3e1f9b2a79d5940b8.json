{"ast":null,"code":"import { useMap } from \"./chunk-OHKTFK4Q.mjs\";\nimport { EventTargetContext } from \"./chunk-YH7PRLMG.mjs\"; // src/overlay.tsx\n\nimport { useEffect } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction Overlay(props) {\n  const {\n    element,\n    children,\n    autoMount = true\n  } = props;\n  const nmap = useMap();\n  useEffect(() => {\n    if (!autoMount) {\n      return;\n    }\n\n    if (element.getMap() === nmap) {\n      return;\n    }\n\n    element.setMap(nmap ? nmap : null);\n    return () => {\n      element.setMap(null);\n    };\n  }, [nmap]);\n  return /* @__PURE__ */jsx(EventTargetContext.Provider, {\n    value: element,\n    children\n  });\n}\n\nexport { Overlay };","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAqCI;;AApBG,SAASC,OAAT,CAAiBC,KAAjB,EAA+B;EACpC,MAAM;IAAEC,OAAF;IAAWC,QAAX;IAAqBC,YAAY;EAAjC,IAA0CH,KAAhD;EACA,MAAMI,OAAOC,QAAb;EAEAP,UAAU,MAAM;IACd,IAAI,CAACK,SAAL,EAAgB;MACd;IACF;;IAEA,IAAIF,QAAQK,MAAR,OAAqBF,IAAzB,EAA+B;MAC7B;IACF;;IAEAH,QAAQM,MAAR,CAAeH,OAAOA,IAAP,GAAc,IAA7B;IACA,OAAO,MAAM;MACXH,QAAQM,MAAR,CAAe,IAAf;IACF,CAFA;EAGF,CAbA,EAaG,CAACH,IAAD,CAbH;EAeA,OACE,mBAACI,mBAAmBC,QAApB,EAAC;IAA4BC,OAAOT,OAAnC;IACEC;EADF,CAAD,CADF;AAKF","names":["useEffect","Overlay","props","element","children","autoMount","nmap","useMap","getMap","setMap","EventTargetContext","Provider","value"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/overlay.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { EventTargetContext } from './contexts/event-target';\nimport { useMap } from './contexts/naver-map';\n\ntype MapElementType = {\n  setMap(map: naver.maps.Map | null): void;\n  getMap(): naver.maps.Map | null;\n};\n\nexport type Props = {\n  element: MapElementType;\n  children?: ReactNode;\n  autoMount?: boolean;\n};\n\nexport function Overlay(props: Props) {\n  const { element, children, autoMount = true } = props;\n  const nmap = useMap();\n\n  useEffect(() => {\n    if (!autoMount) {\n      return;\n    }\n\n    if (element.getMap() === nmap) {\n      return;\n    }\n\n    element.setMap(nmap ? nmap : null);\n    return () => {\n      element.setMap(null);\n    };\n  }, [nmap]);\n\n  return (\n    <EventTargetContext.Provider value={element}>\n      {children}\n    </EventTargetContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}