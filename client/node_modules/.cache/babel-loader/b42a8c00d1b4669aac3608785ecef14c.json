{"ast":null,"code":"import _objectSpread from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n\nvar _observers, _mutationCache, _retryer, _dispatch;\n\n// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { createRetryer } from \"./retryer.js\";\nvar Mutation = (_observers = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _retryer = /*#__PURE__*/new WeakMap(), _dispatch = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Removable) {\n  _inherits(Mutation, _Removable);\n\n  var _super = _createSuper(Mutation);\n\n  function Mutation(config) {\n    var _this;\n\n    _classCallCheck(this, Mutation);\n\n    _this = _super.call(this);\n\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _dispatch);\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _observers, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _mutationCache, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _retryer, {\n      writable: true,\n      value: void 0\n    });\n\n    _this.mutationId = config.mutationId;\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _mutationCache, config.mutationCache);\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _observers, []);\n\n    _this.state = config.state || getDefaultState();\n\n    _this.setOptions(config.options);\n\n    _this.scheduleGc();\n\n    return _this;\n  }\n\n  _createClass(Mutation, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n      this.updateGcTime(this.options.gcTime);\n    }\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (!_classPrivateFieldGet(this, _observers).includes(observer)) {\n        _classPrivateFieldGet(this, _observers).push(observer);\n\n        this.clearGcTimeout();\n\n        _classPrivateFieldGet(this, _mutationCache).notify({\n          type: \"observerAdded\",\n          mutation: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      _classPrivateFieldSet(this, _observers, _classPrivateFieldGet(this, _observers).filter(function (x) {\n        return x !== observer;\n      }));\n\n      this.scheduleGc();\n\n      _classPrivateFieldGet(this, _mutationCache).notify({\n        type: \"observerRemoved\",\n        mutation: this,\n        observer: observer\n      });\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!_classPrivateFieldGet(this, _observers).length) {\n        if (this.state.status === \"pending\") {\n          this.scheduleGc();\n        } else {\n          _classPrivateFieldGet(this, _mutationCache).remove(this);\n        }\n      }\n    }\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      var _classPrivateFieldGet2, _classPrivateFieldGet3;\n\n      return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _retryer)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.continue()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables);\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(variables) {\n        var _this2 = this,\n            _this$options$retry;\n\n        var restored, isPaused, _classPrivateFieldGet6, _classPrivateFieldGet7, _this$options$onSucce, _this$options2, _classPrivateFieldGet8, _classPrivateFieldGet9, _this$options$onSettl, _this$options3, _classPrivateFieldGet4, _classPrivateFieldGet5, _this$options$onMutat, _this$options, context, data, _classPrivateFieldGet10, _classPrivateFieldGet11, _this$options$onError, _this$options4, _classPrivateFieldGet12, _classPrivateFieldGet13, _this$options$onSettl2, _this$options5;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _classPrivateFieldSet(this, _retryer, createRetryer({\n                  fn: function fn() {\n                    if (!_this2.options.mutationFn) {\n                      return Promise.reject(new Error(\"No mutationFn found\"));\n                    }\n\n                    return _this2.options.mutationFn(variables);\n                  },\n                  onFail: function onFail(failureCount, error) {\n                    _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n                      type: \"failed\",\n                      failureCount: failureCount,\n                      error: error\n                    });\n                  },\n                  onPause: function onPause() {\n                    _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n                      type: \"pause\"\n                    });\n                  },\n                  onContinue: function onContinue() {\n                    _classPrivateMethodGet(_this2, _dispatch, _dispatch2).call(_this2, {\n                      type: \"continue\"\n                    });\n                  },\n                  retry: (_this$options$retry = this.options.retry) !== null && _this$options$retry !== void 0 ? _this$options$retry : 0,\n                  retryDelay: this.options.retryDelay,\n                  networkMode: this.options.networkMode,\n                  canRun: function canRun() {\n                    return _classPrivateFieldGet(_this2, _mutationCache).canRun(_this2);\n                  }\n                }));\n\n                restored = this.state.status === \"pending\";\n                isPaused = !_classPrivateFieldGet(this, _retryer).canStart();\n                _context.prev = 3;\n\n                if (restored) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n                  type: \"pending\",\n                  variables: variables,\n                  isPaused: isPaused\n                });\n\n                _context.next = 8;\n                return (_classPrivateFieldGet4 = (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _mutationCache).config).onMutate) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.call(_classPrivateFieldGet5, variables, this);\n\n              case 8:\n                _context.next = 10;\n                return (_this$options$onMutat = (_this$options = this.options).onMutate) === null || _this$options$onMutat === void 0 ? void 0 : _this$options$onMutat.call(_this$options, variables);\n\n              case 10:\n                context = _context.sent;\n\n                if (context !== this.state.context) {\n                  _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n                    type: \"pending\",\n                    context: context,\n                    variables: variables,\n                    isPaused: isPaused\n                  });\n                }\n\n              case 12:\n                _context.next = 14;\n                return _classPrivateFieldGet(this, _retryer).start();\n\n              case 14:\n                data = _context.sent;\n                _context.next = 17;\n                return (_classPrivateFieldGet6 = (_classPrivateFieldGet7 = _classPrivateFieldGet(this, _mutationCache).config).onSuccess) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.call(_classPrivateFieldGet7, data, variables, this.state.context, this);\n\n              case 17:\n                _context.next = 19;\n                return (_this$options$onSucce = (_this$options2 = this.options).onSuccess) === null || _this$options$onSucce === void 0 ? void 0 : _this$options$onSucce.call(_this$options2, data, variables, this.state.context);\n\n              case 19:\n                _context.next = 21;\n                return (_classPrivateFieldGet8 = (_classPrivateFieldGet9 = _classPrivateFieldGet(this, _mutationCache).config).onSettled) === null || _classPrivateFieldGet8 === void 0 ? void 0 : _classPrivateFieldGet8.call(_classPrivateFieldGet9, data, null, this.state.variables, this.state.context, this);\n\n              case 21:\n                _context.next = 23;\n                return (_this$options$onSettl = (_this$options3 = this.options).onSettled) === null || _this$options$onSettl === void 0 ? void 0 : _this$options$onSettl.call(_this$options3, data, null, variables, this.state.context);\n\n              case 23:\n                _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n                  type: \"success\",\n                  data: data\n                });\n\n                return _context.abrupt(\"return\", data);\n\n              case 27:\n                _context.prev = 27;\n                _context.t0 = _context[\"catch\"](3);\n                _context.prev = 29;\n                _context.next = 32;\n                return (_classPrivateFieldGet10 = (_classPrivateFieldGet11 = _classPrivateFieldGet(this, _mutationCache).config).onError) === null || _classPrivateFieldGet10 === void 0 ? void 0 : _classPrivateFieldGet10.call(_classPrivateFieldGet11, _context.t0, variables, this.state.context, this);\n\n              case 32:\n                _context.next = 34;\n                return (_this$options$onError = (_this$options4 = this.options).onError) === null || _this$options$onError === void 0 ? void 0 : _this$options$onError.call(_this$options4, _context.t0, variables, this.state.context);\n\n              case 34:\n                _context.next = 36;\n                return (_classPrivateFieldGet12 = (_classPrivateFieldGet13 = _classPrivateFieldGet(this, _mutationCache).config).onSettled) === null || _classPrivateFieldGet12 === void 0 ? void 0 : _classPrivateFieldGet12.call(_classPrivateFieldGet13, void 0, _context.t0, this.state.variables, this.state.context, this);\n\n              case 36:\n                _context.next = 38;\n                return (_this$options$onSettl2 = (_this$options5 = this.options).onSettled) === null || _this$options$onSettl2 === void 0 ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, _context.t0, variables, this.state.context);\n\n              case 38:\n                throw _context.t0;\n\n              case 39:\n                _context.prev = 39;\n\n                _classPrivateMethodGet(this, _dispatch, _dispatch2).call(this, {\n                  type: \"error\",\n                  error: _context.t0\n                });\n\n                return _context.finish(39);\n\n              case 42:\n                _context.prev = 42;\n\n                _classPrivateFieldGet(this, _mutationCache).runNext(this);\n\n                return _context.finish(42);\n\n              case 45:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 27, 42, 45], [29,, 39, 42]]);\n      }));\n\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }]);\n\n  return Mutation;\n}(Removable));\n\nfunction _dispatch2(action) {\n  var _this3 = this;\n\n  var reducer = function reducer(state) {\n    switch (action.type) {\n      case \"failed\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          failureCount: action.failureCount,\n          failureReason: action.error\n        });\n\n      case \"pause\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isPaused: true\n        });\n\n      case \"continue\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isPaused: false\n        });\n\n      case \"pending\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          context: action.context,\n          data: void 0,\n          failureCount: 0,\n          failureReason: null,\n          error: null,\n          isPaused: action.isPaused,\n          status: \"pending\",\n          variables: action.variables,\n          submittedAt: Date.now()\n        });\n\n      case \"success\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.data,\n          failureCount: 0,\n          failureReason: null,\n          error: null,\n          status: \"success\",\n          isPaused: false\n        });\n\n      case \"error\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: void 0,\n          error: action.error,\n          failureCount: state.failureCount + 1,\n          failureReason: action.error,\n          isPaused: false,\n          status: \"error\"\n        });\n    }\n  };\n\n  this.state = reducer(this.state);\n  notifyManager.batch(function () {\n    _classPrivateFieldGet(_this3, _observers).forEach(function (observer) {\n      observer.onMutationUpdate(action);\n    });\n\n    _classPrivateFieldGet(_this3, _mutationCache).notify({\n      mutation: _this3,\n      type: \"updated\",\n      action: action\n    });\n  });\n}\n\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\n\nexport { Mutation, getDefaultState };","map":{"version":3,"mappings":"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","names":["notifyManager","Removable","createRetryer","Mutation","config","mutationId","mutationCache","state","getDefaultState","setOptions","options","scheduleGc","updateGcTime","gcTime","meta","observer","includes","push","clearGcTimeout","notify","type","mutation","filter","x","length","status","remove","continue","execute","variables","fn","mutationFn","Promise","reject","Error","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","canRun","restored","isPaused","canStart","onMutate","context","start","data","onSuccess","onSettled","onError","runNext","action","reducer","failureReason","submittedAt","Date","now","batch","forEach","onMutationUpdate"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/mutation.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (!restored) {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}