{"ast":null,"code":"import _objectSpread from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// src/infiniteQueryObserver.ts\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { hasNextPage, hasPreviousPage, infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\n\nvar InfiniteQueryObserver = /*#__PURE__*/function (_QueryObserver) {\n  _inherits(InfiniteQueryObserver, _QueryObserver);\n\n  var _super = _createSuper(InfiniteQueryObserver);\n\n  function InfiniteQueryObserver(client, options) {\n    _classCallCheck(this, InfiniteQueryObserver);\n\n    return _super.call(this, client, options);\n  }\n\n  _createClass(InfiniteQueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"bindMethods\", this).call(this);\n\n      this.fetchNextPage = this.fetchNextPage.bind(this);\n      this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"setOptions\", this).call(this, _objectSpread(_objectSpread({}, options), {}, {\n        behavior: infiniteQueryBehavior()\n      }), notifyOptions);\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      options.behavior = infiniteQueryBehavior();\n      return _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"getOptimisticResult\", this).call(this, options);\n    }\n  }, {\n    key: \"fetchNextPage\",\n    value: function fetchNextPage(options) {\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          fetchMore: {\n            direction: \"forward\"\n          }\n        }\n      }));\n    }\n  }, {\n    key: \"fetchPreviousPage\",\n    value: function fetchPreviousPage(options) {\n      return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n        meta: {\n          fetchMore: {\n            direction: \"backward\"\n          }\n        }\n      }));\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var _state$fetchMeta, _state$fetchMeta$fetc;\n\n      var state = query.state;\n\n      var parentResult = _get(_getPrototypeOf(InfiniteQueryObserver.prototype), \"createResult\", this).call(this, query, options);\n\n      var isFetching = parentResult.isFetching,\n          isRefetching = parentResult.isRefetching,\n          isError = parentResult.isError,\n          isRefetchError = parentResult.isRefetchError;\n      var fetchDirection = (_state$fetchMeta = state.fetchMeta) === null || _state$fetchMeta === void 0 ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) === null || _state$fetchMeta$fetc === void 0 ? void 0 : _state$fetchMeta$fetc.direction;\n      var isFetchNextPageError = isError && fetchDirection === \"forward\";\n      var isFetchingNextPage = isFetching && fetchDirection === \"forward\";\n      var isFetchPreviousPageError = isError && fetchDirection === \"backward\";\n      var isFetchingPreviousPage = isFetching && fetchDirection === \"backward\";\n\n      var result = _objectSpread(_objectSpread({}, parentResult), {}, {\n        fetchNextPage: this.fetchNextPage,\n        fetchPreviousPage: this.fetchPreviousPage,\n        hasNextPage: hasNextPage(options, state.data),\n        hasPreviousPage: hasPreviousPage(options, state.data),\n        isFetchNextPageError: isFetchNextPageError,\n        isFetchingNextPage: isFetchingNextPage,\n        isFetchPreviousPageError: isFetchPreviousPageError,\n        isFetchingPreviousPage: isFetchingPreviousPage,\n        isRefetchError: isRefetchError && !isFetchNextPageError && !isFetchPreviousPageError,\n        isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n      });\n\n      return result;\n    }\n  }]);\n\n  return InfiniteQueryObserver;\n}(QueryObserver);\n\nexport { InfiniteQueryObserver };","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SACEC,WADF,EAEEC,eAFF,EAGEC,qBAHF,QAIO,4BAJP;;AAyBO,IAAMC;EAAA;;EAAA;;EA2CX,+BACEC,MADF,EAEEC,OAFF,EAUE;IAAA;;IAAA,yBACMD,MADN,EACcC,OADd;EAEF;;EAvDW;IAAA;IAAA,OAyDD,uBAAoB;MAC5B;;MACA,KAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;MACA,KAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;IACF;EA7DW;IAAA;IAAA,OA+DX,oBACEF,OADF,EASEI,aATF,EAUQ;MACN,sHAEOJ,OAFP;QAGIK,UAAUR;MAHd,IAKEO,aALF;IAOF;EAjFW;IAAA;IAAA,OAmFX,6BACEJ,OADF,EAS8C;MAC5CA,QAAQK,QAAR,GAAmBR,uBAAnB;MACA,sGAAiCG,OAAjC;IAIF;EAlGW;IAAA;IAAA,OAoGX,uBACEA,OADF,EAEuD;MACrD,OAAO,KAAKM,KAAL,iCACFN,OADE;QAELO,MAAM;UACJC,WAAW;YAAEC,WAAW;UAAb;QADP;MAFD,GAAP;IAMF;EA7GW;IAAA;IAAA,OA+GX,2BACET,OADF,EAEuD;MACrD,OAAO,KAAKM,KAAL,iCACFN,OADE;QAELO,MAAM;UACJC,WAAW;YAAEC,WAAW;UAAb;QADP;MAFD,GAAP;IAMF;EAxHW;IAAA;IAAA,OA0HD,sBACRC,KADQ,EAORV,OAPQ,EAeoC;MAAA;;MAC5C,IAAQW,KAAR,GAAkBD,KAAlB,CAAQC,KAAR;;MACA,IAAMC,uGAAkCF,KAAlC,EAAyCV,OAAzC,CAAN;;MAEA,IAAQa,UAAR,GAA8DD,YAA9D,CAAQC,UAAR;MAAA,IAAoBC,YAApB,GAA8DF,YAA9D,CAAoBE,YAApB;MAAA,IAAkCC,OAAlC,GAA8DH,YAA9D,CAAkCG,OAAlC;MAAA,IAA2CC,cAA3C,GAA8DJ,YAA9D,CAA2CI,cAA3C;MACA,IAAMC,qCAAiBN,MAAMO,SAAvB,8EAAiB,iBAAiBV,SAAlC,0DAAiB,sBAA4BC,SAAnD;MAEA,IAAMU,uBAAuBJ,WAAWE,mBAAmB,SAA3D;MACA,IAAMG,qBAAqBP,cAAcI,mBAAmB,SAA5D;MAEA,IAAMI,2BAA2BN,WAAWE,mBAAmB,UAA/D;MACA,IAAMK,yBAAyBT,cAAcI,mBAAmB,UAAhE;;MAEA,IAAMM,yCACDX,YADC;QAEJX,eAAe,KAAKA,aAFhB;QAGJE,mBAAmB,KAAKA,iBAHpB;QAIJR,aAAaA,YAAYK,OAAZ,EAAqBW,MAAMa,IAA3B,CAJT;QAKJ5B,iBAAiBA,gBAAgBI,OAAhB,EAAyBW,MAAMa,IAA/B,CALb;QAMJL,0CANI;QAOJC,sCAPI;QAQJC,kDARI;QASJC,8CATI;QAUJN,gBACEA,kBAAkB,CAACG,oBAAnB,IAA2C,CAACE,wBAX1C;QAYJP,cACEA,gBAAgB,CAACM,kBAAjB,IAAuC,CAACE;MAbtC,EAAN;;MAgBA,OAAOC,MAAP;IACF;EAvKW;;EAAA;AAAA,EAOH7B,aAPG,CAAN","names":["QueryObserver","hasNextPage","hasPreviousPage","infiniteQueryBehavior","InfiniteQueryObserver","client","options","fetchNextPage","bind","fetchPreviousPage","notifyOptions","behavior","fetch","meta","fetchMore","direction","query","state","parentResult","isFetching","isRefetching","isError","isRefetchError","fetchDirection","fetchMeta","isFetchNextPageError","isFetchingNextPage","isFetchPreviousPageError","isFetchingPreviousPage","result","data"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts"],"sourcesContent":["import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Subscribable } from './subscribable'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverBaseResult,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: Subscribable<\n    InfiniteQueryObserverListener<TData, TError>\n  >['subscribe']\n\n  // Type override\n  getCurrentResult!: ReplaceReturnType<\n    QueryObserver<\n      TQueryFnData,\n      TError,\n      TData,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >['getCurrentResult'],\n    InfiniteQueryObserverResult<TData, TError>\n  >\n\n  // Type override\n  protected fetch!: ReplaceReturnType<\n    QueryObserver<\n      TQueryFnData,\n      TError,\n      TData,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >['fetch'],\n    Promise<InfiniteQueryObserverResult<TData, TError>>\n  >\n\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const parentResult = super.createResult(query, options)\n\n    const { isFetching, isRefetching, isError, isRefetchError } = parentResult\n    const fetchDirection = state.fetchMeta?.fetchMore?.direction\n\n    const isFetchNextPageError = isError && fetchDirection === 'forward'\n    const isFetchingNextPage = isFetching && fetchDirection === 'forward'\n\n    const isFetchPreviousPageError = isError && fetchDirection === 'backward'\n    const isFetchingPreviousPage = isFetching && fetchDirection === 'backward'\n\n    const result: InfiniteQueryObserverBaseResult<TData, TError> = {\n      ...parentResult,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchNextPageError,\n      isFetchingNextPage,\n      isFetchPreviousPageError,\n      isFetchingPreviousPage,\n      isRefetchError:\n        isRefetchError && !isFetchNextPageError && !isFetchPreviousPageError,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n\n    return result as InfiniteQueryObserverResult<TData, TError>\n  }\n}\n\ntype ReplaceReturnType<\n  TFunction extends (...args: Array<any>) => unknown,\n  TReturn,\n> = (...args: Parameters<TFunction>) => TReturn\n"]},"metadata":{},"sourceType":"module"}