{"ast":null,"code":"import _objectWithoutProperties from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"state\"],\n    _excluded2 = [\"fetchStatus\"];\n\n// src/hydration.ts\nfunction defaultTransformerFn(data) {\n  return data;\n}\n\nfunction dehydrateMutation(mutation) {\n  return _objectSpread(_objectSpread({\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  }, mutation.options.scope && {\n    scope: mutation.options.scope\n  }), mutation.meta && {\n    meta: mutation.meta\n  });\n}\n\nfunction dehydrateQuery(query, serializeData) {\n  var _query$promise;\n\n  return _objectSpread(_objectSpread({\n    state: _objectSpread(_objectSpread({}, query.state), query.state.data !== void 0 && {\n      data: serializeData(query.state.data)\n    }),\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  }, query.state.status === \"pending\" && {\n    promise: (_query$promise = query.promise) === null || _query$promise === void 0 ? void 0 : _query$promise.then(serializeData).catch(function (error) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.error(\"A query that was dehydrated as pending ended up rejecting. [\".concat(query.queryHash, \"]: \").concat(error, \"; The error will be redacted in production builds\"));\n      }\n\n      return Promise.reject(new Error(\"redacted\"));\n    })\n  }), query.meta && {\n    meta: query.meta\n  });\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\n\nfunction dehydrate(client) {\n  var _ref, _options$shouldDehydr, _client$getDefaultOpt, _ref2, _options$shouldDehydr2, _client$getDefaultOpt2, _ref3, _options$serializeDat, _client$getDefaultOpt3;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var filterMutation = (_ref = (_options$shouldDehydr = options.shouldDehydrateMutation) !== null && _options$shouldDehydr !== void 0 ? _options$shouldDehydr : (_client$getDefaultOpt = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt === void 0 ? void 0 : _client$getDefaultOpt.shouldDehydrateMutation) !== null && _ref !== void 0 ? _ref : defaultShouldDehydrateMutation;\n  var mutations = client.getMutationCache().getAll().flatMap(function (mutation) {\n    return filterMutation(mutation) ? [dehydrateMutation(mutation)] : [];\n  });\n  var filterQuery = (_ref2 = (_options$shouldDehydr2 = options.shouldDehydrateQuery) !== null && _options$shouldDehydr2 !== void 0 ? _options$shouldDehydr2 : (_client$getDefaultOpt2 = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt2 === void 0 ? void 0 : _client$getDefaultOpt2.shouldDehydrateQuery) !== null && _ref2 !== void 0 ? _ref2 : defaultShouldDehydrateQuery;\n  var serializeData = (_ref3 = (_options$serializeDat = options.serializeData) !== null && _options$serializeDat !== void 0 ? _options$serializeDat : (_client$getDefaultOpt3 = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt3 === void 0 ? void 0 : _client$getDefaultOpt3.serializeData) !== null && _ref3 !== void 0 ? _ref3 : defaultTransformerFn;\n  var queries = client.getQueryCache().getAll().flatMap(function (query) {\n    return filterQuery(query) ? [dehydrateQuery(query, serializeData)] : [];\n  });\n  return {\n    mutations: mutations,\n    queries: queries\n  };\n}\n\nfunction hydrate(client, dehydratedState, options) {\n  var _ref4, _options$defaultOptio, _options$defaultOptio2, _client$getDefaultOpt4;\n\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n\n  var mutationCache = client.getMutationCache();\n  var queryCache = client.getQueryCache();\n  var deserializeData = (_ref4 = (_options$defaultOptio = options === null || options === void 0 ? void 0 : (_options$defaultOptio2 = options.defaultOptions) === null || _options$defaultOptio2 === void 0 ? void 0 : _options$defaultOptio2.deserializeData) !== null && _options$defaultOptio !== void 0 ? _options$defaultOptio : (_client$getDefaultOpt4 = client.getDefaultOptions().hydrate) === null || _client$getDefaultOpt4 === void 0 ? void 0 : _client$getDefaultOpt4.deserializeData) !== null && _ref4 !== void 0 ? _ref4 : defaultTransformerFn;\n  var mutations = dehydratedState.mutations || [];\n  var queries = dehydratedState.queries || [];\n  mutations.forEach(function (_ref5) {\n    var _client$getDefaultOpt5, _options$defaultOptio3;\n\n    var state = _ref5.state,\n        mutationOptions = _objectWithoutProperties(_ref5, _excluded);\n\n    mutationCache.build(client, _objectSpread(_objectSpread(_objectSpread({}, (_client$getDefaultOpt5 = client.getDefaultOptions().hydrate) === null || _client$getDefaultOpt5 === void 0 ? void 0 : _client$getDefaultOpt5.mutations), options === null || options === void 0 ? void 0 : (_options$defaultOptio3 = options.defaultOptions) === null || _options$defaultOptio3 === void 0 ? void 0 : _options$defaultOptio3.mutations), mutationOptions), state);\n  });\n  queries.forEach(function (_ref6) {\n    var queryKey = _ref6.queryKey,\n        state = _ref6.state,\n        queryHash = _ref6.queryHash,\n        meta = _ref6.meta,\n        promise = _ref6.promise;\n    var query = queryCache.get(queryHash);\n    var data = state.data === void 0 ? state.data : deserializeData(state.data);\n\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        var _ignored = state.fetchStatus,\n            serializedState = _objectWithoutProperties(state, _excluded2);\n\n        query.setState(_objectSpread(_objectSpread({}, serializedState), {}, {\n          data: data\n        }));\n      }\n    } else {\n      var _client$getDefaultOpt6, _options$defaultOptio4;\n\n      query = queryCache.build(client, _objectSpread(_objectSpread(_objectSpread({}, (_client$getDefaultOpt6 = client.getDefaultOptions().hydrate) === null || _client$getDefaultOpt6 === void 0 ? void 0 : _client$getDefaultOpt6.queries), options === null || options === void 0 ? void 0 : (_options$defaultOptio4 = options.defaultOptions) === null || _options$defaultOptio4 === void 0 ? void 0 : _options$defaultOptio4.queries), {}, {\n        queryKey: queryKey,\n        queryHash: queryHash,\n        meta: meta\n      }), // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      _objectSpread(_objectSpread({}, state), {}, {\n        data: data,\n        fetchStatus: \"idle\"\n      }));\n    }\n\n    if (promise) {\n      var initialPromise = Promise.resolve(promise).then(deserializeData);\n      void query.fetch(void 0, {\n        initialPromise: initialPromise\n      });\n    }\n  });\n}\n\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"mappings":"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","names":["defaultTransformerFn","data","dehydrateMutation","mutation","mutationKey","options","state","scope","meta","dehydrateQuery","query","serializeData","queryKey","queryHash","status","promise","then","catch","error","process","env","NODE_ENV","console","Promise","reject","Error","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","dehydrate","client","filterMutation","shouldDehydrateMutation","getDefaultOptions","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","deserializeData","defaultOptions","forEach","mutationOptions","build","get","dataUpdatedAt","_ignored","fetchStatus","serializedState","setState","initialPromise","resolve","fetch"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n): DehydratedQuery {\n  return {\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query) ? [dehydrateQuery(query, serializeData)] : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta, promise }) => {\n    let query = queryCache.get(queryHash)\n\n    const data =\n      state.data === undefined ? state.data : deserializeData(state.data)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...serializedState } = state\n        query.setState({\n          ...serializedState,\n          data,\n        })\n      }\n    } else {\n      // Restore query\n      query = queryCache.build(\n        client,\n        {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta,\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: 'idle',\n        },\n      )\n    }\n\n    if (promise) {\n      // Note: `Promise.resolve` required cause\n      // RSC transformed promises are not thenable\n      const initialPromise = Promise.resolve(promise).then(deserializeData)\n\n      // this doesn't actually fetch - it just creates a retryer\n      // which will re-use the passed `initialPromise`\n      void query.fetch(undefined, { initialPromise })\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}