{"ast":null,"code":"import { loadScript } from \"./chunk-F6WKUPXL.mjs\"; // src/load-navermaps-script.tsx\n\nimport { useEffect, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction loadNavermapsScript(options) {\n  const url = makeUrl(options);\n  const promise = loadScript(url).then(() => {\n    const navermaps = window.naver.maps;\n\n    if (navermaps.jsContentLoaded) {\n      return navermaps;\n    }\n\n    return new Promise(resolve => {\n      navermaps.onJSContentLoaded = () => {\n        resolve(navermaps);\n      };\n    });\n  });\n  return promise;\n}\n\nfunction makeUrl(options) {\n  const submodules = options.submodules;\n  const clientIdQuery = \"ncpClientId\" in options ? `ncpClientId=${options.ncpClientId}` : \"govClientId\" in options ? `govClientId=${options.govClientId}` : \"finClientId\" in options ? `finClientId=${options.finClientId}` : void 0;\n\n  if (!clientIdQuery) {\n    throw new Error(\"react-naver-maps: ncpClientId, govClientId or finClientId is required\");\n  }\n\n  let url = `https://openapi.map.naver.com/openapi/v3/maps.js?${clientIdQuery}`;\n\n  if (submodules) {\n    url += `&submodules=${submodules.join(\",\")}`;\n  }\n\n  return url;\n}\n\nfunction LoadNavermapsScript(_ref) {\n  let {\n    children: Children,\n    ...options\n  } = _ref;\n  const [navermaps, setNavermaps] = useState();\n  useEffect(() => {\n    loadNavermapsScript(options).then(maps => {\n      setNavermaps(maps);\n    });\n  }, []);\n  return navermaps && Children ? /* @__PURE__ */jsx(Children, {}) : null;\n}\n\nexport { loadNavermapsScript, LoadNavermapsScript };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAqE8B;;AA/DvB,SAASC,mBAAT,CAA6BC,OAA7B,EAAqD;EAC1D,MAAMC,MAAMC,QAAQF,OAAR,CAAZ;EAIA,MAAMG,UAAUC,WAAWH,GAAX,EAAgBI,IAAhB,CAAqB,MAAM;IACzC,MAAMC,YAAYC,OAAOC,KAAP,CAAaC,IAA/B;;IAEA,IAAIH,UAAUI,eAAd,EAA+B;MAC7B,OAAOJ,SAAP;IACF;;IAEA,OAAO,IAAIK,OAAJ,CAA+BC,WAAW;MAC/CN,UAAUO,iBAAV,GAA8B,MAAM;QAClCD,QAAQN,SAAR;MACF,CAFA;IAGD,CAJM,CAAP;EAKD,CAZe,CAAhB;EAcA,OAAOH,OAAP;AACF;;AAEA,SAASD,OAAT,CAAiBF,OAAjB,EAAyC;EACvC,MAAMc,aAAad,QAAQc,UAA3B;EAEA,MAAMC,gBAAgB,iBAAiBf,OAAjB,GAClB,eAAeA,QAAQgB,aADL,GAElB,iBAAiBhB,OAAjB,GACE,eAAeA,QAAQiB,aADzB,GAEE,iBAAiBjB,OAAjB,GACE,eAAeA,QAAQkB,aADzB,GAEE,MANR;;EAQA,IAAI,CAACH,aAAL,EAAoB;IAClB,MAAM,IAAII,KAAJ,CAAU,uEAAV,CAAN;EACF;;EAEA,IAAIlB,MAAM,oDAAoDc,eAA9D;;EAEA,IAAID,UAAJ,EAAgB;IACdb,OAAO,eAAea,WAAWM,IAAX,CAAgB,GAAhB,CAAmB,EAAzC;EACF;;EAEA,OAAOnB,GAAP;AACF;;AAMO,SAASoB,mBAAT,OAGG;EAAA,IAH0B;IAClCC,UAAUC,QADwB;IACxB,GACPvB;EAF+B,CAG1B;EACR,MAAM,CAACM,SAAD,EAAYkB,YAAZ,IAA4B1B,UAAlC;EAEAD,UAAU,MAAM;IACdE,oBAAoBC,OAApB,EAA6BK,IAA7B,CAAmCI,IAAD,IAAU;MAC1Ce,aAAaf,IAAb;IACD,CAFD;EAGF,CAJA,EAIG,EAJH;EAMA,OACGH,aAAaiB,QAAb,GAAyB,mBAACA,QAAD,EAAC,EAAD,CAAzB,GAAwC,IAD3C;AAGF","names":["useEffect","useState","loadNavermapsScript","options","url","makeUrl","promise","loadScript","then","navermaps","window","naver","maps","jsContentLoaded","Promise","resolve","onJSContentLoaded","submodules","clientIdQuery","ncpClientId","govClientId","finClientId","Error","join","LoadNavermapsScript","children","Children","setNavermaps"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/load-navermaps-script.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport type { ReactElement } from 'react';\n\nimport type { ClientOptions } from './types/client';\nimport { loadScript } from './utils/load-script';\n\nexport function loadNavermapsScript(options: ClientOptions) {\n  const url = makeUrl(options);\n\n  // TODO: Caching Promise\n\n  const promise = loadScript(url).then(() => {\n    const navermaps = window.naver.maps;\n\n    if (navermaps.jsContentLoaded) {\n      return navermaps;\n    }\n\n    return new Promise<typeof naver.maps>(resolve => {\n      navermaps.onJSContentLoaded = () => {\n        resolve(navermaps);\n      };\n    });\n  });\n\n  return promise;\n}\n\nfunction makeUrl(options: ClientOptions) {\n  const submodules = options.submodules;\n\n  const clientIdQuery = 'ncpClientId' in options\n    ? `ncpClientId=${options.ncpClientId}`\n    : 'govClientId' in options\n      ? `govClientId=${options.govClientId}`\n      : 'finClientId' in options\n        ? `finClientId=${options.finClientId}`\n        : undefined;\n\n  if (!clientIdQuery) {\n    throw new Error('react-naver-maps: ncpClientId, govClientId or finClientId is required');\n  }\n\n  let url = `https://openapi.map.naver.com/openapi/v3/maps.js?${clientIdQuery}`;\n\n  if (submodules) {\n    url += `&submodules=${submodules.join(',')}`;\n  }\n\n  return url;\n}\n\ntype Props = ClientOptions & {\n  children: () => ReactElement;\n};\n\nexport function LoadNavermapsScript({\n  children: Children,\n  ...options\n}: Props) {\n  const [navermaps, setNavermaps] = useState<typeof naver.maps>();\n\n  useEffect(() => {\n    loadNavermapsScript(options).then((maps) => {\n      setNavermaps(maps);\n    });\n  }, []);\n\n  return (\n    (navermaps && Children) ? <Children /> : null\n  );\n}\n"]},"metadata":{},"sourceType":"module"}