{"ast":null,"code":"import { omitUndefined } from \"./chunk-RVDAKL7Q.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\"; // src/overlays/polyline.tsx\n\nimport pick from \"lodash.pick\";\nimport { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar kvoKeys = [\"path\", \"strokeWeight\", \"strokeOpacity\", \"strokeColor\", \"strokeStyle\", \"strokeLineCap\", \"strokeLineJoin\", \"clickable\", \"visible\", \"zIndex\", \"startIcon\", \"startIconSize\", \"endIcon\", \"endIconSize\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar Polyline = forwardRef(function Polyline2(props, ref) {\n  const options = pick(props, [...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [polyline] = useState(() => new navermaps.Polyline(options));\n  useImperativeHandle(ref, () => polyline);\n  useEffect(() => {\n    polyline.setOptions(omitUndefined(options));\n  }, kvoKeys.map(key => options[key]));\n  return /* @__PURE__ */jsx(Overlay, {\n    element: polyline,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { Polyline };","map":{"version":3,"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,mBAAhC,EAAqDC,QAArD,QAAqE,OAArE;AAuFM;AA/EN,IAAMC,UAAU,CACd,MADc,EAEd,cAFc,EAGd,eAHc,EAId,aAJc,EAKd,aALc,EAMd,eANc,EAOd,gBAPc,EAQd,WARc,EASd,SATc,EAUd,QAVc,EAWd,WAXc,EAYd,eAZc,EAad,SAbc,EAcd,aAdc,CAAhB;AAgBA,IAAMC,YAAYD,QAAQE,GAAR,CAAYC,OAAO,GAAGA,aAAtB,CAAlB;AACA,IAAMC,WAAW,CACf,WADe,EAEf,SAFe,EAGf,OAHe,EAIf,UAJe,EAKf,YALe,EAMf,WANe,EAOf,UAPe,EAQf,WARe,CAAjB;AAUA,IAAMC,SAAS,CAAC,GAAGD,QAAJ,EAAc,GAAGH,SAAjB,CAAf;AAuCO,IAAMK,WAAWV,WAAuC,SAASU,SAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8B;EAC3F,MAAMC,UAAUd,KAAKY,KAAL,EAAY,CAAC,GAAGP,OAAJ,CAAZ,CAAhB;EACA,MAAMU,YAAYC,cAAlB;EACA,MAAM,CAACC,QAAD,IAAab,SAAS,MAAM,IAAIW,UAAUJ,QAAd,CAAuBG,OAAvB,CAAf,CAAnB;EAEAX,oBAAsFU,GAAtF,EAA2F,MAAMI,QAAjG;EAEAf,UAAU,MAAM;IACde,SAASC,UAAT,CAAoBC,cAAcL,OAAd,CAApB;EACF,CAFA,EAEGT,QAAQE,GAAR,CAAYC,OAAOM,QAAQN,GAAR,CAAnB,CAFH;EAIA,OACE,mBAACY,OAAD,EAAC;IAAQC,SAASJ,QAAjB;IACCK,6BAACC,YAAD,EAAC;MAAab,MAAb;MAA6Bc,WAAWZ;IAAxC,CAAD;EADD,CAAD,CADF;AAKD,CAhBuB,CAAjB","names":["pick","forwardRef","useEffect","useImperativeHandle","useState","kvoKeys","kvoEvents","map","key","uiEvents","events","Polyline","props","ref","options","navermaps","useNavermaps","polyline","setOptions","omitUndefined","Overlay","element","children","HandleEvents","listeners"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/overlays/polyline.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\nimport { omitUndefined } from '../utils/omit-undefined';\n\nconst kvoKeys = [\n  'path',\n  'strokeWeight',\n  'strokeOpacity',\n  'strokeColor',\n  'strokeStyle',\n  'strokeLineCap',\n  'strokeLineJoin',\n  'clickable',\n  'visible',\n  'zIndex',\n  'startIcon',\n  'startIconSize',\n  'endIcon',\n  'endIconSize',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype PolylineOptions = {\n  /**\n   * @type naver.maps.ArrayOfCoords | naver.maps.KVOArrayOfCoords | naver.maps.ArrayOfCoordsLiteral\n   */\n  path: naver.maps.ArrayOfCoords | naver.maps.KVOArrayOfCoords | naver.maps.ArrayOfCoordsLiteral;\n  strokeWeight?: number;\n  strokeOpacity?: number;\n  strokeColor?: string;\n  strokeStyle?: naver.maps.strokeStyleType;\n  strokeLineCap?: naver.maps.strokeLineCapType;\n  strokeLineJoin?: naver.maps.strokeLineJoinType;\n  clickable?: boolean;\n  visible?: boolean;\n  zIndex?: number;\n  startIcon?: naver.maps.PointingIcon;\n  startIconSize?: number;\n  endIcon?: naver.maps.PointingIcon;\n  endIconSize?: number;\n};\n\nexport type Props = PolylineOptions & {\n  onPathChanged?: (value: naver.maps.ArrayOfCoords) => void;\n  onStrokeWeightChanged?: (value: number) => void;\n  onStrokeOpacityChanged?: (value: number) => void;\n  onStrokeColorChanged?: (value: string) => void;\n  onStrokeStyleChanged?: (value: naver.maps.strokeStyleType) => void;\n  onStrokeLineCapChanged?: (value: naver.maps.strokeLineCapType) => void;\n  onStrokeLineJoinChanged?: (value: naver.maps.strokeLineJoinType) => void;\n  onClickableChanged?: (value: boolean) => void;\n  onVisibleChanged?: (value: boolean) => void;\n  onZIndexChanged?: (value: number) => void;\n  onStartIconChanged?: (value: naver.maps.PointingIcon) => void;\n  onStartIconSizeChanged?: (number: string) => void;\n  onEndIconChanged?: (value: naver.maps.PointingIcon) => void;\n  onEndIconSizeChanged?: (number: string) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const Polyline = forwardRef<naver.maps.Polyline, Props>(function Polyline(props, ref) {\n  const options = pick(props, [...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [polyline] = useState(() => new navermaps.Polyline(options));\n\n  useImperativeHandle<naver.maps.Polyline | undefined, naver.maps.Polyline | undefined>(ref, () => polyline);\n\n  useEffect(() => {\n    polyline.setOptions(omitUndefined(options) as PolylineOptions); // TODO: FIX DefinilyTyped. setOptions의 assign type 은 Partial<Options> 이어야 함\n  }, kvoKeys.map(key => options[key]));\n\n  return (\n    <Overlay element={polyline}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}