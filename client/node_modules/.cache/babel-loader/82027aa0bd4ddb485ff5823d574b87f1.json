{"ast":null,"code":"import _objectSpread from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateMethodGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldSet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n\nvar _client, _currentResult, _currentMutation, _mutateOptions, _updateResult, _notify;\n\n// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { hashKey, shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = (_client = /*#__PURE__*/new WeakMap(), _currentResult = /*#__PURE__*/new WeakMap(), _currentMutation = /*#__PURE__*/new WeakMap(), _mutateOptions = /*#__PURE__*/new WeakMap(), _updateResult = /*#__PURE__*/new WeakSet(), _notify = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Subscribable) {\n  _inherits(MutationObserver, _Subscribable);\n\n  var _super = _createSuper(MutationObserver);\n\n  function MutationObserver(client, options) {\n    var _this;\n\n    _classCallCheck(this, MutationObserver);\n\n    _this = _super.call(this);\n\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _notify);\n\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateResult);\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _client, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentResult, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentMutation, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _mutateOptions, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _client, client);\n\n    _this.setOptions(options);\n\n    _this.bindMethods();\n\n    _classPrivateMethodGet(_assertThisInitialized(_this), _updateResult, _updateResult2).call(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(MutationObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.mutate = this.mutate.bind(this);\n      this.reset = this.reset.bind(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var _classPrivateFieldGet2;\n\n      var prevOptions = this.options;\n      this.options = _classPrivateFieldGet(this, _client).defaultMutationOptions(options);\n\n      if (!shallowEqualObjects(this.options, prevOptions)) {\n        _classPrivateFieldGet(this, _client).getMutationCache().notify({\n          type: \"observerOptionsUpdated\",\n          mutation: _classPrivateFieldGet(this, _currentMutation),\n          observer: this\n        });\n      }\n\n      if (prevOptions !== null && prevOptions !== void 0 && prevOptions.mutationKey && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {\n        this.reset();\n      } else if (((_classPrivateFieldGet2 = _classPrivateFieldGet(this, _currentMutation)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.state.status) === \"pending\") {\n        _classPrivateFieldGet(this, _currentMutation).setOptions(this.options);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        var _classPrivateFieldGet3;\n\n        (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _currentMutation)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.removeObserver(this);\n      }\n    }\n  }, {\n    key: \"onMutationUpdate\",\n    value: function onMutationUpdate(action) {\n      _classPrivateMethodGet(this, _updateResult, _updateResult2).call(this);\n\n      _classPrivateMethodGet(this, _notify, _notify2).call(this, action);\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return _classPrivateFieldGet(this, _currentResult);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _classPrivateFieldGet4;\n\n      (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _currentMutation)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.removeObserver(this);\n\n      _classPrivateFieldSet(this, _currentMutation, void 0);\n\n      _classPrivateMethodGet(this, _updateResult, _updateResult2).call(this);\n\n      _classPrivateMethodGet(this, _notify, _notify2).call(this);\n    }\n  }, {\n    key: \"mutate\",\n    value: function mutate(variables, options) {\n      var _classPrivateFieldGet5;\n\n      _classPrivateFieldSet(this, _mutateOptions, options);\n\n      (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _currentMutation)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.removeObserver(this);\n\n      _classPrivateFieldSet(this, _currentMutation, _classPrivateFieldGet(this, _client).getMutationCache().build(_classPrivateFieldGet(this, _client), this.options));\n\n      _classPrivateFieldGet(this, _currentMutation).addObserver(this);\n\n      return _classPrivateFieldGet(this, _currentMutation).execute(variables);\n    }\n  }]);\n\n  return MutationObserver;\n}(Subscribable));\n\nfunction _updateResult2() {\n  var _classPrivateFieldGet6, _classPrivateFieldGet7;\n\n  var state = (_classPrivateFieldGet6 = (_classPrivateFieldGet7 = _classPrivateFieldGet(this, _currentMutation)) === null || _classPrivateFieldGet7 === void 0 ? void 0 : _classPrivateFieldGet7.state) !== null && _classPrivateFieldGet6 !== void 0 ? _classPrivateFieldGet6 : getDefaultState();\n\n  _classPrivateFieldSet(this, _currentResult, _objectSpread(_objectSpread({}, state), {}, {\n    isPending: state.status === \"pending\",\n    isSuccess: state.status === \"success\",\n    isError: state.status === \"error\",\n    isIdle: state.status === \"idle\",\n    mutate: this.mutate,\n    reset: this.reset\n  }));\n}\n\nfunction _notify2(action) {\n  var _this2 = this;\n\n  notifyManager.batch(function () {\n    if (_classPrivateFieldGet(_this2, _mutateOptions) && _this2.hasListeners()) {\n      var variables = _classPrivateFieldGet(_this2, _currentResult).variables;\n\n      var context = _classPrivateFieldGet(_this2, _currentResult).context;\n\n      if ((action === null || action === void 0 ? void 0 : action.type) === \"success\") {\n        var _classPrivateFieldGet8, _classPrivateFieldGet9, _classPrivateFieldGet10, _classPrivateFieldGet11;\n\n        (_classPrivateFieldGet8 = (_classPrivateFieldGet9 = _classPrivateFieldGet(_this2, _mutateOptions)).onSuccess) === null || _classPrivateFieldGet8 === void 0 ? void 0 : _classPrivateFieldGet8.call(_classPrivateFieldGet9, action.data, variables, context);\n        (_classPrivateFieldGet10 = (_classPrivateFieldGet11 = _classPrivateFieldGet(_this2, _mutateOptions)).onSettled) === null || _classPrivateFieldGet10 === void 0 ? void 0 : _classPrivateFieldGet10.call(_classPrivateFieldGet11, action.data, null, variables, context);\n      } else if ((action === null || action === void 0 ? void 0 : action.type) === \"error\") {\n        var _classPrivateFieldGet12, _classPrivateFieldGet13, _classPrivateFieldGet14, _classPrivateFieldGet15;\n\n        (_classPrivateFieldGet12 = (_classPrivateFieldGet13 = _classPrivateFieldGet(_this2, _mutateOptions)).onError) === null || _classPrivateFieldGet12 === void 0 ? void 0 : _classPrivateFieldGet12.call(_classPrivateFieldGet13, action.error, variables, context);\n        (_classPrivateFieldGet14 = (_classPrivateFieldGet15 = _classPrivateFieldGet(_this2, _mutateOptions)).onSettled) === null || _classPrivateFieldGet14 === void 0 ? void 0 : _classPrivateFieldGet14.call(_classPrivateFieldGet15, void 0, action.error, variables, context);\n      }\n    }\n\n    _this2.listeners.forEach(function (listener) {\n      listener(_classPrivateFieldGet(_this2, _currentResult));\n    });\n  });\n}\n\nexport { MutationObserver };","map":{"version":3,"mappings":"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","names":["getDefaultState","notifyManager","Subscribable","hashKey","shallowEqualObjects","MutationObserver","client","options","setOptions","bindMethods","mutate","bind","reset","prevOptions","defaultMutationOptions","getMutationCache","notify","type","mutation","observer","mutationKey","state","status","hasListeners","removeObserver","action","variables","build","addObserver","execute","isPending","isSuccess","isError","isIdle","batch","context","onSuccess","data","onSettled","onError","error","listeners","forEach","listener"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/mutationObserver.ts"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}