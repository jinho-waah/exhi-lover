{"ast":null,"code":"import { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\"; // src/overlays/ground-overlay.tsx\n\nimport pick from \"lodash.pick\";\nimport { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar kvoKeys = [\"clickable\", \"opacity\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar GroundOverlay = forwardRef(function GroundOverlay2(props, ref) {\n  const options = pick(props, kvoKeys);\n  const {\n    url,\n    bounds\n  } = props;\n  const navermaps = useNavermaps();\n  const [groundOverlay, setGroundOverlay] = useState(() => new navermaps.GroundOverlay(url, bounds, options));\n  useImperativeHandle(ref, () => groundOverlay, [groundOverlay]);\n  useEffect(() => {\n    if (groundOverlay.getUrl() !== url || groundOverlay.getBounds().equals(bounds)) {\n      setGroundOverlay(new naver.maps.GroundOverlay(url, bounds, options));\n    }\n  }, [url, bounds]);\n  useEffect(() => {\n    kvoKeys.forEach(key => {\n      if (options[key] && groundOverlay.get(key) !== options[key]) {\n        groundOverlay.set(key, options[key]);\n      }\n    });\n  }, kvoKeys.map(key => options[key]));\n  return /* @__PURE__ */jsx(Overlay, {\n    element: groundOverlay,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { GroundOverlay };","map":{"version":3,"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,mBAAhC,EAAqDC,QAArD,QAAqE,OAArE;AAgEM;AAzDN,IAAMC,UAAU,CACd,WADc,EAEd,SAFc,CAAhB;AAIA,IAAMC,YAAYD,QAAQE,GAAR,CAAYC,OAAO,GAAGA,aAAtB,CAAlB;AACA,IAAMC,WAAW,CACf,WADe,EAEf,SAFe,EAGf,OAHe,EAIf,UAJe,EAKf,YALe,EAMf,WANe,EAOf,UAPe,EAQf,WARe,CAAjB;AAUA,IAAMC,SAAS,CAAC,GAAGD,QAAJ,EAAc,GAAGH,SAAjB,CAAf;AAkBO,IAAMK,gBAAgBV,WAA4C,SAASU,cAAT,CAAuBC,KAAvB,EAA8BC,GAA9B,EAAmC;EAC1G,MAAMC,UAAUd,KAAKY,KAAL,EAAYP,OAAZ,CAAhB;EACA,MAAM;IAAEU,GAAF;IAAOC;EAAP,IAAkBJ,KAAxB;EACA,MAAMK,YAAYC,cAAlB;EACA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoChB,SAAS,MAAM,IAAIa,UAAUN,aAAd,CAA4BI,GAA5B,EAAiCC,MAAjC,EAAyCF,OAAzC,CAAf,CAA1C;EAEAX,oBAAgGU,GAAhG,EAAqG,MAAMM,aAA3G,EAA0H,CAACA,aAAD,CAA1H;EAEAjB,UAAU,MAAM;IACd,IAAIiB,cAAcE,MAAd,OAA2BN,GAA3B,IAAkCI,cAAcG,SAAd,GAA0BC,MAA1B,CAAiCP,MAAjC,CAAtC,EAAqG;MACnGI,iBAAiB,IAAII,MAAMC,IAAN,CAAWd,aAAf,CAA6BI,GAA7B,EAAkCC,MAAlC,EAA0CF,OAA1C,CAAjB;IACF;EACF,CAJA,EAIG,CAACC,GAAD,EAAMC,MAAN,CAJH;EAMAd,UAAU,MAAM;IACdG,QAAQqB,OAAR,CAAgBlB,OAAO;MACrB,IAAIM,QAAQN,GAAR,KAAgBW,cAAcQ,GAAd,CAAkBnB,GAAlB,MAA2BM,QAAQN,GAAR,CAA/C,EAA6D;QAC3DW,cAAcS,GAAd,CAAkBpB,GAAlB,EAAuBM,QAAQN,GAAR,CAAvB;MACF;IACD,CAJD;EAKF,CANA,EAMGH,QAAQE,GAAR,CAAYC,OAAOM,QAAQN,GAAR,CAAnB,CANH;EAQA,OACE,mBAACqB,OAAD,EAAC;IAAQC,SAASX,aAAjB;IACCY,6BAACC,YAAD,EAAC;MAAatB,MAAb;MAA6BuB,WAAWrB;IAAxC,CAAD;EADD,CAAD,CADF;AAKD,CA3B4B,CAAtB","names":["pick","forwardRef","useEffect","useImperativeHandle","useState","kvoKeys","kvoEvents","map","key","uiEvents","events","GroundOverlay","props","ref","options","url","bounds","navermaps","useNavermaps","groundOverlay","setGroundOverlay","getUrl","getBounds","equals","naver","maps","forEach","get","set","Overlay","element","children","HandleEvents","listeners"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/overlays/ground-overlay.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\n\nconst kvoKeys = [\n  'clickable',\n  'opacity',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype GroundOverlayOptions = {\n  clickable?: boolean;\n  opacity?: number;\n};\n\nexport type Props = GroundOverlayOptions & {\n  url: string;\n  /**\n   * bounds\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral\n   */\n  bounds: naver.maps.Bounds | naver.maps.BoundsLiteral;\n  onOpacityChanged?: (value: number) => void;\n  onClickableChanged?: (event: boolean) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const GroundOverlay = forwardRef<naver.maps.GroundOverlay, Props>(function GroundOverlay(props, ref) {\n  const options = pick(props, kvoKeys);\n  const { url, bounds } = props;\n  const navermaps = useNavermaps();\n  const [groundOverlay, setGroundOverlay] = useState(() => new navermaps.GroundOverlay(url, bounds, options));\n\n  useImperativeHandle<naver.maps.GroundOverlay | undefined, naver.maps.GroundOverlay | undefined>(ref, () => groundOverlay, [groundOverlay]);\n\n  useEffect(() => {\n    if (groundOverlay.getUrl() !== url || groundOverlay.getBounds().equals(bounds as naver.maps.Bounds)) {\n      setGroundOverlay(new naver.maps.GroundOverlay(url, bounds, options));\n    }\n  }, [url, bounds]);\n\n  useEffect(() => {\n    kvoKeys.forEach(key => {\n      if (options[key] && groundOverlay.get(key) !== options[key]) {\n        groundOverlay.set(key, options[key]);\n      }\n    });\n  }, kvoKeys.map(key => options[key]));\n\n  return (\n    <Overlay element={groundOverlay}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}