import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import * as React from 'react';
import useEventCallback from '@mui/utils/useEventCallback';
import { unstable_useDateField as useDateField } from '@mui/x-date-pickers/DateField';
import { useLocalizationContext, useValidation } from '@mui/x-date-pickers/internals';
import useControlled from '@mui/utils/useControlled';
import { useDefaultizedDateRangeFieldProps } from '../../../SingleInputDateRangeField/useSingleInputDateRangeField';
import { validateDateRange } from '../validation/useDateRangeValidation';
import { rangeValueManager } from '../../utils/valueManagers';
export var useMultiInputDateRangeField = function useMultiInputDateRangeField(_ref) {
  var _firstDefaultValue$cu;
  var inSharedProps = _ref.sharedProps,
    inStartTextFieldProps = _ref.startTextFieldProps,
    inEndTextFieldProps = _ref.endTextFieldProps,
    startInputRef = _ref.startInputRef,
    endInputRef = _ref.endInputRef;
  var sharedProps = useDefaultizedDateRangeFieldProps(inSharedProps);
  var adapter = useLocalizationContext();
  var valueProp = sharedProps.value,
    defaultValue = sharedProps.defaultValue,
    format = sharedProps.format,
    onChange = sharedProps.onChange,
    disabled = sharedProps.disabled,
    readOnly = sharedProps.readOnly;
  var firstDefaultValue = React.useRef(defaultValue);
  var _useControlled = useControlled({
      name: 'useMultiInputDateRangeField',
      state: 'value',
      controlled: valueProp,
      default: (_firstDefaultValue$cu = firstDefaultValue.current) != null ? _firstDefaultValue$cu : rangeValueManager.emptyValue
    }),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    value = _useControlled2[0],
    setValue = _useControlled2[1];

  // TODO: Maybe export utility from `useField` instead of copy/pasting the logic
  var buildChangeHandler = function buildChangeHandler(index) {
    return function (newDate, rawContext) {
      var newDateRange = index === 0 ? [newDate, value[1]] : [value[0], newDate];
      setValue(newDateRange);
      var context = _extends({}, rawContext, {
        validationError: validateDateRange({
          adapter: adapter,
          value: newDateRange,
          props: _extends({}, sharedProps, {
            value: newDateRange
          })
        })
      });
      onChange == null ? void 0 : onChange(newDateRange, context);
    };
  };
  var handleStartDateChange = useEventCallback(buildChangeHandler(0));
  var handleEndDateChange = useEventCallback(buildChangeHandler(1));
  var validationError = useValidation(_extends({}, sharedProps, {
    value: value
  }), validateDateRange, rangeValueManager.isSameError, rangeValueManager.defaultErrorState);
  var startInputProps = _extends({
    error: !!validationError[0]
  }, inStartTextFieldProps, {
    disabled: disabled,
    readOnly: readOnly,
    format: format,
    value: valueProp === undefined ? undefined : valueProp[0],
    defaultValue: defaultValue === undefined ? undefined : defaultValue[0],
    onChange: handleStartDateChange
  });
  var endInputProps = _extends({
    error: !!validationError[1]
  }, inEndTextFieldProps, {
    format: format,
    disabled: disabled,
    readOnly: readOnly,
    value: valueProp === undefined ? undefined : valueProp[1],
    defaultValue: defaultValue === undefined ? undefined : defaultValue[1],
    onChange: handleEndDateChange
  });
  var startDateResponse = useDateField({
    props: startInputProps,
    inputRef: startInputRef
  });
  var endDateResponse = useDateField({
    props: endInputProps,
    inputRef: endInputRef
  });
  return {
    startDate: startDateResponse,
    endDate: endDateResponse
  };
};