{"ast":null,"code":"// src/hydration.ts\nfunction defaultTransformerFn(data) {\n  return data;\n}\n\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && {\n      scope: mutation.options.scope\n    }),\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\n\nfunction dehydrateQuery(query, serializeData) {\n  return {\n    state: { ...query.state,\n      ...(query.state.data !== void 0 && {\n        data: serializeData(query.state.data)\n      })\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === \"pending\" && {\n      promise: query.promise?.then(serializeData).catch(error => {\n        if (process.env.NODE_ENV !== \"production\") {\n          console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n        }\n\n        return Promise.reject(new Error(\"redacted\"));\n      })\n    }),\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\n\nfunction dehydrate(client) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n  const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\n\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(_ref => {\n    let {\n      state,\n      ...mutationOptions\n    } = _ref;\n    mutationCache.build(client, { ...client.getDefaultOptions().hydrate?.mutations,\n      ...options?.defaultOptions?.mutations,\n      ...mutationOptions\n    }, state);\n  });\n  queries.forEach(_ref2 => {\n    let {\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise\n    } = _ref2;\n    let query = queryCache.get(queryHash);\n    const data = state.data === void 0 ? state.data : deserializeData(state.data);\n\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const {\n          fetchStatus: _ignored,\n          ...serializedState\n        } = state;\n        query.setState({ ...serializedState,\n          data\n        });\n      }\n    } else {\n      query = queryCache.build(client, { ...client.getDefaultOptions().hydrate?.queries,\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta\n      }, // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      { ...state,\n        data,\n        fetchStatus: \"idle\"\n      });\n    }\n\n    if (promise) {\n      const initialPromise = Promise.resolve(promise).then(deserializeData);\n      void query.fetch(void 0, {\n        initialPromise\n      });\n    }\n  });\n}\n\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"mappings":"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","names":["defaultTransformerFn","data","dehydrateMutation","mutation","mutationKey","options","state","scope","meta","dehydrateQuery","query","serializeData","queryKey","queryHash","status","promise","then","catch","error","process","env","NODE_ENV","console","Promise","reject","Error","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","dehydrate","client","filterMutation","shouldDehydrateMutation","getDefaultOptions","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","deserializeData","defaultOptions","forEach","mutationOptions","build","get","dataUpdatedAt","fetchStatus","_ignored","serializedState","setState","initialPromise","resolve","fetch"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n): DehydratedQuery {\n  return {\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query) ? [dehydrateQuery(query, serializeData)] : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta, promise }) => {\n    let query = queryCache.get(queryHash)\n\n    const data =\n      state.data === undefined ? state.data : deserializeData(state.data)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...serializedState } = state\n        query.setState({\n          ...serializedState,\n          data,\n        })\n      }\n    } else {\n      // Restore query\n      query = queryCache.build(\n        client,\n        {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta,\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: 'idle',\n        },\n      )\n    }\n\n    if (promise) {\n      // Note: `Promise.resolve` required cause\n      // RSC transformed promises are not thenable\n      const initialPromise = Promise.resolve(promise).then(deserializeData)\n\n      // this doesn't actually fetch - it just creates a retryer\n      // which will re-use the passed `initialPromise`\n      void query.fetch(undefined, { initialPromise })\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}