{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n\nvar _client, _result, _queries, _observers, _combinedResult, _lastCombine, _lastResult, _combineResult, _findMatchingObservers, _onUpdate, _notify;\n\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\n\nfunction difference(array1, array2) {\n  return array1.filter(function (x) {\n    return !array2.includes(x);\n  });\n}\n\nfunction replaceAt(array, index, value) {\n  var copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\n\nvar QueriesObserver = (_client = /*#__PURE__*/new WeakMap(), _result = /*#__PURE__*/new WeakMap(), _queries = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _combinedResult = /*#__PURE__*/new WeakMap(), _lastCombine = /*#__PURE__*/new WeakMap(), _lastResult = /*#__PURE__*/new WeakMap(), _combineResult = /*#__PURE__*/new WeakSet(), _findMatchingObservers = /*#__PURE__*/new WeakSet(), _onUpdate = /*#__PURE__*/new WeakSet(), _notify = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueriesObserver, _Subscribable);\n\n  var _super = _createSuper(QueriesObserver);\n\n  function QueriesObserver(client, _queries2, _options) {\n    var _this;\n\n    _classCallCheck(this, QueriesObserver);\n\n    _this = _super.call(this);\n\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _notify);\n\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _onUpdate);\n\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _findMatchingObservers);\n\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _combineResult);\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _client, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _result, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _queries, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _observers, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _combinedResult, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _lastCombine, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _lastResult, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _client, client);\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _queries, []);\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _observers, []);\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _result, []);\n\n    _this.setQueries(_queries2);\n\n    return _this;\n  }\n\n  _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n\n      if (this.listeners.size === 1) {\n        _classPrivateFieldGet(this, _observers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _classPrivateMethodGet(_this2, _onUpdate, _onUpdate2).call(_this2, observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.size) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = /* @__PURE__ */new Set();\n\n      _classPrivateFieldGet(this, _observers).forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, _options, notifyOptions) {\n      var _this3 = this;\n\n      _classPrivateFieldSet(this, _queries, queries);\n\n      notifyManager.batch(function () {\n        var prevObservers = _classPrivateFieldGet(_this3, _observers);\n\n        var newObserverMatches = _classPrivateMethodGet(_this3, _findMatchingObservers, _findMatchingObservers2).call(_this3, _classPrivateFieldGet(_this3, _queries));\n\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n\n        _classPrivateFieldSet(_this3, _observers, newObservers);\n\n        _classPrivateFieldSet(_this3, _result, newResult);\n\n        if (!_this3.hasListeners()) {\n          return;\n        }\n\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _classPrivateMethodGet(_this3, _onUpdate, _onUpdate2).call(_this3, observer, result);\n          });\n        });\n\n        _classPrivateMethodGet(_this3, _notify, _notify2).call(_this3);\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return _classPrivateFieldGet(this, _result);\n    }\n  }, {\n    key: \"getQueries\",\n    value: function getQueries() {\n      return _classPrivateFieldGet(this, _observers).map(function (observer) {\n        return observer.getCurrentQuery();\n      });\n    }\n  }, {\n    key: \"getObservers\",\n    value: function getObservers() {\n      return _classPrivateFieldGet(this, _observers);\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries, combine) {\n      var _this4 = this;\n\n      var matches = _classPrivateMethodGet(this, _findMatchingObservers, _findMatchingObservers2).call(this, queries);\n\n      var result = matches.map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n      return [result, function (r) {\n        return _classPrivateMethodGet(_this4, _combineResult, _combineResult2).call(_this4, r !== null && r !== void 0 ? r : result, combine);\n      }, function () {\n        return matches.map(function (match, index) {\n          var observerResult = result[index];\n          return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, function (accessedProp) {\n            matches.forEach(function (m) {\n              m.observer.trackProp(accessedProp);\n            });\n          }) : observerResult;\n        });\n      }];\n    }\n  }]);\n\n  return QueriesObserver;\n}(Subscribable));\n\nfunction _combineResult2(input, combine) {\n  if (combine) {\n    if (!_classPrivateFieldGet(this, _combinedResult) || _classPrivateFieldGet(this, _result) !== _classPrivateFieldGet(this, _lastResult) || combine !== _classPrivateFieldGet(this, _lastCombine)) {\n      _classPrivateFieldSet(this, _lastCombine, combine);\n\n      _classPrivateFieldSet(this, _lastResult, _classPrivateFieldGet(this, _result));\n\n      _classPrivateFieldSet(this, _combinedResult, replaceEqualDeep(_classPrivateFieldGet(this, _combinedResult), combine(input)));\n    }\n\n    return _classPrivateFieldGet(this, _combinedResult);\n  }\n\n  return input;\n}\n\nfunction _findMatchingObservers2(queries) {\n  var _this5 = this;\n\n  var prevObservers = _classPrivateFieldGet(this, _observers);\n\n  var prevObserversMap = new Map(prevObservers.map(function (observer) {\n    return [observer.options.queryHash, observer];\n  }));\n  var defaultedQueryOptions = queries.map(function (options) {\n    return _classPrivateFieldGet(_this5, _client).defaultQueryOptions(options);\n  });\n  var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n    var match = prevObserversMap.get(defaultedOptions.queryHash);\n\n    if (match != null) {\n      return [{\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      }];\n    }\n\n    return [];\n  });\n  var matchedQueryHashes = new Set(matchingObservers.map(function (match) {\n    return match.defaultedQueryOptions.queryHash;\n  }));\n  var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n    return !matchedQueryHashes.has(defaultedOptions.queryHash);\n  });\n\n  var getObserver = function getObserver(options) {\n    var defaultedOptions = _classPrivateFieldGet(_this5, _client).defaultQueryOptions(options);\n\n    var currentObserver = _classPrivateFieldGet(_this5, _observers).find(function (o) {\n      return o.options.queryHash === defaultedOptions.queryHash;\n    });\n\n    return currentObserver !== null && currentObserver !== void 0 ? currentObserver : new QueryObserver(_classPrivateFieldGet(_this5, _client), defaultedOptions);\n  };\n\n  var newOrReusedObservers = unmatchedQueries.map(function (options) {\n    return {\n      defaultedQueryOptions: options,\n      observer: getObserver(options)\n    };\n  });\n\n  var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n    return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n  };\n\n  return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n}\n\nfunction _onUpdate2(observer, result) {\n  var index = _classPrivateFieldGet(this, _observers).indexOf(observer);\n\n  if (index !== -1) {\n    _classPrivateFieldSet(this, _result, replaceAt(_classPrivateFieldGet(this, _result), index, result));\n\n    _classPrivateMethodGet(this, _notify, _notify2).call(this);\n  }\n}\n\nfunction _notify2() {\n  var _this6 = this;\n\n  notifyManager.batch(function () {\n    _this6.listeners.forEach(function (listener) {\n      listener(_classPrivateFieldGet(_this6, _result));\n    });\n  });\n}\n\nexport { QueriesObserver };","map":{"version":3,"mappings":"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","names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","client","queries","_options","setQueries","listeners","size","forEach","observer","subscribe","result","destroy","Set","notifyOptions","batch","prevObservers","newObserverMatches","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","length","hasListeners","getCurrentQuery","combine","matches","getOptimisticResult","r","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","prevObserversMap","Map","options","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","newOrReusedObservers","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","listener"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions<any, any, any, any, any>>,\n    _options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    _options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult, (accessedProp) => {\n                // track property on all observers to ensure proper (synchronized) tracking (#7000)\n                matches.forEach((m) => {\n                  m.observer.trackProp(accessedProp)\n                })\n              })\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"]},"metadata":{},"sourceType":"module"}