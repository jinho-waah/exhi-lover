{"ast":null,"code":"import { omitUndefined } from \"./chunk-RVDAKL7Q.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\"; // src/overlays/circle.tsx\n\nimport pick from \"lodash.pick\";\nimport { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar primitiveKvoKeys = [\"radius\", \"strokeWeight\", \"strokeOpacity\", \"strokeColor\", \"strokeStyle\", \"strokeLineCap\", \"strokeLineJoin\", \"fillColor\", \"fillOpacity\", \"clickable\", \"visible\", \"zIndex\"];\nvar kvoKeys = [...primitiveKvoKeys, \"center\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar Circle = forwardRef(function Circle2(props, ref) {\n  const {\n    center\n  } = props;\n  const navermaps = useNavermaps();\n  const [circle] = useState(() => new navermaps.Circle(omitUndefined(pick(props, [...kvoKeys]))));\n  useImperativeHandle(ref, () => circle);\n  useEffect(() => {\n    if (center && !circle.getCenter().equals(center)) {\n      circle.setCenter(center);\n    }\n  }, [center]);\n  useEffect(() => {\n    circle.setOptions(omitUndefined(pick(props, primitiveKvoKeys)));\n  }, primitiveKvoKeys.map(key => props[key]));\n  return /* @__PURE__ */jsx(Overlay, {\n    element: circle,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { Circle };","map":{"version":3,"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,mBAAhC,EAAqDC,QAArD,QAAqE,OAArE;AA8FM;AAtFN,IAAMC,mBAAmB,CACvB,QADuB,EAEvB,cAFuB,EAGvB,eAHuB,EAIvB,aAJuB,EAKvB,aALuB,EAMvB,eANuB,EAOvB,gBAPuB,EAQvB,WARuB,EASvB,aATuB,EAUvB,WAVuB,EAWvB,SAXuB,EAYvB,QAZuB,CAAzB;AAcA,IAAMC,UAAU,CACd,GAAGD,gBADW,EAEd,QAFc,CAAhB;AAIA,IAAME,YAAYD,QAAQE,GAAR,CAAYC,OAAO,GAAGA,aAAtB,CAAlB;AACA,IAAMC,WAAW,CACf,WADe,EAEf,SAFe,EAGf,OAHe,EAIf,UAJe,EAKf,YALe,EAMf,WANe,EAOf,UAPe,EAQf,WARe,CAAjB;AAUA,IAAMC,SAAS,CAAC,GAAGD,QAAJ,EAAc,GAAGH,SAAjB,CAAf;AAsCO,IAAMK,SAASX,WAAqC,SAASW,OAAT,CAAgBC,KAAhB,EAAuBC,GAAvB,EAA4B;EACrF,MAAM;IAAEC;EAAF,IAAaF,KAAnB;EACA,MAAMG,YAAYC,cAAlB;EACA,MAAM,CAACC,MAAD,IAAWd,SAAS,MAAM,IAAIY,UAAUJ,MAAd,CAAqBO,cAAcnB,KAAKa,KAAL,EAAY,CAAC,GAAGP,OAAJ,CAAZ,CAAd,CAArB,CAAf,CAAjB;EAEAH,oBAAkFW,GAAlF,EAAuF,MAAMI,MAA7F;EAEAhB,UAAU,MAAM;IACd,IAAIa,UAAU,CAACG,OAAOE,SAAP,GAAmBC,MAAnB,CAA0BN,MAA1B,CAAf,EAAsE;MACpEG,OAAOI,SAAP,CAAiBP,MAAjB;IACF;EACF,CAJA,EAIG,CAACA,MAAD,CAJH;EAMAb,UAAU,MAAM;IACdgB,OAAOK,UAAP,CAAkBJ,cAAcnB,KAAKa,KAAL,EAAYR,gBAAZ,CAAd,CAAlB;EACF,CAFA,EAEGA,iBAAiBG,GAAjB,CAAqBC,OAAOI,MAAMJ,GAAN,CAA5B,CAFH;EAIA,OACE,mBAACe,OAAD,EAAC;IAAQC,SAASP,MAAjB;IACCQ,6BAACC,YAAD,EAAC;MAAahB,MAAb;MAA6BiB,WAAWf;IAAxC,CAAD;EADD,CAAD,CADF;AAKD,CAtBqB,CAAf","names":["pick","forwardRef","useEffect","useImperativeHandle","useState","primitiveKvoKeys","kvoKeys","kvoEvents","map","key","uiEvents","events","Circle","props","ref","center","navermaps","useNavermaps","circle","omitUndefined","getCenter","equals","setCenter","setOptions","Overlay","element","children","HandleEvents","listeners"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/overlays/circle.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\nimport { omitUndefined } from '../utils/omit-undefined';\n\nconst primitiveKvoKeys = [\n  'radius',\n  'strokeWeight',\n  'strokeOpacity',\n  'strokeColor',\n  'strokeStyle',\n  'strokeLineCap',\n  'strokeLineJoin',\n  'fillColor',\n  'fillOpacity',\n  'clickable',\n  'visible',\n  'zIndex',\n] as const;\nconst kvoKeys = [\n  ...primitiveKvoKeys,\n  'center',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype CircleOptions = {\n  /**\n   * center\n   * @type naver.maps.Coord | naver.maps.CoordLiteral\n   */\n  center: naver.maps.Coord | naver.maps.CoordLiteral;\n  radius?: number;\n  strokeWeight?: number;\n  strokeOpacity?: number;\n  strokeColor?: string;\n  strokeStyle?: naver.maps.strokeStyleType;\n  strokeLineCap?: naver.maps.strokeLineCapType;\n  strokeLineJoin?: naver.maps.strokeLineJoinType;\n  fillColor?: string;\n  fillOpacity?: number;\n  clickable?: boolean;\n  visible?: boolean;\n  zIndex?: number;\n};\n\nexport type Props = CircleOptions & {\n  onCenterChanged?: (value: naver.maps.Coord) => void;\n  onRadiusChanged?: (value: number) => void;\n  onStrokeWeightChanged?: (value: number) => void;\n  onStrokeOpacityChanged?: (value: number) => void;\n  onStrokeColorChanged?: (value: string) => void;\n  onStrokeStyleChanged?: (value: naver.maps.strokeStyleType) => void;\n  onStrokeLineCapChanged?: (value: naver.maps.strokeLineCapType) => void;\n  onStrokeLineJoinChanged?: (value: naver.maps.strokeLineJoinType) => void;\n  onFillColorChanged?: (value: string) => void;\n  onFillOpacityChanged?: (value: number) => void;\n  onClickableChanged?: (event: boolean) => void;\n  onVisibleChanged?: (event: boolean) => void;\n  onZIndexChanged?: (event: number) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const Circle = forwardRef<naver.maps.Circle, Props>(function Circle(props, ref) {\n  const { center } = props;\n  const navermaps = useNavermaps();\n  const [circle] = useState(() => new navermaps.Circle(omitUndefined(pick(props, [...kvoKeys])) as CircleOptions));\n\n  useImperativeHandle<naver.maps.Circle | undefined, naver.maps.Circle | undefined>(ref, () => circle);\n\n  useEffect(() => {\n    if (center && !circle.getCenter().equals(center as naver.maps.Point)) {\n      circle.setCenter(center);\n    }\n  }, [center]);\n\n  useEffect(() => {\n    circle.setOptions(omitUndefined(pick(props, primitiveKvoKeys)) as CircleOptions);\n  }, primitiveKvoKeys.map(key => props[key]));\n\n  return (\n    <Overlay element={circle}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}