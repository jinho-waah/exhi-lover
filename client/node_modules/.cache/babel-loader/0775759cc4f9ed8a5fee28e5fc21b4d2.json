{"ast":null,"code":"import _toConsumableArray from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n\nvar _queryCache, _mutationCache, _defaultOptions, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline;\n\n// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey, resolveStaleTime, skipToken } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = (_queryCache = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _queryDefaults = /*#__PURE__*/new WeakMap(), _mutationDefaults = /*#__PURE__*/new WeakMap(), _mountCount = /*#__PURE__*/new WeakMap(), _unsubscribeFocus = /*#__PURE__*/new WeakMap(), _unsubscribeOnline = /*#__PURE__*/new WeakMap(), /*#__PURE__*/function () {\n  function QueryClient() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, QueryClient);\n\n    _classPrivateFieldInitSpec(this, _queryCache, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _mutationCache, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _defaultOptions, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _queryDefaults, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _mutationDefaults, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _mountCount, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _unsubscribeFocus, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _unsubscribeOnline, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _queryCache, config.queryCache || new QueryCache());\n\n    _classPrivateFieldSet(this, _mutationCache, config.mutationCache || new MutationCache());\n\n    _classPrivateFieldSet(this, _defaultOptions, config.defaultOptions || {});\n\n    _classPrivateFieldSet(this, _queryDefaults, /* @__PURE__ */new Map());\n\n    _classPrivateFieldSet(this, _mutationDefaults, /* @__PURE__ */new Map());\n\n    _classPrivateFieldSet(this, _mountCount, 0);\n  }\n\n  _createClass(QueryClient, [{\n    key: \"mount\",\n    value: function mount() {\n      var _this$mountCount,\n          _this$mountCount2,\n          _this = this;\n\n      _classPrivateFieldSet(this, _mountCount, (_this$mountCount = _classPrivateFieldGet(this, _mountCount), _this$mountCount2 = _this$mountCount++, _this$mountCount)), _this$mountCount2;\n      if (_classPrivateFieldGet(this, _mountCount) !== 1) return;\n\n      _classPrivateFieldSet(this, _unsubscribeFocus, focusManager.subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(focused) {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!focused) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return _this.resumePausedMutations();\n\n                case 3:\n                  _classPrivateFieldGet(_this, _queryCache).onFocus();\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n\n      _classPrivateFieldSet(this, _unsubscribeOnline, onlineManager.subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(online) {\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!online) {\n                    _context2.next = 4;\n                    break;\n                  }\n\n                  _context2.next = 3;\n                  return _this.resumePausedMutations();\n\n                case 3:\n                  _classPrivateFieldGet(_this, _queryCache).onOnline();\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var _this$mountCount3, _this$mountCount4, _classPrivateFieldGet2, _classPrivateFieldGet3;\n\n      _classPrivateFieldSet(this, _mountCount, (_this$mountCount3 = _classPrivateFieldGet(this, _mountCount), _this$mountCount4 = _this$mountCount3--, _this$mountCount3)), _this$mountCount4;\n      if (_classPrivateFieldGet(this, _mountCount) !== 0) return;\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _unsubscribeFocus)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.call(this);\n\n      _classPrivateFieldSet(this, _unsubscribeFocus, void 0);\n\n      (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _unsubscribeOnline)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.call(this);\n\n      _classPrivateFieldSet(this, _unsubscribeOnline, void 0);\n    }\n  }, {\n    key: \"isFetching\",\n    value: function isFetching(filters) {\n      return _classPrivateFieldGet(this, _queryCache).findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        fetchStatus: \"fetching\"\n      })).length;\n    }\n  }, {\n    key: \"isMutating\",\n    value: function isMutating(filters) {\n      return _classPrivateFieldGet(this, _mutationCache).findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        status: \"pending\"\n      })).length;\n    }\n  }, {\n    key: \"getQueryData\",\n    value: function getQueryData(queryKey) {\n      var _classPrivateFieldGet4;\n\n      var options = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      return (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _queryCache).get(options.queryHash)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.state.data;\n    }\n  }, {\n    key: \"ensureQueryData\",\n    value: function ensureQueryData(options) {\n      var cachedData = this.getQueryData(options.queryKey);\n      if (cachedData === void 0) return this.fetchQuery(options);else {\n        var defaultedOptions = this.defaultQueryOptions(options);\n\n        var query = _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions);\n\n        if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {\n          void this.prefetchQuery(defaultedOptions);\n        }\n\n        return Promise.resolve(cachedData);\n      }\n    }\n  }, {\n    key: \"getQueriesData\",\n    value: function getQueriesData(filters) {\n      return _classPrivateFieldGet(this, _queryCache).findAll(filters).map(function (_ref3) {\n        var queryKey = _ref3.queryKey,\n            state = _ref3.state;\n        var data = state.data;\n        return [queryKey, data];\n      });\n    }\n  }, {\n    key: \"setQueryData\",\n    value: function setQueryData(queryKey, updater, options) {\n      var defaultedOptions = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n\n      var query = _classPrivateFieldGet(this, _queryCache).get(defaultedOptions.queryHash);\n\n      var prevData = query === null || query === void 0 ? void 0 : query.state.data;\n      var data = functionalUpdate(updater, prevData);\n\n      if (data === void 0) {\n        return void 0;\n      }\n\n      return _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions).setData(data, _objectSpread(_objectSpread({}, options), {}, {\n        manual: true\n      }));\n    }\n  }, {\n    key: \"setQueriesData\",\n    value: function setQueriesData(filters, updater, options) {\n      var _this2 = this;\n\n      return notifyManager.batch(function () {\n        return _classPrivateFieldGet(_this2, _queryCache).findAll(filters).map(function (_ref4) {\n          var queryKey = _ref4.queryKey;\n          return [queryKey, _this2.setQueryData(queryKey, updater, options)];\n        });\n      });\n    }\n  }, {\n    key: \"getQueryState\",\n    value: function getQueryState(queryKey) {\n      var _classPrivateFieldGet5;\n\n      var options = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      return (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _queryCache).get(options.queryHash)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.state;\n    }\n  }, {\n    key: \"removeQueries\",\n    value: function removeQueries(filters) {\n      var queryCache = _classPrivateFieldGet(this, _queryCache);\n\n      notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          queryCache.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"resetQueries\",\n    value: function resetQueries(filters, options) {\n      var _this3 = this;\n\n      var queryCache = _classPrivateFieldGet(this, _queryCache);\n\n      var refetchFilters = _objectSpread({\n        type: \"active\"\n      }, filters);\n\n      return notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          query.reset();\n        });\n        return _this3.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"cancelQueries\",\n    value: function cancelQueries() {\n      var _this4 = this;\n\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var defaultedCancelOptions = _objectSpread({\n        revert: true\n      }, cancelOptions);\n\n      var promises = notifyManager.batch(function () {\n        return _classPrivateFieldGet(_this4, _queryCache).findAll(filters).map(function (query) {\n          return query.cancel(defaultedCancelOptions);\n        });\n      });\n      return Promise.all(promises).then(noop).catch(noop);\n    }\n  }, {\n    key: \"invalidateQueries\",\n    value: function invalidateQueries() {\n      var _this5 = this;\n\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return notifyManager.batch(function () {\n        var _ref5, _filters$refetchType;\n\n        _classPrivateFieldGet(_this5, _queryCache).findAll(filters).forEach(function (query) {\n          query.invalidate();\n        });\n\n        if (filters.refetchType === \"none\") {\n          return Promise.resolve();\n        }\n\n        var refetchFilters = _objectSpread(_objectSpread({}, filters), {}, {\n          type: (_ref5 = (_filters$refetchType = filters.refetchType) !== null && _filters$refetchType !== void 0 ? _filters$refetchType : filters.type) !== null && _ref5 !== void 0 ? _ref5 : \"active\"\n        });\n\n        return _this5.refetchQueries(refetchFilters, options);\n      });\n    }\n  }, {\n    key: \"refetchQueries\",\n    value: function refetchQueries() {\n      var _options$cancelRefetc,\n          _this6 = this;\n\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n\n      var fetchOptions = _objectSpread(_objectSpread({}, options), {}, {\n        cancelRefetch: (_options$cancelRefetc = options === null || options === void 0 ? void 0 : options.cancelRefetch) !== null && _options$cancelRefetc !== void 0 ? _options$cancelRefetc : true\n      });\n\n      var promises = notifyManager.batch(function () {\n        return _classPrivateFieldGet(_this6, _queryCache).findAll(filters).filter(function (query) {\n          return !query.isDisabled();\n        }).map(function (query) {\n          var promise = query.fetch(void 0, fetchOptions);\n\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop);\n          }\n\n          return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n        });\n      });\n      return Promise.all(promises).then(noop);\n    }\n  }, {\n    key: \"fetchQuery\",\n    value: function fetchQuery(options) {\n      var defaultedOptions = this.defaultQueryOptions(options);\n\n      if (defaultedOptions.retry === void 0) {\n        defaultedOptions.retry = false;\n      }\n\n      var query = _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions);\n\n      return query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query)) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n  }, {\n    key: \"prefetchQuery\",\n    value: function prefetchQuery(options) {\n      return this.fetchQuery(options).then(noop).catch(noop);\n    }\n  }, {\n    key: \"fetchInfiniteQuery\",\n    value: function fetchInfiniteQuery(options) {\n      options.behavior = infiniteQueryBehavior(options.pages);\n      return this.fetchQuery(options);\n    }\n  }, {\n    key: \"prefetchInfiniteQuery\",\n    value: function prefetchInfiniteQuery(options) {\n      return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n    }\n  }, {\n    key: \"ensureInfiniteQueryData\",\n    value: function ensureInfiniteQueryData(options) {\n      options.behavior = infiniteQueryBehavior(options.pages);\n      return this.ensureQueryData(options);\n    }\n  }, {\n    key: \"resumePausedMutations\",\n    value: function resumePausedMutations() {\n      if (onlineManager.isOnline()) {\n        return _classPrivateFieldGet(this, _mutationCache).resumePausedMutations();\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"getQueryCache\",\n    value: function getQueryCache() {\n      return _classPrivateFieldGet(this, _queryCache);\n    }\n  }, {\n    key: \"getMutationCache\",\n    value: function getMutationCache() {\n      return _classPrivateFieldGet(this, _mutationCache);\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return _classPrivateFieldGet(this, _defaultOptions);\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      _classPrivateFieldSet(this, _defaultOptions, options);\n    }\n  }, {\n    key: \"setQueryDefaults\",\n    value: function setQueryDefaults(queryKey, options) {\n      _classPrivateFieldGet(this, _queryDefaults).set(hashKey(queryKey), {\n        queryKey: queryKey,\n        defaultOptions: options\n      });\n    }\n  }, {\n    key: \"getQueryDefaults\",\n    value: function getQueryDefaults(queryKey) {\n      var defaults = _toConsumableArray(_classPrivateFieldGet(this, _queryDefaults).values());\n\n      var result = {};\n      defaults.forEach(function (queryDefault) {\n        if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n          result = _objectSpread(_objectSpread({}, result), queryDefault.defaultOptions);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"setMutationDefaults\",\n    value: function setMutationDefaults(mutationKey, options) {\n      _classPrivateFieldGet(this, _mutationDefaults).set(hashKey(mutationKey), {\n        mutationKey: mutationKey,\n        defaultOptions: options\n      });\n    }\n  }, {\n    key: \"getMutationDefaults\",\n    value: function getMutationDefaults(mutationKey) {\n      var defaults = _toConsumableArray(_classPrivateFieldGet(this, _mutationDefaults).values());\n\n      var result = {};\n      defaults.forEach(function (queryDefault) {\n        if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n          result = _objectSpread(_objectSpread({}, result), queryDefault.defaultOptions);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"defaultQueryOptions\",\n    value: function defaultQueryOptions(options) {\n      if (options._defaulted) {\n        return options;\n      }\n\n      var defaultedOptions = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _classPrivateFieldGet(this, _defaultOptions).queries), this.getQueryDefaults(options.queryKey)), options), {}, {\n        _defaulted: true\n      });\n\n      if (!defaultedOptions.queryHash) {\n        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n      }\n\n      if (defaultedOptions.refetchOnReconnect === void 0) {\n        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n      }\n\n      if (defaultedOptions.throwOnError === void 0) {\n        defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n      }\n\n      if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n        defaultedOptions.networkMode = \"offlineFirst\";\n      }\n\n      if (defaultedOptions.enabled !== true && defaultedOptions.queryFn === skipToken) {\n        defaultedOptions.enabled = false;\n      }\n\n      return defaultedOptions;\n    }\n  }, {\n    key: \"defaultMutationOptions\",\n    value: function defaultMutationOptions(options) {\n      if (options !== null && options !== void 0 && options._defaulted) {\n        return options;\n      }\n\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _classPrivateFieldGet(this, _defaultOptions).mutations), (options === null || options === void 0 ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey)), options), {}, {\n        _defaulted: true\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _queryCache).clear();\n\n      _classPrivateFieldGet(this, _mutationCache).clear();\n    }\n  }]);\n\n  return QueryClient;\n}());\nexport { QueryClient };","map":{"version":3,"mappings":"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","names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","resolveStaleTime","skipToken","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","config","queryCache","mutationCache","defaultOptions","Map","subscribe","focused","resumePausedMutations","onFocus","online","onOnline","filters","findAll","fetchStatus","length","status","queryKey","options","defaultQueryOptions","get","queryHash","state","data","cachedData","getQueryData","fetchQuery","defaultedOptions","query","build","revalidateIfStale","isStaleByTime","staleTime","prefetchQuery","Promise","resolve","map","updater","prevData","setData","manual","batch","setQueryData","forEach","remove","refetchFilters","type","reset","refetchQueries","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidate","refetchType","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","behavior","pages","fetchInfiniteQuery","ensureQueryData","isOnline","set","defaults","values","result","queryDefault","mutationKey","_defaulted","queries","getQueryDefaults","refetchOnReconnect","networkMode","suspense","persister","enabled","queryFn","mutations","getMutationDefaults","clear"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type {\n  CancelOptions,\n  DataTag,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureInfiniteQueryDataOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  NoInfer,\n  OmitKeyof,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get(options.queryHash)?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    if (cachedData === undefined) return this.fetchQuery(options)\n    else {\n      const defaultedOptions = this.defaultQueryOptions(options)\n      const query = this.#queryCache.build(this, defaultedOptions)\n\n      if (\n        options.revalidateIfStale &&\n        query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))\n      ) {\n        void this.prefetchQuery(defaultedOptions)\n      }\n\n      return Promise.resolve(cachedData)\n    }\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TError>(options.queryHash)\n      ?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query),\n    )\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options as any)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  ensureInfiniteQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: EnsureInfiniteQueryDataOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n\n    return this.ensureQueryData(options as any)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n  >(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<\n        QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n        'queryKey'\n      >\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = void,\n    TContext = unknown,\n  >(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (\n      defaultedOptions.enabled !== true &&\n      defaultedOptions.queryFn === skipToken\n    ) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}