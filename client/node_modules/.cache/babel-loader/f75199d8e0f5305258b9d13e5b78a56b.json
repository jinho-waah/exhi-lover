{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n_c = TemplateBlock;\n\nconst PostTemplate = _ref => {\n  _s();\n\n  let {\n    shows\n  } = _ref;\n  const [tags, setTags] = useState(null);\n  const [tagId, setTagId] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchTagId = async () => {\n      try {\n        setError(null);\n        setTagId(null);\n        const tagsIdData = await Promise.all(shows.map(async show => {\n          const url = `/api/exhibition_tags/${show.id}`; // const response = await axios.get(`https://exhi-lover.com${url}`);\n\n          const response = await axios.get(`http://localhost:5100${url}`);\n          const tagIdSet = response.data;\n          console.log(tagIdSet);\n          return {\n            showId: show.id,\n            tags: tagIdSet.map(tag => tag.tag_id)\n          };\n        }));\n        const tagIdArray = tagsIdData.map(_ref2 => {\n          let {\n            tags\n          } = _ref2;\n          return tags;\n        }).flat();\n        setTagId(tagIdArray);\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    const fetchTag = async () => {\n      try {\n        setError(null);\n        setTags(null);\n      } catch (e) {}\n    };\n\n    console.log(tagId);\n    fetchTagId();\n  }, [shows]);\n  return /*#__PURE__*/_jsxDEV(TemplateBlock, {\n    children: shows.map((show, index) => {\n      const key = `${show.show_name}`; // create unique key prop value\n\n      const colorIndex = index % colorSet.length; // determine color index based on position in array\n\n      const color = colorSet[colorIndex]; // get color from colorSet array\n\n      return /*#__PURE__*/_jsxDEV(Post, {\n        show: show,\n        color: color,\n        tags: tags && tags[show.id]\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this); // pass color as prop to Post component\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostTemplate, \"WX5x9aolqNa6kcdHdYIlwT8va7Q=\");\n\n_c2 = PostTemplate;\nexport default PostTemplate;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TemplateBlock\");\n$RefreshReg$(_c2, \"PostTemplate\");","map":{"version":3,"names":["styled","Post","colorSet","useEffect","useState","axios","TemplateBlock","div","PostTemplate","shows","tags","setTags","tagId","setTagId","error","setError","fetchTagId","tagsIdData","Promise","all","map","show","url","id","response","get","tagIdSet","data","console","log","showId","tag","tag_id","tagIdArray","flat","e","fetchTag","index","key","show_name","colorIndex","length","color"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js"],"sourcesContent":["import styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n\nconst PostTemplate = ({ shows }) => {\n  const [tags, setTags] = useState(null);\n  const [tagId, setTagId] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTagId = async () => {\n      try {\n        setError(null);\n        setTagId(null);\n        const tagsIdData = await Promise.all(\n          shows.map(async (show) => {\n            const url = `/api/exhibition_tags/${show.id}`;\n            // const response = await axios.get(`https://exhi-lover.com${url}`);\n            const response = await axios.get(`http://localhost:5100${url}`);\n            const tagIdSet = response.data;\n            console.log(tagIdSet);\n            return { showId: show.id, tags: tagIdSet.map((tag) => tag.tag_id) };\n          })\n        );\n        const tagIdArray = tagsIdData.map(({ tags }) => tags).flat();\n        setTagId(tagIdArray);\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    const fetchTag = async () => {\n      try {\n        setError(null);\n        setTags(null);\n      } catch (e) {}\n    };\n    console.log(tagId);\n    fetchTagId();\n  }, [shows]);\n\n  return (\n    <TemplateBlock>\n      {shows.map((show, index) => {\n        const key = `${show.show_name}`; // create unique key prop value\n        const colorIndex = index % colorSet.length; // determine color index based on position in array\n        const color = colorSet[colorIndex]; // get color from colorSet array\n        return (\n          <Post\n            show={show}\n            key={key}\n            color={color}\n            tags={tags && tags[show.id]}\n          />\n        ); // pass color as prop to Post component\n      })}\n    </TemplateBlock>\n  );\n};\n\nexport default PostTemplate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}