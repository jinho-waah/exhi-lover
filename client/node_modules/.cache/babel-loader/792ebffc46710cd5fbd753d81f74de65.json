{"ast":null,"code":"import { omitUndefined } from \"./chunk-RVDAKL7Q.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\"; // src/overlays/rectangle.tsx\n\nimport pick from \"lodash.pick\";\nimport { useEffect, useState, forwardRef, useImperativeHandle } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar optionKeys = [\"strokeWeight\", \"strokeOpacity\", \"strokeColor\", \"strokeStyle\", \"strokeLineCap\", \"strokeLineJoin\", \"fillColor\", \"fillOpacity\"];\nvar kvoKeys = [\"bounds\", \"clickable\", \"visible\", \"zIndex\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"click\", \"dblclick\", \"mousedown\", \"mouseout\", \"mouseover\", \"mouseup\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar Rectangle = forwardRef(function Rectangle2(props, ref) {\n  const options = pick(props, [...optionKeys, ...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [rectangle] = useState(() => new navermaps.Rectangle(options));\n  useImperativeHandle(ref, () => rectangle);\n  useEffect(() => {\n    rectangle.setOptions(omitUndefined(options));\n  }, kvoKeys.map(key => options[key]));\n  return /* @__PURE__ */jsx(Overlay, {\n    element: rectangle,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { Rectangle };","map":{"version":3,"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,mBAA1C,QAAqE,OAArE;AAyEM;AAjEN,IAAMC,aAAa,CACjB,cADiB,EAEjB,eAFiB,EAGjB,aAHiB,EAIjB,aAJiB,EAKjB,eALiB,EAMjB,gBANiB,EAOjB,WAPiB,EAQjB,aARiB,CAAnB;AAUA,IAAMC,UAAU,CACd,QADc,EAEd,WAFc,EAGd,SAHc,EAId,QAJc,CAAhB;AAMA,IAAMC,YAAYD,QAAQE,GAAR,CAAYC,OAAO,GAAGA,aAAtB,CAAlB;AACA,IAAMC,WAAW,CACf,OADe,EAEf,UAFe,EAGf,WAHe,EAIf,UAJe,EAKf,WALe,EAMf,SANe,CAAjB;AAQA,IAAMC,SAAS,CAAC,GAAGD,QAAJ,EAAc,GAAGH,SAAjB,CAAf;AA2BO,IAAMK,YAAYT,WAAwC,SAASS,UAAT,CAAmBC,KAAnB,EAA0BC,GAA1B,EAA+B;EAC9F,MAAMC,UAAUf,KAAKa,KAAL,EAAY,CAAC,GAAGR,UAAJ,EAAgB,GAAGC,OAAnB,CAAZ,CAAhB;EACA,MAAMU,YAAYC,cAAlB;EACA,MAAM,CAACC,SAAD,IAAchB,SAAS,MAAM,IAAIc,UAAUJ,SAAd,CAAwBG,OAAxB,CAAf,CAApB;EAEAX,oBAAwFU,GAAxF,EAA6F,MAAMI,SAAnG;EAEAjB,UAAU,MAAM;IACdiB,UAAUC,UAAV,CAAqBC,cAAcL,OAAd,CAArB;EACF,CAFA,EAEGT,QAAQE,GAAR,CAAYC,OAAOM,QAAQN,GAAR,CAAnB,CAFH;EAIA,OACE,mBAACY,OAAD,EAAC;IAAQC,SAASJ,SAAjB;IACCK,6BAACC,YAAD,EAAC;MAAab,MAAb;MAA6Bc,WAAWZ;IAAxC,CAAD;EADD,CAAD,CADF;AAKD,CAhBwB,CAAlB","names":["pick","useEffect","useState","forwardRef","useImperativeHandle","optionKeys","kvoKeys","kvoEvents","map","key","uiEvents","events","Rectangle","props","ref","options","navermaps","useNavermaps","rectangle","setOptions","omitUndefined","Overlay","element","children","HandleEvents","listeners"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/overlays/rectangle.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\nimport { omitUndefined } from '../utils/omit-undefined';\n\nconst optionKeys = [\n  'strokeWeight',\n  'strokeOpacity',\n  'strokeColor',\n  'strokeStyle',\n  'strokeLineCap',\n  'strokeLineJoin',\n  'fillColor',\n  'fillOpacity',\n] as const;\nconst kvoKeys = [\n  'bounds',\n  'clickable',\n  'visible',\n  'zIndex',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseout',\n  'mouseover',\n  'mouseup',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype RectangleOptions = {\n  /**\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral\n   */\n  bounds: naver.maps.Bounds | naver.maps.BoundsLiteral;\n  strokeWeight?: number;\n  strokeOpacity?: number;\n  strokeColor?: string;\n  strokeStyle?: naver.maps.strokeStyleType;\n  strokeLineCap?: naver.maps.strokeLineCapType;\n  strokeLineJoin?: naver.maps.strokeLineJoinType;\n  fillColor?: string;\n  fillOpacity?: number;\n  clickable?: boolean;\n  visible?: boolean;\n  zIndex?: number;\n};\n\nexport type Props = RectangleOptions & {\n  onBoundsChanged?: (value: naver.maps.Bounds) => void;\n  onClickableChanged?: (value: boolean) => void;\n  onVisibleChanged?: (value: boolean) => void;\n  onZIndexChanged?: (value: number) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const Rectangle = forwardRef<naver.maps.Rectangle, Props>(function Rectangle(props, ref) {\n  const options = pick(props, [...optionKeys, ...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [rectangle] = useState(() => new navermaps.Rectangle(options));\n\n  useImperativeHandle<naver.maps.Rectangle | undefined, naver.maps.Rectangle | undefined>(ref, () => rectangle);\n\n  useEffect(() => {\n    rectangle.setOptions(omitUndefined(options) as RectangleOptions); // TODO: FIX DefinilyTyped. setOptions의 assign type 은 Partial<Options> 이어야 함\n  }, kvoKeys.map(key => options[key]));\n\n  return (\n    <Overlay element={rectangle}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}