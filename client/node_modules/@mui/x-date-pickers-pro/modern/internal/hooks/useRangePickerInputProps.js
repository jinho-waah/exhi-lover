import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { onSpaceOrEnter, useLocaleText } from '@mui/x-date-pickers/internals';
export const useRangePickerInputProps = ({
  wrapperVariant,
  open,
  actions,
  readOnly,
  disabled,
  disableOpenPicker,
  onBlur,
  rangePosition,
  onRangePositionChange,
  localeText: inLocaleText
}) => {
  const localeText = useLocaleText();
  const startRef = React.useRef(null);
  const endRef = React.useRef(null);
  React.useEffect(() => {
    if (!open) {
      return;
    }
    if (rangePosition === 'start') {
      startRef.current?.focus();
    } else if (rangePosition === 'end') {
      endRef.current?.focus();
    }
  }, [rangePosition, open]);
  const openRangeStartSelection = event => {
    event.stopPropagation();
    onRangePositionChange('start');
    if (!readOnly && !disableOpenPicker) {
      actions.onOpen();
    }
  };
  const openRangeEndSelection = event => {
    event.stopPropagation();
    onRangePositionChange('end');
    if (!readOnly && !disableOpenPicker) {
      actions.onOpen();
    }
  };
  const focusOnRangeStart = () => {
    if (open) {
      onRangePositionChange('start');
    }
  };
  const focusOnRangeEnd = () => {
    if (open) {
      onRangePositionChange('end');
    }
  };
  const readOnlyInput = readOnly ?? wrapperVariant === 'mobile';
  const startInputProps = _extends({
    inputRef: startRef,
    label: inLocaleText?.start ?? localeText.start,
    onKeyDown: onSpaceOrEnter(openRangeStartSelection),
    onFocus: focusOnRangeStart,
    focused: open ? rangePosition === 'start' : undefined
  }, !readOnly && !disabled && {
    onClick: openRangeStartSelection
  }, {
    readOnly: readOnlyInput,
    disabled
  });
  const endInputProps = _extends({
    inputRef: endRef,
    label: inLocaleText?.end ?? localeText.end,
    onKeyDown: onSpaceOrEnter(openRangeEndSelection),
    onFocus: focusOnRangeEnd,
    focused: open ? rangePosition === 'end' : undefined
  }, !readOnly && !disabled && {
    onClick: openRangeEndSelection
  }, {
    readOnly: readOnlyInput,
    disabled
  });
  const rootProps = {
    onBlur
  };
  return {
    startInput: startInputProps,
    endInput: endInputProps,
    root: rootProps
  };
};