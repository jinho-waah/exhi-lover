{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateFieldInitSpec from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n\nvar _focused, _cleanup, _setup;\n\n// src/focusManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar FocusManager = (_focused = /*#__PURE__*/new WeakMap(), _cleanup = /*#__PURE__*/new WeakMap(), _setup = /*#__PURE__*/new WeakMap(), /*#__PURE__*/function (_Subscribable) {\n  _inherits(FocusManager, _Subscribable);\n\n  var _super = _createSuper(FocusManager);\n\n  function FocusManager() {\n    var _this;\n\n    _classCallCheck(this, FocusManager);\n\n    _this = _super.call(this);\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _focused, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _cleanup, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _setup, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(_assertThisInitialized(_this), _setup, function (onFocus) {\n      if (!isServer && window.addEventListener) {\n        var listener = function listener() {\n          return onFocus();\n        };\n\n        window.addEventListener(\"visibilitychange\", listener, false);\n        return function () {\n          window.removeEventListener(\"visibilitychange\", listener);\n        };\n      }\n\n      return;\n    });\n\n    return _this;\n  }\n\n  _createClass(FocusManager, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (!_classPrivateFieldGet(this, _cleanup)) {\n        this.setEventListener(_classPrivateFieldGet(this, _setup));\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        var _classPrivateFieldGet2;\n\n        (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _cleanup)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.call(this);\n\n        _classPrivateFieldSet(this, _cleanup, void 0);\n      }\n    }\n  }, {\n    key: \"setEventListener\",\n    value: function setEventListener(setup) {\n      var _classPrivateFieldGet3,\n          _this2 = this;\n\n      _classPrivateFieldSet(this, _setup, setup);\n\n      (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _cleanup)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.call(this);\n\n      _classPrivateFieldSet(this, _cleanup, setup(function (focused) {\n        if (typeof focused === \"boolean\") {\n          _this2.setFocused(focused);\n        } else {\n          _this2.onFocus();\n        }\n      }));\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(focused) {\n      var changed = _classPrivateFieldGet(this, _focused) !== focused;\n\n      if (changed) {\n        _classPrivateFieldSet(this, _focused, focused);\n\n        this.onFocus();\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var isFocused = this.isFocused();\n      this.listeners.forEach(function (listener) {\n        listener(isFocused);\n      });\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      var _globalThis$document;\n\n      if (typeof _classPrivateFieldGet(this, _focused) === \"boolean\") {\n        return _classPrivateFieldGet(this, _focused);\n      }\n\n      return ((_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.visibilityState) !== \"hidden\";\n    }\n  }]);\n\n  return FocusManager;\n}(Subscribable));\nvar focusManager = new FocusManager();\nexport { FocusManager, focusManager };","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB;AAQO,IAAMC;EAAA;;EAAA;;EAMX,wBAAc;IAAA;;IAAA;;IACZ;;IADY;MAAA;MAAA;IAAA;;IAAA;MAAA;MAAA;IAAA;;IAAA;MAAA;MAAA;IAAA;;IAEZ,6DAAc,UAACC,OAAD,EAAa;MAGzB,IAAI,CAACF,QAAD,IAAaG,OAAOC,gBAAxB,EAA0C;QACxC,IAAMC,WAAW,SAAXA,QAAW;UAAA,OAAMH,SAAN;QAAA,CAAjB;;QAEAC,OAAOC,gBAAP,CAAwB,kBAAxB,EAA4CC,QAA5C,EAAsD,KAAtD;QAEA,OAAO,YAAM;UAEXF,OAAOG,mBAAP,CAA2B,kBAA3B,EAA+CD,QAA/C;QACF,CAHA;MAIF;;MACA;IACF,CAdA;;IAFY;EAiBd;;EAvBW;IAAA;IAAA,OAyBD,uBAAoB;MAC5B,IAAI,uBAAC,IAAD,WAAJ,EAAoB;QAClB,KAAKE,gBAAL,uBAAsB,IAAtB;MACF;IACF;EA7BW;IAAA;IAAA,OA+BD,yBAAgB;MACxB,IAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;QAAA;;QACxB;;QACA,sCAAgB,MAAhB;MACF;IACF;EApCW;IAAA;IAAA,OAsCX,0BAAiBC,KAAjB,EAAuC;MAAA;MAAA;;MACrC,oCAAcA,KAAd;;MACA;;MACA,sCAAgBA,MAAM,UAACC,OAAD,EAAa;QACjC,IAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;UAChC,OAAKC,UAAL,CAAgBD,OAAhB;QACF,CAFA,MAEO;UACL,OAAKR,OAAL;QACF;MACD,CANe,CAAhB;IAOF;EAhDW;IAAA;IAAA,OAkDX,oBAAWQ,OAAX,EAAoC;MAClC,IAAME,UAAU,0CAAkBF,OAAlC;;MACA,IAAIE,OAAJ,EAAa;QACX,sCAAgBF,OAAhB;;QACA,KAAKR,OAAL;MACF;IACF;EAxDW;IAAA;IAAA,OA0DX,mBAAgB;MACd,IAAMW,YAAY,KAAKA,SAAL,EAAlB;MACA,KAAKC,SAAL,CAAeC,OAAf,CAAuB,UAACV,QAAD,EAAc;QACnCA,SAASQ,SAAT;MACD,CAFD;IAGF;EA/DW;IAAA;IAAA,OAiEX,qBAAqB;MAAA;;MACnB,IAAI,6BAAO,IAAP,gBAAyB,SAA7B,EAAwC;QACtC,6BAAO,IAAP;MACF;;MAIA,OAAO,oCAAWG,QAAX,8EAAqBC,eAArB,MAAyC,QAAhD;IACF;EAzEW;;EAAA;AAAA,EAAqBlB,YAArB,EAAN;AA4EA,IAAMmB,eAAe,IAAIjB,YAAJ,EAArB","names":["Subscribable","isServer","FocusManager","onFocus","window","addEventListener","listener","removeEventListener","setEventListener","hasListeners","setup","focused","setFocused","changed","isFocused","listeners","forEach","document","visibilityState","focusManager"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/focusManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n"]},"metadata":{},"sourceType":"module"}