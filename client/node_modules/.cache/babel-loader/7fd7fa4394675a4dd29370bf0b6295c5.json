{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Desktop/exhi/exhi/client/src/component/map/MiniMap.js\";\n\n/*global kakao*/\nimport React, { useEffect, useState } from \"react\";\nimport { Map, MapMarker, StaticMap } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MiniMap(_ref) {\n  let {\n    lat,\n    lng\n  } = _ref;\n  //   const [info, setInfo] = useState();\n  //   const [markers, setMarkers] = useState([]);\n  //   const [map, setMap] = useState();\n  //   useEffect(() => {\n  //     if (!map) return;\n  //     const ps = new kakao.maps.services.Places();\n  //     ps.keywordSearch(\"국립현대미술관(서울)\", (data, status, _pagination) => {\n  //       if (status === kakao.maps.services.Status.OK) {\n  //         // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n  //         // LatLngBounds 객체에 좌표를 추가합니다\n  //         const bounds = new kakao.maps.LatLngBounds();\n  //         let markers = [];\n  //         for (var i = 0; i < data.length; i++) {\n  //           // @ts-ignore\n  //           markers.push({\n  //             position: {\n  //               lat: data[i].y,\n  //               lng: data[i].x,\n  //             },\n  //             content: data[i].place_name,\n  //           });\n  //           // @ts-ignore\n  //           bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n  //         }\n  //         setMarkers(markers);\n  //         // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n  //         map.setBounds(bounds);\n  //       }\n  //     });\n  //   }, [map]);\n  //   return (\n  //     <Map // 로드뷰를 표시할 Container\n  //       center={{\n  //         lat: 37.566826,\n  //         lng: 126.9786567,\n  //       }}\n  //       style={{\n  //         width: \"100%\",\n  //         height: \"350px\",\n  //       }}\n  //       level={3}\n  //       onCreate={setMap}\n  //     >\n  //       {markers.map((marker) => (\n  //         <MapMarker\n  //           key={`marker-${marker.content}-${marker.position.lat},${marker.position.lng}`}\n  //           position={marker.position}\n  //           onClick={() => setInfo(marker)}\n  //         >\n  //           {info && info.content === marker.content && (\n  //             <div style={{ color: \"#000\" }}>{marker.content}</div>\n  //           )}\n  //         </MapMarker>\n  //       ))}\n  //     </Map>\n  //   );\n  return /*#__PURE__*/_jsxDEV(StaticMap, {\n    center: {\n      lat: lat,\n      lng: lng\n    },\n    style: {\n      width: \"100%\",\n      height: \"21rem\"\n    },\n    level: 4,\n    marker: {\n      lat: lat,\n      lng: lng\n    },\n    children: /*#__PURE__*/_jsxDEV(MapMarker, {\n      position: {\n        lat: lat,\n        lng: lng\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"#000\"\n        },\n        children: \"Hello World!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MiniMap;\nexport default MiniMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMap\");","map":{"version":3,"names":["React","useEffect","useState","Map","MapMarker","StaticMap","MiniMap","lat","lng","width","height","color"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/src/component/map/MiniMap.js"],"sourcesContent":["/*global kakao*/\nimport React, { useEffect, useState } from \"react\";\nimport { Map, MapMarker, StaticMap } from \"react-kakao-maps-sdk\";\n\nfunction MiniMap({ lat, lng }) {\n  //   const [info, setInfo] = useState();\n  //   const [markers, setMarkers] = useState([]);\n  //   const [map, setMap] = useState();\n\n  //   useEffect(() => {\n  //     if (!map) return;\n  //     const ps = new kakao.maps.services.Places();\n\n  //     ps.keywordSearch(\"국립현대미술관(서울)\", (data, status, _pagination) => {\n  //       if (status === kakao.maps.services.Status.OK) {\n  //         // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n  //         // LatLngBounds 객체에 좌표를 추가합니다\n  //         const bounds = new kakao.maps.LatLngBounds();\n  //         let markers = [];\n\n  //         for (var i = 0; i < data.length; i++) {\n  //           // @ts-ignore\n  //           markers.push({\n  //             position: {\n  //               lat: data[i].y,\n  //               lng: data[i].x,\n  //             },\n  //             content: data[i].place_name,\n  //           });\n  //           // @ts-ignore\n  //           bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n  //         }\n  //         setMarkers(markers);\n\n  //         // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n  //         map.setBounds(bounds);\n  //       }\n  //     });\n  //   }, [map]);\n\n  //   return (\n  //     <Map // 로드뷰를 표시할 Container\n  //       center={{\n  //         lat: 37.566826,\n  //         lng: 126.9786567,\n  //       }}\n  //       style={{\n  //         width: \"100%\",\n  //         height: \"350px\",\n  //       }}\n  //       level={3}\n  //       onCreate={setMap}\n  //     >\n  //       {markers.map((marker) => (\n  //         <MapMarker\n  //           key={`marker-${marker.content}-${marker.position.lat},${marker.position.lng}`}\n  //           position={marker.position}\n  //           onClick={() => setInfo(marker)}\n  //         >\n  //           {info && info.content === marker.content && (\n  //             <div style={{ color: \"#000\" }}>{marker.content}</div>\n  //           )}\n  //         </MapMarker>\n  //       ))}\n  //     </Map>\n  //   );\n\n  return (\n    <StaticMap\n      center={{ lat: lat, lng: lng }}\n      style={{ width: \"100%\", height: \"21rem\" }}\n      level={4}\n      marker={{ lat: lat, lng: lng }}\n    >\n      <MapMarker position={{ lat: lat, lng: lng }}>\n        <div style={{ color: \"#000\" }}>Hello World!</div>\n      </MapMarker>\n    </StaticMap>\n  );\n}\n\nexport default MiniMap;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,SAAzB,QAA0C,sBAA1C;;;AAEA,SAASC,OAAT,OAA+B;EAAA,IAAd;IAAEC,GAAF;IAAOC;EAAP,CAAc;EAC7B;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,oBACE,QAAC,SAAD;IACE,MAAM,EAAE;MAAED,GAAG,EAAEA,GAAP;MAAYC,GAAG,EAAEA;IAAjB,CADV;IAEE,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAT;MAAiBC,MAAM,EAAE;IAAzB,CAFT;IAGE,KAAK,EAAE,CAHT;IAIE,MAAM,EAAE;MAAEH,GAAG,EAAEA,GAAP;MAAYC,GAAG,EAAEA;IAAjB,CAJV;IAAA,uBAME,QAAC,SAAD;MAAW,QAAQ,EAAE;QAAED,GAAG,EAAEA,GAAP;QAAYC,GAAG,EAAEA;MAAjB,CAArB;MAAA,uBACE;QAAK,KAAK,EAAE;UAAEG,KAAK,EAAE;QAAT,CAAZ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EANF;IAAA;IAAA;IAAA;EAAA,QADF;AAYD;;KA3EQL,O;AA6ET,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}