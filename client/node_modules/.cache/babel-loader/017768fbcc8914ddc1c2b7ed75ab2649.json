{"ast":null,"code":"import { omitUndefined } from \"./chunk-RVDAKL7Q.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\"; // src/overlays/ellipse.tsx\n\nimport pick from \"lodash.pick\";\nimport { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar primitiveKvoKeys = [\"strokeWeight\", \"strokeOpacity\", \"strokeColor\", \"strokeStyle\", \"strokeLineCap\", \"strokeLineJoin\", \"fillColor\", \"fillOpacity\", \"clickable\", \"visible\", \"zIndex\"];\nvar kvoKeys = [...primitiveKvoKeys, \"bounds\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar Ellipse = forwardRef(function Ellipse2(props, ref) {\n  const {\n    bounds\n  } = props;\n  const navermaps = useNavermaps();\n  const [ellipse] = useState(() => new navermaps.Ellipse(omitUndefined(pick(props, [...kvoKeys]))));\n  useImperativeHandle(ref, () => ellipse);\n  useEffect(() => {\n    ellipse.setOptions(omitUndefined(pick(props, primitiveKvoKeys)));\n  }, primitiveKvoKeys.map(key => props[key]));\n  useEffect(() => {\n    if (bounds && ellipse.getBounds().equals(bounds)) {\n      ellipse.setBounds(bounds);\n    }\n  }, [bounds]);\n  return /* @__PURE__ */jsx(Overlay, {\n    element: ellipse,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { Ellipse };","map":{"version":3,"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,mBAAhC,EAAqDC,QAArD,QAAqE,OAArE;AA2FM;AAnFN,IAAMC,mBAAmB,CACvB,cADuB,EAEvB,eAFuB,EAGvB,aAHuB,EAIvB,aAJuB,EAKvB,eALuB,EAMvB,gBANuB,EAOvB,WAPuB,EAQvB,aARuB,EASvB,WATuB,EAUvB,SAVuB,EAWvB,QAXuB,CAAzB;AAaA,IAAMC,UAAU,CACd,GAAGD,gBADW,EAEd,QAFc,CAAhB;AAIA,IAAME,YAAYD,QAAQE,GAAR,CAAYC,OAAO,GAAGA,aAAtB,CAAlB;AACA,IAAMC,WAAW,CACf,WADe,EAEf,SAFe,EAGf,OAHe,EAIf,UAJe,EAKf,YALe,EAMf,WANe,EAOf,UAPe,EAQf,WARe,CAAjB;AAUA,IAAMC,SAAS,CAAC,GAAGD,QAAJ,EAAc,GAAGH,SAAjB,CAAf;AAoCO,IAAMK,UAAUX,WAAsC,SAASW,QAAT,CAAiBC,KAAjB,EAAwBC,GAAxB,EAA6B;EACxF,MAAM;IAAEC;EAAF,IAAaF,KAAnB;EACA,MAAMG,YAAYC,cAAlB;EACA,MAAM,CAACC,OAAD,IAAYd,SAAS,MAAM,IAAIY,UAAUJ,OAAd,CAAsBO,cAAcnB,KAAKa,KAAL,EAAY,CAAC,GAAGP,OAAJ,CAAZ,CAAd,CAAtB,CAAf,CAAlB;EAEAH,oBAAoFW,GAApF,EAAyF,MAAMI,OAA/F;EAEAhB,UAAU,MAAM;IACdgB,QAAQE,UAAR,CAAmBD,cAAcnB,KAAKa,KAAL,EAAYR,gBAAZ,CAAd,CAAnB;EACF,CAFA,EAEGA,iBAAiBG,GAAjB,CAAqBC,OAAOI,MAAMJ,GAAN,CAA5B,CAFH;EAIAP,UAAU,MAAM;IACd,IAAIa,UAAUG,QAAQG,SAAR,GAAoBC,MAApB,CAA2BP,MAA3B,CAAd,EAAuE;MACrEG,QAAQK,SAAR,CAAkBR,MAAlB;IACF;EACF,CAJA,EAIG,CAACA,MAAD,CAJH;EAMA,OACE,mBAACS,OAAD,EAAC;IAAQC,SAASP,OAAjB;IACCQ,6BAACC,YAAD,EAAC;MAAahB,MAAb;MAA6BiB,WAAWf;IAAxC,CAAD;EADD,CAAD,CADF;AAKD,CAtBsB,CAAhB","names":["pick","forwardRef","useEffect","useImperativeHandle","useState","primitiveKvoKeys","kvoKeys","kvoEvents","map","key","uiEvents","events","Ellipse","props","ref","bounds","navermaps","useNavermaps","ellipse","omitUndefined","setOptions","getBounds","equals","setBounds","Overlay","element","children","HandleEvents","listeners"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/overlays/ellipse.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\nimport { omitUndefined } from '../utils/omit-undefined';\n\nconst primitiveKvoKeys = [\n  'strokeWeight',\n  'strokeOpacity',\n  'strokeColor',\n  'strokeStyle',\n  'strokeLineCap',\n  'strokeLineJoin',\n  'fillColor',\n  'fillOpacity',\n  'clickable',\n  'visible',\n  'zIndex',\n] as const;\nconst kvoKeys = [\n  ...primitiveKvoKeys,\n  'bounds',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype EllipseOptions = {\n  /**\n   * bounds\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral\n   */\n  bounds: naver.maps.Bounds | naver.maps.BoundsLiteral;\n  strokeWeight?: number;\n  strokeOpacity?: number;\n  strokeColor?: string;\n  strokeStyle?: naver.maps.strokeStyleType;\n  strokeLineCap?: naver.maps.strokeLineCapType;\n  strokeLineJoin?: naver.maps.strokeLineJoinType;\n  fillColor?: string;\n  fillOpacity?: number;\n  clickable?: boolean;\n  visible?: boolean;\n  zIndex?: number;\n};\n\nexport type Props = EllipseOptions & {\n  onBoundsChanged?: (value: naver.maps.Bounds) => void;\n  onStrokeWeightChanged?: (value: number) => void;\n  onStrokeOpacityChanged?: (value: number) => void;\n  onStrokeColorChanged?: (value: string) => void;\n  onStrokeStyleChanged?: (value: naver.maps.strokeStyleType) => void;\n  onStrokeLineCapChanged?: (value: naver.maps.strokeLineCapType) => void;\n  onStrokeLineJoinChanged?: (value: naver.maps.strokeLineJoinType) => void;\n  onFillColorChanged?: (value: string) => void;\n  onFillOpacityChanged?: (value: number) => void;\n  onClickableChanged?: (event: boolean) => void;\n  onVisibleChanged?: (event: boolean) => void;\n  onZIndexChanged?: (event: number) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const Ellipse = forwardRef<naver.maps.Ellipse, Props>(function Ellipse(props, ref) {\n  const { bounds } = props;\n  const navermaps = useNavermaps();\n  const [ellipse] = useState(() => new navermaps.Ellipse(omitUndefined(pick(props, [...kvoKeys])) as EllipseOptions));\n\n  useImperativeHandle<naver.maps.Ellipse | undefined, naver.maps.Ellipse | undefined>(ref, () => ellipse);\n\n  useEffect(() => {\n    ellipse.setOptions(omitUndefined(pick(props, primitiveKvoKeys)) as EllipseOptions); // TODO: FIX DefinilyTyped. setOptions의 assign type 은 Partial<Options> 이어야 함\n  }, primitiveKvoKeys.map(key => props[key]));\n\n  useEffect(() => {\n    if (bounds && ellipse.getBounds().equals(bounds as naver.maps.Bounds)) {\n      ellipse.setBounds(bounds);\n    }\n  }, [bounds]);\n\n  return (\n    <Overlay element={ellipse}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}