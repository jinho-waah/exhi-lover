{"ast":null,"code":"\"use client\"; // src/QueryClientProvider.tsx\n\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar QueryClientContext = React.createContext(void 0);\n\nvar useQueryClient = function useQueryClient(queryClient) {\n  var client = React.useContext(QueryClientContext);\n\n  if (queryClient) {\n    return queryClient;\n  }\n\n  if (!client) {\n    throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n  }\n\n  return client;\n};\n\nvar QueryClientProvider = function QueryClientProvider(_ref) {\n  var client = _ref.client,\n      children = _ref.children;\n  React.useEffect(function () {\n    client.mount();\n    return function () {\n      client.unmount();\n    };\n  }, [client]);\n  return /* @__PURE__ */jsx(QueryClientContext.Provider, {\n    value: client,\n    children: children\n  });\n};\n\nexport { QueryClientContext, QueryClientProvider, useQueryClient };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AAuCI;AAnCG,IAAMC,qBAA2BD,oBACtC,MADsC,CAAjC;;AAIA,IAAME,iBAAiB,SAAjBA,cAAiB,CAACC,WAAD,EAA+B;EAC3D,IAAMC,SAAeJ,iBAAWC,kBAAX,CAArB;;EAEA,IAAIE,WAAJ,EAAiB;IACf,OAAOA,WAAP;EACF;;EAEA,IAAI,CAACC,MAAL,EAAa;IACX,MAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;EACF;;EAEA,OAAOD,MAAP;AACF,CAZO;;AAmBA,IAAME,sBAAsB,SAAtBA,mBAAsB,OAGgB;EAAA,IAFjDF,MAEiD,QAFjDA,MAEiD;EAAA,IADjDG,QACiD,QADjDA,QACiD;EAC3CP,gBAAU,YAAM;IACpBI,OAAOI,KAAP;IACA,OAAO,YAAM;MACXJ,OAAOK,OAAP;IACF,CAFA;EAGF,CALM,EAKH,CAACL,MAAD,CALG;EAON,OACE,mBAACH,mBAAmBS,QAApB,EAAC;IAA4BC,OAAOP,MAAnC;IACEG;EADF,CAAD,CADF;AAKF,CAhBO","names":["React","QueryClientContext","useQueryClient","queryClient","client","Error","QueryClientProvider","children","mount","unmount","Provider","value"],"sources":["/Users/andrew/node_modules/@tanstack/react-query/src/QueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): React.JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}