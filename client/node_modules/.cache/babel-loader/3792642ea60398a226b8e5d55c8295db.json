{"ast":null,"code":"\"use client\"; // src/useIsFetching.ts\n\nimport * as React from \"react\";\nimport { notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\n\nfunction useIsFetching(filters, queryClient) {\n  var client = useQueryClient(queryClient);\n  var queryCache = client.getQueryCache();\n  return React.useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return queryCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [queryCache]), function () {\n    return client.isFetching(filters);\n  }, function () {\n    return client.isFetching(filters);\n  });\n}\n\nexport { useIsFetching };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,SAASC,cAAT,QAA+B,0BAA/B;;AAGO,SAASC,aAAT,CACLC,OADK,EAELC,WAFK,EAGG;EACR,IAAMC,SAASJ,eAAeG,WAAf,CAAf;EACA,IAAME,aAAaD,OAAOE,aAAP,EAAnB;EAEA,OAAaR,2BACLA,kBACJ,UAACS,aAAD;IAAA,OACEF,WAAWG,SAAX,CAAqBT,cAAcU,UAAd,CAAyBF,aAAzB,CAArB,CADF;EAAA,CADI,EAGJ,CAACF,UAAD,CAHI,CADK,EAMX;IAAA,OAAMD,OAAOM,UAAP,CAAkBR,OAAlB,CAAN;EAAA,CANW,EAOX;IAAA,OAAME,OAAOM,UAAP,CAAkBR,OAAlB,CAAN;EAAA,CAPW,CAAb;AASF","names":["React","notifyManager","useQueryClient","useIsFetching","filters","queryClient","client","queryCache","getQueryCache","onStoreChange","subscribe","batchCalls","isFetching"],"sources":["/Users/andrew/node_modules/@tanstack/react-query/src/useIsFetching.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { notifyManager } from '@tanstack/query-core'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport type { QueryClient, QueryFilters } from '@tanstack/query-core'\n\nexport function useIsFetching(\n  filters?: QueryFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  const queryCache = client.getQueryCache()\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => client.isFetching(filters),\n    () => client.isFetching(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"module"}