{"ast":null,"code":"import { usePrevious } from \"./chunk-DEGB326C.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { useContainerContext } from \"./chunk-HTJMMZVM.mjs\";\nimport { NaverMapContext } from \"./chunk-OHKTFK4Q.mjs\";\nimport { EventTargetContext } from \"./chunk-YH7PRLMG.mjs\"; // src/naver-map.tsx\n\nimport pick from \"lodash.pick\";\nimport upperfirst from \"lodash.upperfirst\";\nimport { forwardRef, useImperativeHandle, useLayoutEffect, useRef, useState } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar basicMapOptionKeys = [\"background\", \"baseTileOpacity\", \"disableDoubleClickZoom\", \"disableDoubleTapZoom\", \"disableKineticPan\", \"disableTwoFingerTapZoom\", \"draggable\", \"keyboardShortcuts\", \"logoControl\", \"logoControlOptions\", \"mapDataControl\", \"mapDataControlOptions\", \"mapTypeControl\", \"mapTypeControlOptions\", \"mapTypes\", \"maxBounds\", \"maxZoom\", \"minZoom\", \"padding\", \"pinchZoom\", \"resizeOrigin\", \"scaleControl\", \"scaleControlOptions\", \"scrollWheel\", \"overlayZoomEffect\", \"tileSpare\", \"tileTransition\", \"zoomControl\", \"zoomControlOptions\", \"zoomOrigin\", \"blankTileImage\"];\nvar kvoKeys = [\"mapTypeId\", \"size\", \"bounds\", \"center\", \"zoom\", \"centerPoint\"];\nvar kvoEvents = [...kvoKeys.map(key => `${key}_changed`), \"mapType_changed\"];\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\", \"dragstart\", \"drag\", \"dragend\", \"touchstart\", \"touchmove\", \"touchend\", \"pinchstart\", \"pinch\", \"pinchend\", \"tap\", \"longtap\", \"twofingertap\", \"doubletap\"];\nvar mapOnlyEvents = [\"addLayer\", \"idle\", \"init\", \"keydown\", \"keyup\", \"panning\", \"projection_changed\", \"removeLayer\", \"resize\", \"tilesloaded\", \"zooming\"];\nvar events = [...uiEvents, ...kvoEvents, ...mapOnlyEvents];\nvar defaultOptionKeyMap = {\n  mapTypeId: \"defaultMapTypeId\",\n  size: \"defaultSize\",\n  bounds: \"defaultBounds\",\n  center: \"defaultCenter\",\n  zoom: \"defaultZoom\",\n  centerPoint: \"defaultCenterPoint\"\n};\nvar NaverMap = forwardRef(function NaverMap2(props, ref) {\n  const navermaps = useNavermaps();\n  const {\n    element: mapDiv\n  } = useContainerContext();\n  const [nmap, setNmap] = useState();\n  const nmapRef = useRef();\n  useLayoutEffect(() => {\n    if (!mapDiv) {\n      throw new Error(\"react-naver-maps: MapDiv is not found. Did you correctly wrap with `MapDiv`?\");\n    }\n\n    const basicMapOptions = pick(props, basicMapOptionKeys);\n    const kvos = kvoKeys.reduce((acc, key) => {\n      if (props[defaultOptionKeyMap[key]]) {\n        return { ...acc,\n          [key]: props[defaultOptionKeyMap[key]]\n        };\n      }\n\n      if (props[key]) {\n        return { ...acc,\n          [key]: props[key]\n        };\n      }\n\n      return acc;\n    }, {});\n\n    const _nmap = new navermaps.Map(mapDiv, { ...basicMapOptions,\n      ...kvos\n    });\n\n    setNmap(_nmap);\n    nmapRef.current = _nmap;\n    return () => {\n      _nmap.destroy();\n    };\n  }, []);\n  const uncontrolledOmittedProps = Object.keys(props).reduce((acc, key) => {\n    if (key in defaultOptionKeyMap && props[defaultOptionKeyMap[key]]) {\n      return acc;\n    }\n\n    return { ...acc,\n      [key]: props[key]\n    };\n  }, {});\n  useImperativeHandle(ref, () => nmapRef.current);\n  return /* @__PURE__ */jsx(Fragment, {\n    children: nmap && /* @__PURE__ */jsx(NaverMapCore, { ...uncontrolledOmittedProps,\n      nmap\n    })\n  });\n});\n\nfunction NaverMapCore(_ref) {\n  let {\n    nmap,\n    children,\n    ...mapProps\n  } = _ref;\n  const basicMapOptions = pick(mapProps, basicMapOptionKeys);\n  const {\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom\n  } = mapProps;\n  const prevKVOs = usePrevious({\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom\n  }, [mapTypeId, size, bounds, center, centerPoint, zoom]);\n\n  function getDirtyKVOs(keys) {\n    return keys.reduce((acc, key) => {\n      const currentValue = nmap[`get${upperfirst(key)}`]();\n      const propValue = mapProps[key];\n\n      if (!propValue || prevKVOs && prevKVOs[key] === propValue) {\n        return acc;\n      }\n\n      const isEqual = typeof currentValue.equals === \"function\" ? currentValue.equals(propValue) : currentValue === propValue;\n\n      if (isEqual) {\n        return acc;\n      }\n\n      return { ...acc,\n        [key]: propValue\n      };\n    }, {});\n  }\n\n  useLayoutEffect(() => {\n    nmap.setOptions(basicMapOptions);\n  }, [Object.values(basicMapOptions)]);\n  useLayoutEffect(() => {\n    const updated = getDirtyKVOs([\"size\"]).size;\n\n    if (updated) {\n      nmap.setSize(updated);\n    }\n  }, [size]);\n  useLayoutEffect(() => {\n    const updated = getDirtyKVOs([\"mapTypeId\"]).mapTypeId;\n\n    if (updated) {\n      nmap.setMapTypeId(updated);\n    }\n  }, [mapTypeId]);\n  useLayoutEffect(() => {\n    const dirties = getDirtyKVOs([\"bounds\", \"center\", \"centerPoint\", \"zoom\"]);\n\n    if (dirties.bounds) {\n      nmap.fitBounds(dirties.bounds);\n      return;\n    }\n\n    if (dirties.center && dirties.zoom) {\n      nmap.morph(dirties.center, dirties.zoom);\n      return;\n    }\n\n    if (dirties.centerPoint) {\n      nmap.setCenterPoint(dirties.centerPoint);\n    }\n\n    if (dirties.center) {\n      nmap.panTo(dirties.center, {});\n    }\n\n    if (dirties.zoom) {\n      nmap.setZoom(dirties.zoom);\n    }\n  }, [bounds, center, centerPoint, zoom]);\n  return /* @__PURE__ */jsx(NaverMapContext.Provider, {\n    value: nmap,\n    children: /* @__PURE__ */jsx(EventTargetContext.Provider, {\n      value: nmap,\n      children: /* @__PURE__ */jsxs(Fragment, {\n        children: [/* @__PURE__ */jsx(HandleEvents, {\n          events,\n          listeners: mapProps\n        }), children]\n      })\n    })\n  });\n}\n\nexport { NaverMap };","map":{"version":3,"mappings":"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","names":["pick","upperfirst","forwardRef","useImperativeHandle","useLayoutEffect","useRef","useState","jsx","jsxs","basicMapOptionKeys","kvoKeys","kvoEvents","map","key","uiEvents","mapOnlyEvents","events","defaultOptionKeyMap","mapTypeId","size","bounds","center","zoom","centerPoint","NaverMap","props","ref","navermaps","useNavermaps","element","mapDiv","useContainerContext","nmap","setNmap","nmapRef","Error","basicMapOptions","kvos","reduce","acc","_nmap","Map","current","destroy","uncontrolledOmittedProps","Object","keys","children","NaverMapCore","mapProps","prevKVOs","usePrevious","getDirtyKVOs","currentValue","propValue","isEqual","equals","setOptions","values","updated","setSize","setMapTypeId","dirties","fitBounds","morph","setCenterPoint","panTo","setZoom","NaverMapContext","Provider","value","EventTargetContext","HandleEvents","listeners"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/naver-map.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport upperfirst from 'lodash.upperfirst';\nimport { forwardRef, useImperativeHandle, useLayoutEffect, useRef, useState } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { useContainerContext } from './contexts/container';\nimport { EventTargetContext } from './contexts/event-target';\nimport { NaverMapContext } from './contexts/naver-map';\nimport { HandleEvents } from './helpers/event';\nimport { usePrevious } from './hooks/use-previous';\nimport { useNavermaps } from './use-navermaps';\n\ntype MapPaddingOptions = {\n  top?: number;\n  right?: number;\n  bottom?: number;\n  left?: number;\n};\n\ntype MapOptions = {\n  background?: string;\n  baseTileOpacity?: number;\n  /**\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral | null\n   */\n  bounds?: naver.maps.Bounds | naver.maps.BoundsLiteral | null;\n  /**\n   * @type naver.maps.Coord | naver.maps.CoordLiteral\n   */\n  center?: naver.maps.Coord | naver.maps.CoordLiteral;\n  disableDoubleClickZoom?: boolean;\n  disableDoubleTapZoom?: boolean;\n  disableKineticPan?: boolean;\n  disableTwoFingerTapZoom?: boolean;\n  draggable?: boolean;\n  keyboardShortcuts?: boolean;\n  logoControl?: boolean;\n  logoControlOptions?: naver.maps.LogoControlOptions;\n  mapDataControl?: boolean;\n  mapDataControlOptions?: naver.maps.MapDataControlOptions;\n  mapTypeControl?: boolean;\n  mapTypeControlOptions?: naver.maps.MapTypeControlOptions;\n  mapTypeId?: string;\n  mapTypes?: naver.maps.MapTypeRegistry;\n  maxBounds?: naver.maps.Bounds | naver.maps.BoundsLiteral | null;\n  maxZoom?: number;\n  minZoom?: number;\n  padding?: MapPaddingOptions;\n  pinchZoom?: boolean;\n  resizeOrigin?: naver.maps.Position;\n  scaleControl?: boolean;\n  scaleControlOptions?: naver.maps.ScaleControlOptions;\n  scrollWheel?: boolean;\n  size?: naver.maps.Size | naver.maps.SizeLiteral;\n  overlayZoomEffect?: string | null;\n  tileSpare?: number;\n  tileTransition?: boolean;\n  zoom?: number;\n  zoomControl?: boolean;\n  zoomControlOptions?: naver.maps.ZoomControlOptions;\n  zoomOrigin?: naver.maps.Coord | naver.maps.CoordLiteral | null;\n  blankTileImage?: string | null;\n\n  // special.\n  centerPoint?: naver.maps.Point | naver.maps.PointLiteral;\n};\n\ntype Uncontrolled = {\n  /**\n   * Uncontrolled prop of mapTypeId\n   */\n  defaultMapTypeId?: MapOptions['mapTypeId'];\n  /**\n   * Uncontrolled prop of size\n   * @type naver.maps.Coord | naver.maps.CoordLiteral\n   */\n  defaultSize?: MapOptions['size'];\n  /**\n   * Uncontrolled prop of bounds\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral | null\n   */\n  defaultBounds?: MapOptions['bounds'];\n  /**\n   * Uncontrolled prop of center\n   * @type naver.maps.Coord | naver.maps.CoordLiteral\n   */\n  defaultCenter?: MapOptions['center'];\n  /**\n   * Uncontrolled prop of zoom\n   */\n  defaultZoom?: MapOptions['zoom'];\n  /**\n   * Uncontrolled prop of centerPoint\n   * @type naver.maps.Point | naver.maps.PointLiteral\n   */\n  defaultCenterPoint?: MapOptions['centerPoint'];\n};\n\ntype MapEventCallbacks = {\n  onMapTypeIdChanged?: (value: string) => void;\n  onMapTypeChanged?: (value: naver.maps.MapType) => void;\n  onSizeChanged?: (value: naver.maps.Size) => void;\n  onBoundsChanged?: (value: naver.maps.Bounds) => void;\n  onCenterChanged?: (value: naver.maps.Coord) => void;\n  onCenterPointChanged?: (value: naver.maps.Point) => void;\n  onZoomChanged?: (value: number) => void;\n};\n\nconst basicMapOptionKeys: Array<keyof MapOptions> = [\n  'background',\n  'baseTileOpacity',\n  // 'bounds',\n  // 'center',\n  'disableDoubleClickZoom',\n  'disableDoubleTapZoom',\n  'disableKineticPan',\n  'disableTwoFingerTapZoom',\n  'draggable',\n  'keyboardShortcuts',\n  'logoControl',\n  'logoControlOptions',\n  'mapDataControl',\n  'mapDataControlOptions',\n  'mapTypeControl',\n  'mapTypeControlOptions',\n  // 'mapTypeId',\n  'mapTypes',\n  'maxBounds',\n  'maxZoom',\n  'minZoom',\n  'padding',\n  'pinchZoom',\n  'resizeOrigin',\n  'scaleControl',\n  'scaleControlOptions',\n  'scrollWheel',\n  // 'size',\n  'overlayZoomEffect',\n  'tileSpare',\n  'tileTransition',\n  // 'zoom',\n  'zoomControl',\n  'zoomControlOptions',\n  'zoomOrigin',\n  'blankTileImage',\n];\n\nconst kvoKeys = [\n  'mapTypeId',\n  'size',\n  'bounds',\n  'center',\n  'zoom',\n  'centerPoint',\n] as const;\n\nconst kvoEvents = [\n  ...kvoKeys.map(key => `${key}_changed`),\n  'mapType_changed', // special. https://navermaps.github.io/maps.js.ncp/docs/naver.maps.Map.html#event:mapType_changed__anchor\n];\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'dragstart',\n  'drag',\n  'dragend',\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'pinchstart',\n  'pinch',\n  'pinchend',\n  'tap',\n  'longtap',\n  'twofingertap',\n  'doubletap',\n] as const;\nconst mapOnlyEvents = [\n  'addLayer',\n  'idle',\n  'init',\n  'keydown',\n  'keyup',\n  'panning',\n  'projection_changed',\n  'removeLayer',\n  'resize',\n  'tilesloaded',\n  'zooming',\n] as const;\nconst events = [...uiEvents, ...kvoEvents, ...mapOnlyEvents];\n\n// type FunctionTypeChildren = (nmap: naver.maps.Map) => React.ReactNode;\n\nconst defaultOptionKeyMap = {\n  mapTypeId: 'defaultMapTypeId',\n  size: 'defaultSize',\n  bounds: 'defaultBounds',\n  center: 'defaultCenter',\n  zoom: 'defaultZoom',\n  centerPoint: 'defaultCenterPoint',\n} as const;\n\nexport type Props = Uncontrolled & {\n  /**\n   * Map 관련 components\n   */\n  children?: ReactNode;\n} & MapOptions & MapEventCallbacks;\n\nexport const NaverMap = forwardRef<naver.maps.Map | null, Props>(function NaverMap(props, ref) {\n  const navermaps = useNavermaps();\n  const { element: mapDiv } = useContainerContext();\n  const [nmap, setNmap] = useState<naver.maps.Map>();\n  const nmapRef = useRef<naver.maps.Map>();\n\n  // https://github.com/facebook/react/issues/20090\n  useLayoutEffect(() => {\n    if (!mapDiv) {\n      throw new Error('react-naver-maps: MapDiv is not found. Did you correctly wrap with `MapDiv`?');\n    }\n\n    const basicMapOptions = pick(props, basicMapOptionKeys);\n    const kvos = kvoKeys.reduce((acc, key) => {\n      // default kvo\n      if (props[defaultOptionKeyMap[key]]) {\n        return {\n          ...acc,\n          [key]: props[defaultOptionKeyMap[key]],\n        };\n      }\n\n      // kvo\n      if (props[key]) {\n        return {\n          ...acc,\n          [key]: props[key],\n        };\n      }\n\n      return acc;\n    }, {});\n\n    const _nmap = new navermaps.Map(mapDiv, { ...basicMapOptions, ...kvos });\n    setNmap(_nmap);\n    // for ref hack\n    nmapRef.current = _nmap;\n\n    return () => {\n      _nmap.destroy();\n    };\n  }, []);\n\n  const uncontrolledOmittedProps = (Object.keys(props) as Array<keyof Props>).reduce((acc, key) => {\n    // kvo key가 defaultKvo key와 함께 있을 경우 무시한다.\n    if (key in defaultOptionKeyMap && props[defaultOptionKeyMap[key as keyof typeof defaultOptionKeyMap]]) {\n      return acc;\n    }\n\n    return {\n      ...acc,\n      [key]: props[key],\n    };\n  }, {}) as Props;\n\n  // nmap 이 layoutEffect에서 생성되므로 항상 Map이 존재한다.\n  useImperativeHandle<naver.maps.Map | undefined, naver.maps.Map | undefined>(ref, () => nmapRef.current);\n\n  return (\n    <>{nmap && <NaverMapCore {...uncontrolledOmittedProps} nmap={nmap} />}</>\n  );\n});\n\nfunction NaverMapCore({ nmap, children, ...mapProps }: Props & { nmap: naver.maps.Map }) {\n  const basicMapOptions = pick(mapProps, basicMapOptionKeys);\n  const {\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom,\n  } = mapProps;\n\n  const prevKVOs = usePrevious({\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom,\n  }, [\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom,\n  ]);\n\n  function getDirtyKVOs(keys: Array<typeof kvoKeys[number]>): Pick<Props, typeof kvoKeys[number]> {\n    return keys.reduce((acc, key) => {\n      const currentValue = nmap[`get${upperfirst(key)}` as keyof naver.maps.Map]();\n      const propValue = mapProps[key];\n\n      if (!propValue || prevKVOs && prevKVOs[key] === propValue) {\n        return acc;\n      }\n\n      const isEqual = typeof currentValue.equals === 'function' ? currentValue.equals(propValue) : currentValue === propValue;\n\n      if (isEqual) {\n        return acc;\n      }\n\n      return {\n        ...acc,\n        [key]: propValue,\n      };\n    }, {} as Pick<Props, typeof kvoKeys[number]>);\n  }\n\n  useLayoutEffect(() => {\n    nmap.setOptions(basicMapOptions);\n  }, [Object.values(basicMapOptions)]);\n\n  useLayoutEffect(() => {\n    const updated = getDirtyKVOs(['size']).size;\n    if (updated) {\n      nmap.setSize(updated);\n    }\n  }, [size]);\n\n  useLayoutEffect(() => {\n    const updated = getDirtyKVOs(['mapTypeId']).mapTypeId;\n    if (updated) {\n      nmap.setMapTypeId(updated);\n    }\n  }, [mapTypeId]);\n\n  useLayoutEffect(() => {\n    const dirties = getDirtyKVOs(['bounds', 'center', 'centerPoint', 'zoom']);\n\n    if (dirties.bounds) {\n      // TODO\n      nmap.fitBounds(dirties.bounds);\n\n      // Ignore rest kvos\n      return;\n    }\n\n    if (dirties.center && dirties.zoom) {\n\n      nmap.morph(dirties.center, dirties.zoom);\n\n      // Ignore rest kvos\n      return;\n    }\n\n    if (dirties.centerPoint) {\n      nmap.setCenterPoint(dirties.centerPoint);\n    }\n\n    if (dirties.center) {\n      // TODO\n      nmap.panTo(dirties.center, {});\n    }\n\n    if (dirties.zoom) {\n      nmap.setZoom(dirties.zoom);\n    }\n  }, [bounds, center, centerPoint, zoom]);\n\n  return (\n    <NaverMapContext.Provider value={nmap}>\n      <EventTargetContext.Provider value={nmap}>\n        <>\n          <HandleEvents\n            events={events}\n            listeners={mapProps as any}\n          />\n          {children}\n        </>\n      </EventTargetContext.Provider>\n    </NaverMapContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}