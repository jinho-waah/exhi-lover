import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { onSpaceOrEnter, useLocaleText } from '@mui/x-date-pickers/internals';
export var useRangePickerInputProps = function useRangePickerInputProps(_ref) {
  var _inLocaleText$start, _inLocaleText$end;
  var wrapperVariant = _ref.wrapperVariant,
    open = _ref.open,
    actions = _ref.actions,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    disableOpenPicker = _ref.disableOpenPicker,
    onBlur = _ref.onBlur,
    rangePosition = _ref.rangePosition,
    onRangePositionChange = _ref.onRangePositionChange,
    inLocaleText = _ref.localeText;
  var localeText = useLocaleText();
  var startRef = React.useRef(null);
  var endRef = React.useRef(null);
  React.useEffect(function () {
    if (!open) {
      return;
    }
    if (rangePosition === 'start') {
      var _startRef$current;
      (_startRef$current = startRef.current) == null ? void 0 : _startRef$current.focus();
    } else if (rangePosition === 'end') {
      var _endRef$current;
      (_endRef$current = endRef.current) == null ? void 0 : _endRef$current.focus();
    }
  }, [rangePosition, open]);
  var openRangeStartSelection = function openRangeStartSelection(event) {
    event.stopPropagation();
    onRangePositionChange('start');
    if (!readOnly && !disableOpenPicker) {
      actions.onOpen();
    }
  };
  var openRangeEndSelection = function openRangeEndSelection(event) {
    event.stopPropagation();
    onRangePositionChange('end');
    if (!readOnly && !disableOpenPicker) {
      actions.onOpen();
    }
  };
  var focusOnRangeStart = function focusOnRangeStart() {
    if (open) {
      onRangePositionChange('start');
    }
  };
  var focusOnRangeEnd = function focusOnRangeEnd() {
    if (open) {
      onRangePositionChange('end');
    }
  };
  var readOnlyInput = readOnly != null ? readOnly : wrapperVariant === 'mobile';
  var startInputProps = _extends({
    inputRef: startRef,
    label: (_inLocaleText$start = inLocaleText == null ? void 0 : inLocaleText.start) != null ? _inLocaleText$start : localeText.start,
    onKeyDown: onSpaceOrEnter(openRangeStartSelection),
    onFocus: focusOnRangeStart,
    focused: open ? rangePosition === 'start' : undefined
  }, !readOnly && !disabled && {
    onClick: openRangeStartSelection
  }, {
    readOnly: readOnlyInput,
    disabled: disabled
  });
  var endInputProps = _extends({
    inputRef: endRef,
    label: (_inLocaleText$end = inLocaleText == null ? void 0 : inLocaleText.end) != null ? _inLocaleText$end : localeText.end,
    onKeyDown: onSpaceOrEnter(openRangeEndSelection),
    onFocus: focusOnRangeEnd,
    focused: open ? rangePosition === 'end' : undefined
  }, !readOnly && !disabled && {
    onClick: openRangeEndSelection
  }, {
    readOnly: readOnlyInput,
    disabled: disabled
  });
  var rootProps = {
    onBlur: onBlur
  };
  return {
    startInput: startInputProps,
    endInput: endInputProps,
    root: rootProps
  };
};