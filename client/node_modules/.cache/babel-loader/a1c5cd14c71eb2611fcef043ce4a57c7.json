{"ast":null,"code":"import * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst VariantColorContext = /*#__PURE__*/React.createContext(undefined);\n/**\n * @internal For internal usage only.\n *\n * Use this function in a slot to get the matched default variant and color when the parent's variant and/or color changes.\n */\n\nexport function getChildVariantAndColor(parentVariant, parentColor) {\n  let childColor = parentColor;\n  let childVariant = parentVariant;\n\n  if (parentVariant === 'outlined') {\n    childColor = 'neutral';\n    childVariant = 'plain';\n  }\n\n  if (parentVariant === 'plain') {\n    childColor = 'neutral';\n  }\n\n  return {\n    variant: childVariant,\n    color: childColor\n  };\n}\n/**\n * @internal For internal usage only.\n *\n * This hook should be used in a children that are connected with its parent\n * to get the matched default variant and color when the parent's variant and/or color changes.\n *\n * For example, the `Option` component in `Select` component is using this function.\n */\n\nexport function useVariantColor(instanceVariant, instanceColor) {\n  const value = React.useContext(VariantColorContext);\n  const [variant, color] = typeof value === 'string' ? value.split(':') : [];\n  const result = getChildVariantAndColor(variant || undefined, color || undefined);\n  result.variant = instanceVariant || result.variant;\n  result.color = instanceColor || result.color;\n  return result;\n}\n/**\n * @internal For internal usage only.\n */\n\nexport function VariantColorProvider(_ref) {\n  let {\n    children,\n    color,\n    variant\n  } = _ref;\n  return /*#__PURE__*/_jsx(VariantColorContext.Provider, {\n    value: `${variant || ''}:${color || ''}`,\n    children: children\n  });\n}","map":{"version":3,"names":["React","jsx","_jsx","VariantColorContext","createContext","undefined","getChildVariantAndColor","parentVariant","parentColor","childColor","childVariant","variant","color","useVariantColor","instanceVariant","instanceColor","value","useContext","split","result","VariantColorProvider","children","Provider"],"sources":["/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@mui/joy/styles/variantColorInheritance.js"],"sourcesContent":["import * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst VariantColorContext = /*#__PURE__*/React.createContext(undefined);\n\n/**\n * @internal For internal usage only.\n *\n * Use this function in a slot to get the matched default variant and color when the parent's variant and/or color changes.\n */\nexport function getChildVariantAndColor(parentVariant, parentColor) {\n  let childColor = parentColor;\n  let childVariant = parentVariant;\n  if (parentVariant === 'outlined') {\n    childColor = 'neutral';\n    childVariant = 'plain';\n  }\n  if (parentVariant === 'plain') {\n    childColor = 'neutral';\n  }\n  return {\n    variant: childVariant,\n    color: childColor\n  };\n}\n\n/**\n * @internal For internal usage only.\n *\n * This hook should be used in a children that are connected with its parent\n * to get the matched default variant and color when the parent's variant and/or color changes.\n *\n * For example, the `Option` component in `Select` component is using this function.\n */\nexport function useVariantColor(instanceVariant, instanceColor) {\n  const value = React.useContext(VariantColorContext);\n  const [variant, color] = typeof value === 'string' ? value.split(':') : [];\n  const result = getChildVariantAndColor(variant || undefined, color || undefined);\n  result.variant = instanceVariant || result.variant;\n  result.color = instanceColor || result.color;\n  return result;\n}\n\n/**\n * @internal For internal usage only.\n */\nexport function VariantColorProvider({\n  children,\n  color,\n  variant\n}) {\n  return /*#__PURE__*/_jsx(VariantColorContext.Provider, {\n    value: `${variant || ''}:${color || ''}`,\n    children: children\n  });\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,mBAAmB,GAAG,aAAaH,KAAK,CAACI,aAAN,CAAoBC,SAApB,CAAzC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,aAAjC,EAAgDC,WAAhD,EAA6D;EAClE,IAAIC,UAAU,GAAGD,WAAjB;EACA,IAAIE,YAAY,GAAGH,aAAnB;;EACA,IAAIA,aAAa,KAAK,UAAtB,EAAkC;IAChCE,UAAU,GAAG,SAAb;IACAC,YAAY,GAAG,OAAf;EACD;;EACD,IAAIH,aAAa,KAAK,OAAtB,EAA+B;IAC7BE,UAAU,GAAG,SAAb;EACD;;EACD,OAAO;IACLE,OAAO,EAAED,YADJ;IAELE,KAAK,EAAEH;EAFF,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,eAAT,CAAyBC,eAAzB,EAA0CC,aAA1C,EAAyD;EAC9D,MAAMC,KAAK,GAAGhB,KAAK,CAACiB,UAAN,CAAiBd,mBAAjB,CAAd;EACA,MAAM,CAACQ,OAAD,EAAUC,KAAV,IAAmB,OAAOI,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACE,KAAN,CAAY,GAAZ,CAA5B,GAA+C,EAAxE;EACA,MAAMC,MAAM,GAAGb,uBAAuB,CAACK,OAAO,IAAIN,SAAZ,EAAuBO,KAAK,IAAIP,SAAhC,CAAtC;EACAc,MAAM,CAACR,OAAP,GAAiBG,eAAe,IAAIK,MAAM,CAACR,OAA3C;EACAQ,MAAM,CAACP,KAAP,GAAeG,aAAa,IAAII,MAAM,CAACP,KAAvC;EACA,OAAOO,MAAP;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,OAIJ;EAAA,IAJkC;IACnCC,QADmC;IAEnCT,KAFmC;IAGnCD;EAHmC,CAIlC;EACD,OAAO,aAAaT,IAAI,CAACC,mBAAmB,CAACmB,QAArB,EAA+B;IACrDN,KAAK,EAAG,GAAEL,OAAO,IAAI,EAAG,IAAGC,KAAK,IAAI,EAAG,EADc;IAErDS,QAAQ,EAAEA;EAF2C,CAA/B,CAAxB;AAID"},"metadata":{},"sourceType":"module"}