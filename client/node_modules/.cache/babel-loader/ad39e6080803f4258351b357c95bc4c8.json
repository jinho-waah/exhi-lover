{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n_c = TemplateBlock;\n\nconst PostTemplate = _ref => {\n  _s();\n\n  let {\n    shows\n  } = _ref;\n  const [tags, setTags] = useState(null);\n  const [tagsId, setTagsId] = useState(null);\n  const [error, setError] = useState(null);\n  const fetchTag = useCallback(async () => {\n    try {\n      setError(null);\n\n      if (tagsId !== null) {\n        const tagData = await axios.all(tagsId.map(_ref2 => {\n          let {\n            exhibition_id,\n            tags\n          } = _ref2;\n          return axios.get(`http://localhost:5100/api/tags/${tags.join(\",\")}`);\n        }));\n        setTags(tagData.reduce((acc, response, index) => {\n          const {\n            exhibition_id\n          } = tagsId[index];\n          const tagNames = response.data.map(tag => tag.tag_name);\n          acc[exhibition_id] = tagNames;\n          return acc;\n        }, {}));\n      }\n    } catch (e) {\n      setError(e);\n    }\n  }, [tagsId]);\n  useEffect(() => {\n    const fetchTagsId = async () => {\n      try {\n        setError(null);\n        const tagsIdData = await axios.all(shows.map(_ref3 => {\n          let {\n            id\n          } = _ref3;\n          return axios.get(`http://localhost:5100/api/exhibition_tags/${id}`);\n        }));\n        const tagsIdArray = tagsIdData.map(response => response.data).flat().reduce((acc, _ref4) => {\n          let {\n            exhibition_id,\n            tag_id\n          } = _ref4;\n          const index = acc.findIndex(obj => obj.exhibition_id === exhibition_id);\n\n          if (index === -1) {\n            acc.push({\n              exhibition_id,\n              tags: [tag_id]\n            });\n          } else {\n            acc[index].tags.push(tag_id);\n          }\n\n          return acc;\n        }, []);\n        setTagsId(tagsIdArray);\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    fetchTagsId();\n  }, [shows]);\n  useEffect(() => {\n    fetchTag();\n  }, [fetchTag]);\n  console.log(\"tagsid\", tagsId);\n  console.log(\"tags\", tags);\n  return /*#__PURE__*/_jsxDEV(TemplateBlock, {\n    children: shows.map((show, index) => {\n      const key = `${show.show_name}`; // create unique key prop value\n\n      const colorIndex = index % colorSet.length; // determine color index based on position in array\n\n      const color = colorSet[colorIndex]; // get color from colorSet array\n\n      return /*#__PURE__*/_jsxDEV(Post, {\n        show: show,\n        color: color,\n        tags: tags && tags[show.id]\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this); // pass color as prop to Post component\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostTemplate, \"zwZJUCmiX1AsbB49aoQ2MUADlF0=\");\n\n_c2 = PostTemplate;\nexport default PostTemplate;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TemplateBlock\");\n$RefreshReg$(_c2, \"PostTemplate\");","map":{"version":3,"names":["styled","Post","colorSet","useCallback","useEffect","useState","axios","TemplateBlock","div","PostTemplate","shows","tags","setTags","tagsId","setTagsId","error","setError","fetchTag","tagData","all","map","exhibition_id","get","join","reduce","acc","response","index","tagNames","data","tag","tag_name","e","fetchTagsId","tagsIdData","id","tagsIdArray","flat","tag_id","findIndex","obj","push","console","log","show","key","show_name","colorIndex","length","color"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js"],"sourcesContent":["import styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n\nconst PostTemplate = ({ shows }) => {\n  const [tags, setTags] = useState(null);\n  const [tagsId, setTagsId] = useState(null);\n  const [error, setError] = useState(null);\n\n  const fetchTag = useCallback(async () => {\n    try {\n      setError(null);\n      if (tagsId !== null) {\n        const tagData = await axios.all(\n          tagsId.map(({ exhibition_id, tags }) =>\n            axios.get(`http://localhost:5100/api/tags/${tags.join(\",\")}`)\n          )\n        );\n        setTags(\n          tagData.reduce((acc, response, index) => {\n            const { exhibition_id } = tagsId[index];\n            const tagNames = response.data.map((tag) => tag.tag_name);\n            acc[exhibition_id] = tagNames;\n            return acc;\n          }, {})\n        );\n      }\n    } catch (e) {\n      setError(e);\n    }\n  }, [tagsId]);\n\n  useEffect(() => {\n    const fetchTagsId = async () => {\n      try {\n        setError(null);\n        const tagsIdData = await axios.all(\n          shows.map(({ id }) =>\n            axios.get(`http://localhost:5100/api/exhibition_tags/${id}`)\n          )\n        );\n        const tagsIdArray = tagsIdData\n          .map((response) => response.data)\n          .flat()\n          .reduce((acc, { exhibition_id, tag_id }) => {\n            const index = acc.findIndex(\n              (obj) => obj.exhibition_id === exhibition_id\n            );\n            if (index === -1) {\n              acc.push({ exhibition_id, tags: [tag_id] });\n            } else {\n              acc[index].tags.push(tag_id);\n            }\n            return acc;\n          }, []);\n        setTagsId(tagsIdArray);\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    fetchTagsId();\n  }, [shows]);\n\n  useEffect(() => {\n    fetchTag();\n  }, [fetchTag]);\n\n  console.log(\"tagsid\", tagsId);\n  console.log(\"tags\", tags);\n\n  return (\n    <TemplateBlock>\n      {shows.map((show, index) => {\n        const key = `${show.show_name}`; // create unique key prop value\n        const colorIndex = index % colorSet.length; // determine color index based on position in array\n        const color = colorSet[colorIndex]; // get color from colorSet array\n        return (\n          <Post\n            show={show}\n            key={key}\n            color={color}\n            tags={tags && tags[show.id]}\n          />\n        ); // pass color as prop to Post component\n      })}\n    </TemplateBlock>\n  );\n};\n\nexport default PostTemplate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}