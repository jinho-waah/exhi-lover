{"ast":null,"code":"import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseKeyError, showInvalidLicenseKeyError, showMissingLicenseKeyError, showLicenseKeyPlanMismatchError, showExpiredPackageVersionError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport const sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    const licenseKey = LicenseInfo.getLicenseKey();\n\n    if (sharedLicenseStatuses[packageName] && sharedLicenseStatuses[packageName].key === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n\n    const acceptedScopes = packageName.includes('premium') ? ['premium'] : ['pro', 'premium'];\n    const plan = packageName.includes('premium') ? 'Premium' : 'Pro';\n    const licenseStatus = verifyLicense({\n      releaseInfo,\n      licenseKey,\n      acceptedScopes,\n      isProduction: process.env.NODE_ENV === 'production'\n    });\n    sharedLicenseStatuses[packageName] = {\n      key: licenseKey,\n      status: licenseStatus\n    };\n    const fullPackageName = `@mui/${packageName}`;\n\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseKeyError();\n    } else if (licenseStatus === LicenseStatus.OutOfScope) {\n      showLicenseKeyPlanMismatchError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showMissingLicenseKeyError({\n        plan,\n        packageName: fullPackageName\n      });\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseKeyError();\n    } else if (licenseStatus === LicenseStatus.ExpiredVersion) {\n      showExpiredPackageVersionError({\n        packageName: fullPackageName\n      });\n    }\n\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}","map":{"version":3,"names":["React","verifyLicense","LicenseInfo","showExpiredLicenseKeyError","showInvalidLicenseKeyError","showMissingLicenseKeyError","showLicenseKeyPlanMismatchError","showExpiredPackageVersionError","LicenseStatus","sharedLicenseStatuses","useLicenseVerifier","packageName","releaseInfo","useMemo","licenseKey","getLicenseKey","key","status","acceptedScopes","includes","plan","licenseStatus","isProduction","process","env","NODE_ENV","fullPackageName","Invalid","OutOfScope","NotFound","Expired","ExpiredVersion"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/@mui/x-license-pro/useLicenseVerifier/useLicenseVerifier.js"],"sourcesContent":["import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseKeyError, showInvalidLicenseKeyError, showMissingLicenseKeyError, showLicenseKeyPlanMismatchError, showExpiredPackageVersionError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport const sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    const licenseKey = LicenseInfo.getLicenseKey();\n    if (sharedLicenseStatuses[packageName] && sharedLicenseStatuses[packageName].key === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n    const acceptedScopes = packageName.includes('premium') ? ['premium'] : ['pro', 'premium'];\n    const plan = packageName.includes('premium') ? 'Premium' : 'Pro';\n    const licenseStatus = verifyLicense({\n      releaseInfo,\n      licenseKey,\n      acceptedScopes,\n      isProduction: process.env.NODE_ENV === 'production'\n    });\n    sharedLicenseStatuses[packageName] = {\n      key: licenseKey,\n      status: licenseStatus\n    };\n    const fullPackageName = `@mui/${packageName}`;\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseKeyError();\n    } else if (licenseStatus === LicenseStatus.OutOfScope) {\n      showLicenseKeyPlanMismatchError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showMissingLicenseKeyError({\n        plan,\n        packageName: fullPackageName\n      });\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseKeyError();\n    } else if (licenseStatus === LicenseStatus.ExpiredVersion) {\n      showExpiredPackageVersionError({\n        packageName: fullPackageName\n      });\n    }\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,0BAAT,EAAqCC,0BAArC,EAAiEC,0BAAjE,EAA6FC,+BAA7F,EAA8HC,8BAA9H,QAAoK,mCAApK;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,MAAMC,qBAAqB,GAAG,EAA9B;AACP,OAAO,SAASC,kBAAT,CAA4BC,WAA5B,EAAyCC,WAAzC,EAAsD;EAC3D,OAAOZ,KAAK,CAACa,OAAN,CAAc,MAAM;IACzB,MAAMC,UAAU,GAAGZ,WAAW,CAACa,aAAZ,EAAnB;;IACA,IAAIN,qBAAqB,CAACE,WAAD,CAArB,IAAsCF,qBAAqB,CAACE,WAAD,CAArB,CAAmCK,GAAnC,KAA2CF,UAArF,EAAiG;MAC/F,OAAOL,qBAAqB,CAACE,WAAD,CAArB,CAAmCM,MAA1C;IACD;;IACD,MAAMC,cAAc,GAAGP,WAAW,CAACQ,QAAZ,CAAqB,SAArB,IAAkC,CAAC,SAAD,CAAlC,GAAgD,CAAC,KAAD,EAAQ,SAAR,CAAvE;IACA,MAAMC,IAAI,GAAGT,WAAW,CAACQ,QAAZ,CAAqB,SAArB,IAAkC,SAAlC,GAA8C,KAA3D;IACA,MAAME,aAAa,GAAGpB,aAAa,CAAC;MAClCW,WADkC;MAElCE,UAFkC;MAGlCI,cAHkC;MAIlCI,YAAY,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;IAJL,CAAD,CAAnC;IAMAhB,qBAAqB,CAACE,WAAD,CAArB,GAAqC;MACnCK,GAAG,EAAEF,UAD8B;MAEnCG,MAAM,EAAEI;IAF2B,CAArC;IAIA,MAAMK,eAAe,GAAI,QAAOf,WAAY,EAA5C;;IACA,IAAIU,aAAa,KAAKb,aAAa,CAACmB,OAApC,EAA6C;MAC3CvB,0BAA0B;IAC3B,CAFD,MAEO,IAAIiB,aAAa,KAAKb,aAAa,CAACoB,UAApC,EAAgD;MACrDtB,+BAA+B;IAChC,CAFM,MAEA,IAAIe,aAAa,KAAKb,aAAa,CAACqB,QAApC,EAA8C;MACnDxB,0BAA0B,CAAC;QACzBe,IADyB;QAEzBT,WAAW,EAAEe;MAFY,CAAD,CAA1B;IAID,CALM,MAKA,IAAIL,aAAa,KAAKb,aAAa,CAACsB,OAApC,EAA6C;MAClD3B,0BAA0B;IAC3B,CAFM,MAEA,IAAIkB,aAAa,KAAKb,aAAa,CAACuB,cAApC,EAAoD;MACzDxB,8BAA8B,CAAC;QAC7BI,WAAW,EAAEe;MADgB,CAAD,CAA9B;IAGD;;IACD,OAAOL,aAAP;EACD,CAnCM,EAmCJ,CAACV,WAAD,EAAcC,WAAd,CAnCI,CAAP;AAoCD"},"metadata":{},"sourceType":"module"}