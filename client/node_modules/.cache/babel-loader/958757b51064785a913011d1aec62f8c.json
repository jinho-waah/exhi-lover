{"ast":null,"code":"// src/utils/uncontrolled.ts\nimport camelcase from \"camelcase\";\n\nfunction getUncontrolledKey(key) {\n  return camelcase(`default_${key}`);\n}\n\nfunction makeUncontrolledKeyMap(keys) {\n  return keys.reduce((acc, key) => ({ ...acc,\n    [getUncontrolledKey(key)]: key\n  }), {});\n}\n\nexport { getUncontrolledKey, makeUncontrolledKeyMap };","map":{"version":3,"mappings":";AAAA,OAAOA,SAAP,MAAsB,WAAtB;;AAIO,SAASC,kBAAT,CAA8CC,GAA9C,EAA0E;EAC/E,OAAOF,UAAU,WAAWE,KAArB,CAAP;AACF;;AAEO,SAASC,sBAAT,CAA6DC,IAA7D,EAAsE;EAC3E,OAAOA,KAAKC,MAAL,CAAY,CAACC,GAAD,EAAMJ,GAAN,MAAe,EAAE,GAAGI,GAAL;IAAU,CAACL,mBAAmBC,GAAnB,CAAD,GAA2BA;EAArC,CAAf,CAAZ,EAAwE,EAAxE,CAAP;AAGF","names":["camelcase","getUncontrolledKey","key","makeUncontrolledKeyMap","keys","reduce","acc"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/utils/uncontrolled.ts"],"sourcesContent":["import camelcase from 'camelcase';\n\nexport type UncontrolledKey<T extends string> = `default${Capitalize<T>}`;\n\nexport function getUncontrolledKey<T extends string>(key: T): UncontrolledKey<T> {\n  return camelcase(`default_${key}`) as UncontrolledKey<T>;\n}\n\nexport function makeUncontrolledKeyMap<T extends readonly string[]>(keys: T) {\n  return keys.reduce((acc, key) => ({ ...acc, [getUncontrolledKey(key)]: key }), {}) as {\n    [key in typeof keys[number] as UncontrolledKey<key>]: key;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}