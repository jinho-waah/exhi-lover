{"ast":null,"code":"// src/utils.ts\nvar isServer = typeof window === \"undefined\" || \"Deno\" in globalThis;\n\nfunction noop() {\n  return void 0;\n}\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === \"function\" ? updater(input) : updater;\n}\n\nfunction isValidTimeout(value) {\n  return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\n\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\n\nfunction resolveStaleTime(staleTime, query) {\n  return typeof staleTime === \"function\" ? staleTime(query) : staleTime;\n}\n\nfunction resolveEnabled(enabled, query) {\n  return typeof enabled === \"function\" ? enabled(query) : enabled;\n}\n\nfunction matchQuery(filters, query) {\n  const {\n    type = \"all\",\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== \"all\") {\n    const isActive = query.isActive();\n\n    if (type === \"active\" && !isActive) {\n      return false;\n    }\n\n    if (type === \"inactive\" && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    status,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = options?.queryKeyHashFn || hashKey;\n  return hashFn(queryKey);\n}\n\nfunction hashKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n\nfunction partialMatchKey(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    return !Object.keys(b).some(key => !partialMatchKey(a[key], b[key]));\n  }\n\n  return false;\n}\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aItems = array ? a : Object.keys(a);\n    const aSize = aItems.length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n\n      if ((!array && aItems.includes(key) || array) && a[key] === void 0 && b[key] === void 0) {\n        copy[key] = void 0;\n        equalItems++;\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key]);\n\n        if (copy[key] === a[key] && a[key] !== void 0) {\n          equalItems++;\n        }\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n\nfunction shallowEqualObjects(a, b) {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n}\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  }\n\n  const ctor = o.constructor;\n\n  if (ctor === void 0) {\n    return true;\n  }\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  }\n\n  if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  }\n\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === \"[object Object]\";\n}\n\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction replaceData(prevData, data, options) {\n  if (typeof options.structuralSharing === \"function\") {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== \"production\") {\n      try {\n        return replaceEqualDeep(prevData, data);\n      } catch (error) {\n        console.error(`Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`);\n      }\n    }\n\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nfunction keepPreviousData(previousData) {\n  return previousData;\n}\n\nfunction addToEnd(items, item) {\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const newItems = [...items, item];\n  return max && newItems.length > max ? newItems.slice(1) : newItems;\n}\n\nfunction addToStart(items, item) {\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const newItems = [item, ...items];\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n}\n\nvar skipToken = Symbol();\n\nfunction ensureQueryFn(options, fetchOptions) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (options.queryFn === skipToken) {\n      console.error(`Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`);\n    }\n  }\n\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise;\n  }\n\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () => Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));\n  }\n\n  return options.queryFn;\n}\n\nexport { addToEnd, addToStart, ensureQueryFn, functionalUpdate, hashKey, hashQueryKeyByOptions, isPlainArray, isPlainObject, isServer, isValidTimeout, keepPreviousData, matchMutation, matchQuery, noop, partialMatchKey, replaceData, replaceEqualDeep, resolveEnabled, resolveStaleTime, shallowEqualObjects, skipToken, sleep, timeUntilStale };","map":{"version":3,"mappings":"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","names":["isServer","window","globalThis","noop","functionalUpdate","updater","input","isValidTimeout","value","Infinity","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","resolveStaleTime","query","resolveEnabled","enabled","matchQuery","filters","type","exact","fetchStatus","predicate","queryKey","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","status","mutationKey","hashKey","hashFn","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","some","replaceEqualDeep","array","isPlainArray","aItems","aSize","length","bItems","bSize","copy","equalItems","i","includes","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","getPrototypeOf","toString","call","sleep","timeout","Promise","resolve","setTimeout","replaceData","prevData","data","structuralSharing","process","env","NODE_ENV","error","console","keepPreviousData","previousData","addToEnd","items","item","newItems","slice","addToStart","skipToken","Symbol","ensureQueryFn","fetchOptions","queryFn","initialPromise","reject","Error"],"sources":["/Users/andrew/node_modules/@tanstack/query-core/src/utils.ts"],"sourcesContent":["import type {\n  DefaultError,\n  Enabled,\n  FetchStatus,\n  MutationKey,\n  MutationStatus,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n  StaleTime,\n} from './types'\nimport type { Mutation } from './mutation'\nimport type { FetchOptions, Query } from './query'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Filter by mutation status\n   */\n  status?: MutationStatus\n}\n\nexport type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput)\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in globalThis\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: TInput) => TOutput)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function resolveStaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  staleTime: undefined | StaleTime<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): number | undefined {\n  return typeof staleTime === 'function' ? staleTime(query) : staleTime\n}\n\nexport function resolveEnabled<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  enabled: undefined | Enabled<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): boolean | undefined {\n  return typeof enabled === 'function' ? enabled(query) : enabled\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: Pick<QueryOptions<any, any, any, any>, 'queryKeyHashFn'>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query & mutation keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some((key) => !partialMatchKey(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aItems = array ? a : Object.keys(a)\n    const aSize = aItems.length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      if (\n        ((!array && aItems.includes(key)) || array) &&\n        a[key] === undefined &&\n        b[key] === undefined\n      ) {\n        copy[key] = undefined\n        equalItems++\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key])\n        if (copy[key] === a[key] && a[key] !== undefined) {\n          equalItems++\n        }\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects.\n */\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\n// eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has no constructor\n  const ctor = o.constructor\n  if (ctor === undefined) {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Handles Objects created by Object.create(<arbitrary prototype>)\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data) as TData\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        return replaceEqualDeep(prevData, data)\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`,\n        )\n      }\n    }\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n\nexport function keepPreviousData<T>(\n  previousData: T | undefined,\n): T | undefined {\n  return previousData\n}\n\nexport function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [...items, item]\n  return max && newItems.length > max ? newItems.slice(1) : newItems\n}\n\nexport function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [item, ...items]\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems\n}\n\nexport const skipToken = Symbol()\nexport type SkipToken = typeof skipToken\n\nexport function ensureQueryFn<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: {\n    queryFn?: QueryFunction<TQueryFnData, TQueryKey> | SkipToken\n    queryHash?: string\n  },\n  fetchOptions?: FetchOptions<TQueryFnData>,\n): QueryFunction<TQueryFnData, TQueryKey> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`,\n      )\n    }\n  }\n\n  // if we attempt to retry a fetch that was triggered from an initialPromise\n  // when we don't have a queryFn yet, we can't retry, so we just return the already rejected initialPromise\n  // if an observer has already mounted, we will be able to retry with that queryFn\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise!\n  }\n\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () =>\n      Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`))\n  }\n\n  return options.queryFn\n}\n"]},"metadata":{},"sourceType":"module"}