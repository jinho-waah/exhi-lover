{"ast":null,"code":"\"use client\"; // src/useQueries.ts\n\nimport _slicedToArray from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"queries\"];\nimport * as React from \"react\";\nimport { QueriesObserver, QueryObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { useIsRestoring } from \"./isRestoring.js\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.js\";\nimport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary } from \"./errorBoundaryUtils.js\";\nimport { ensureSuspenseTimers, fetchOptimistic, shouldSuspend, willFetch } from \"./suspense.js\";\n\nfunction useQueries(_ref, queryClient) {\n  var queries = _ref.queries,\n      options = _objectWithoutProperties(_ref, _excluded);\n\n  var client = useQueryClient(queryClient);\n  var isRestoring = useIsRestoring();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedQueries = React.useMemo(function () {\n    return queries.map(function (opts) {\n      var defaultedOptions = client.defaultQueryOptions(opts);\n      defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n      return defaultedOptions;\n    });\n  }, [queries, client, isRestoring]);\n  defaultedQueries.forEach(function (query) {\n    ensureSuspenseTimers(query);\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary);\n  });\n  useClearResetErrorBoundary(errorResetBoundary);\n\n  var _React$useState = React.useState(function () {\n    return new QueriesObserver(client, defaultedQueries, options);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      observer = _React$useState2[0];\n\n  var _observer$getOptimist = observer.getOptimisticResult(defaultedQueries, options.combine),\n      _observer$getOptimist2 = _slicedToArray(_observer$getOptimist, 3),\n      optimisticResult = _observer$getOptimist2[0],\n      getCombinedResult = _observer$getOptimist2[1],\n      trackResult = _observer$getOptimist2[2];\n\n  React.useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return isRestoring ? function () {\n      return void 0;\n    } : observer.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [observer, isRestoring]), function () {\n    return observer.getCurrentResult();\n  }, function () {\n    return observer.getCurrentResult();\n  });\n  React.useEffect(function () {\n    observer.setQueries(defaultedQueries, options, {\n      listeners: false\n    });\n  }, [defaultedQueries, options, observer]);\n  var shouldAtLeastOneSuspend = optimisticResult.some(function (result, index) {\n    return shouldSuspend(defaultedQueries[index], result);\n  });\n  var suspensePromises = shouldAtLeastOneSuspend ? optimisticResult.flatMap(function (result, index) {\n    var opts = defaultedQueries[index];\n\n    if (opts) {\n      var queryObserver = new QueryObserver(client, opts);\n\n      if (shouldSuspend(opts, result)) {\n        return fetchOptimistic(opts, queryObserver, errorResetBoundary);\n      } else if (willFetch(result, isRestoring)) {\n        void fetchOptimistic(opts, queryObserver, errorResetBoundary);\n      }\n    }\n\n    return [];\n  }) : [];\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises);\n  }\n\n  var firstSingleResultWhichShouldThrow = optimisticResult.find(function (result, index) {\n    var query = defaultedQueries[index];\n    return query && getHasError({\n      result: result,\n      errorResetBoundary: errorResetBoundary,\n      throwOnError: query.throwOnError,\n      query: client.getQueryCache().get(query.queryHash)\n    });\n  });\n\n  if (firstSingleResultWhichShouldThrow !== null && firstSingleResultWhichShouldThrow !== void 0 && firstSingleResultWhichShouldThrow.error) {\n    throw firstSingleResultWhichShouldThrow.error;\n  }\n\n  return getCombinedResult(trackResult());\n}\n\nexport { useQueries };","map":{"version":3,"mappings":"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","names":["React","QueriesObserver","QueryObserver","notifyManager","useQueryClient","useIsRestoring","useQueryErrorResetBoundary","ensurePreventErrorBoundaryRetry","getHasError","useClearResetErrorBoundary","ensureSuspenseTimers","fetchOptimistic","shouldSuspend","willFetch","useQueries","queryClient","queries","options","client","isRestoring","errorResetBoundary","defaultedQueries","map","opts","defaultedOptions","defaultQueryOptions","_optimisticResults","forEach","query","observer","getOptimisticResult","combine","optimisticResult","getCombinedResult","trackResult","onStoreChange","subscribe","batchCalls","getCurrentResult","setQueries","listeners","shouldAtLeastOneSuspend","some","result","index","suspensePromises","flatMap","queryObserver","length","Promise","all","firstSingleResultWhichShouldThrow","find","throwOnError","getQueryCache","get","queryHash","error"],"sources":["/Users/andrew/node_modules/@tanstack/react-query/src/useQueries.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport {\n  QueriesObserver,\n  QueryObserver,\n  notifyManager,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefaultError,\n  OmitKeyof,\n  QueriesObserverOptions,\n  QueriesPlaceholderDataFunction,\n  QueryClient,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// `placeholderData` function always gets undefined passed\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = OmitKeyof<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'placeholderData'\n> & {\n  placeholderData?: TQueryFnData | QueriesPlaceholderDataFunction<TQueryFnData>\n}\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseQueryOptionsForUseQueries<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseQueryOptionsForUseQueries<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseQueryOptionsForUseQueries<\n                    TQueryFnData,\n                    unknown extends TError ? DefaultError : TError,\n                    unknown extends TData ? TQueryFnData : TData,\n                    TQueryKey\n                  >\n                : // Fallback\n                  UseQueryOptionsForUseQueries\n\n// A defined initialData setting should return a DefinedUseQueryResult rather than UseQueryResult\ntype GetDefinedOrUndefinedQueryResult<T, TData, TError = unknown> = T extends {\n  initialData?: infer TInitialData\n}\n  ? unknown extends TInitialData\n    ? UseQueryResult<TData, TError>\n    : TInitialData extends TData\n      ? DefinedUseQueryResult<TData, TError>\n      : TInitialData extends () => infer TInitialDataResult\n        ? unknown extends TInitialDataResult\n          ? UseQueryResult<TData, TError>\n          : TInitialDataResult extends TData\n            ? DefinedUseQueryResult<TData, TError>\n            : UseQueryResult<TData, TError>\n        : UseQueryResult<TData, TError>\n  : UseQueryResult<TData, TError>\n\ntype GetUseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? GetDefinedOrUndefinedQueryResult<\n                    T,\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : // Fallback\n                  UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryOptionsForUseQueries>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryOptionsForUseQueries<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesOptions<\n            [...Tails],\n            [...TResults, GetUseQueryOptionsForUseQueries<Head>],\n            [...TDepth, 1]\n          >\n        : ReadonlyArray<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseQueryOptionsForUseQueries<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseQueryOptionsForUseQueries<\n                  TQueryFnData,\n                  TError,\n                  TData,\n                  TQueryKey\n                >\n              >\n            : // Fallback\n              Array<UseQueryOptionsForUseQueries>\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesResults<\n            [...Tails],\n            [...TResults, GetUseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : T extends Array<\n              UseQueryOptionsForUseQueries<\n                infer TQueryFnData,\n                infer TError,\n                infer TData,\n                any\n              >\n            >\n          ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n            Array<\n              UseQueryResult<\n                unknown extends TData ? TQueryFnData : TData,\n                unknown extends TError ? DefaultError : TError\n              >\n            >\n          : // Fallback\n            Array<UseQueryResult>\n\nexport function useQueries<\n  T extends Array<any>,\n  TCombinedResult = QueriesResults<T>,\n>(\n  {\n    queries,\n    ...options\n  }: {\n    queries: readonly [...QueriesOptions<T>]\n    combine?: (result: QueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((opts) => {\n        const defaultedOptions = client.defaultQueryOptions(\n          opts as QueryObserverOptions,\n        )\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, client, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureSuspenseTimers(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new QueriesObserver<TCombinedResult>(\n        client,\n        defaultedQueries,\n        options as QueriesObserverOptions<TCombinedResult>,\n      ),\n  )\n\n  const [optimisticResult, getCombinedResult, trackResult] =\n    observer.getOptimisticResult(\n      defaultedQueries,\n      (options as QueriesObserverOptions<TCombinedResult>).combine,\n    )\n\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n      {\n        listeners: false,\n      },\n    )\n  }, [defaultedQueries, options, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const opts = defaultedQueries[index]\n\n        if (opts) {\n          const queryObserver = new QueryObserver(client, opts)\n          if (shouldSuspend(opts, result)) {\n            return fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) => {\n      const query = defaultedQueries[index]\n      return (\n        query &&\n        getHasError({\n          result,\n          errorResetBoundary,\n          throwOnError: query.throwOnError,\n          query: client.getQueryCache().get(query.queryHash),\n        })\n      )\n    },\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return getCombinedResult(trackResult())\n}\n"]},"metadata":{},"sourceType":"module"}