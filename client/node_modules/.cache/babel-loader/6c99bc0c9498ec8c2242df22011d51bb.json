{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/src/component/post/PostTemplate.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useEffect, useState, memo } from \"react\";\nimport { Pagination } from \"@mui/material\";\nimport { fetchShowTagsId, fetchTagName } from \"../../lib/api/Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TemplateBlock = styled.div`\n  padding-top: 2px;\n  box-sizing: border-box;\n  align-items: center;\n  flex-flow: row wrap;\n`;\n_c = TemplateBlock;\nconst PaginationBlock = styled.div`\n  width: 100%;\n  padding-bottom: 3px;\n  flex-flow: row wrap;\n  align-items: center;\n  justify-content: center; /* Center content horizontally */\n`;\n_c2 = PaginationBlock;\nconst StyledPagination = styled(Pagination)`\n  && {\n    .MuiPaginationItem-root {\n      color: white; // Change text color\n      border-color: white; // Change border color\n      &.Mui-selected {\n        background-color: #333; // Change background color for selected page\n      }\n      &:hover {\n        background-color: #555; // Change background color on hover\n      }\n    }\n  }\n`;\n_c3 = StyledPagination;\n\nconst PostTemplate = _ref => {\n  _s();\n\n  let {\n    shows\n  } = _ref;\n  const [tags, setTags] = useState(null);\n  const [tagsId, setTagsId] = useState(null);\n  const [paginationValue, setPagenationValue] = useState(1);\n  const [error, setError] = useState(null);\n\n  const handleChange = (event, newPage) => {\n    setPagenationValue(newPage); // Update the paginationValue state with the new page number\n  };\n\n  useEffect(() => {\n    const fetchTagsId = async () => {\n      try {\n        setError(null);\n        const tagsIdData = await Promise.all(shows.map(async show => {\n          const data = await fetchShowTagsId(show.id);\n          return data;\n        }));\n\n        if (tagsIdData.length > 0) {\n          const tagsIdArray = tagsIdData.reduce((acc, innerArray) => {\n            innerArray.forEach(row => {\n              const {\n                exhibition_id,\n                tag_id\n              } = row;\n              const index = acc.findIndex(obj => obj.exhibition_id === exhibition_id);\n\n              if (index === -1) {\n                acc.push({\n                  exhibition_id,\n                  tags: [tag_id]\n                });\n              } else {\n                acc[index].tags.push(tag_id);\n              }\n            });\n            return acc;\n          }, []);\n          setTagsId(tagsIdArray);\n        }\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    fetchTagsId();\n  }, [shows]);\n  useEffect(() => {\n    const fetchTag = async () => {\n      try {\n        setError(null);\n        const tagData = await Promise.all(tagsId.map(async _ref2 => {\n          let {\n            exhibition_id,\n            tags\n          } = _ref2;\n          const tagNames = await Promise.all(tags.map(async tagId => {\n            const data = await fetchTagName(tagId);\n            return data;\n          }));\n          return {\n            exhibition_id,\n            tagNames\n          };\n        }));\n        setTags(tagData.reduce((acc, _ref3) => {\n          let {\n            exhibition_id,\n            tagNames\n          } = _ref3;\n          acc[exhibition_id] = tagNames;\n          return acc;\n        }, {}));\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    if (tagsId !== null) {\n      fetchTag();\n    }\n  }, [tagsId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TemplateBlock, {\n      children: [shows.map((show, index) => {\n        const key = `${show.show_name}`; // create unique key prop value\n\n        const colorIndex = index % colorSet.length; // determine color index based on position in array\n\n        const color = colorSet[colorIndex]; // get color from colorSet array\n\n        return /*#__PURE__*/_jsxDEV(Post, {\n          show: show,\n          color: color,\n          tags: tags === null || tags === void 0 ? void 0 : tags[show.id]\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this); // pass color as prop to Post component\n      }), /*#__PURE__*/_jsxDEV(PaginationBlock, {\n        children: /*#__PURE__*/_jsxDEV(StyledPagination, {\n          count: 10,\n          page: paginationValue,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(PostTemplate, \"qymxtYvULX4SfXwXLqsij77Lx/g=\");\n\n_c4 = PostTemplate;\nexport default _c5 = /*#__PURE__*/memo(PostTemplate);\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TemplateBlock\");\n$RefreshReg$(_c2, \"PaginationBlock\");\n$RefreshReg$(_c3, \"StyledPagination\");\n$RefreshReg$(_c4, \"PostTemplate\");\n$RefreshReg$(_c5, \"%default%\");","map":{"version":3,"names":["React","styled","Post","colorSet","useEffect","useState","memo","Pagination","fetchShowTagsId","fetchTagName","TemplateBlock","div","PaginationBlock","StyledPagination","PostTemplate","shows","tags","setTags","tagsId","setTagsId","paginationValue","setPagenationValue","error","setError","handleChange","event","newPage","fetchTagsId","tagsIdData","Promise","all","map","show","data","id","length","tagsIdArray","reduce","acc","innerArray","forEach","row","exhibition_id","tag_id","index","findIndex","obj","push","e","fetchTag","tagData","tagNames","tagId","key","show_name","colorIndex","color"],"sources":["/Users/andrew/Desktop/exhi/exhi/exhi-lover/client/src/component/post/PostTemplate.js"],"sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useEffect, useState, memo } from \"react\";\nimport { Pagination } from \"@mui/material\";\nimport { fetchShowTagsId, fetchTagName } from \"../../lib/api/Api\";\n\nconst TemplateBlock = styled.div`\n  padding-top: 2px;\n  box-sizing: border-box;\n  align-items: center;\n  flex-flow: row wrap;\n`;\n\nconst PaginationBlock = styled.div`\n  width: 100%;\n  padding-bottom: 3px;\n  flex-flow: row wrap;\n  align-items: center;\n  justify-content: center; /* Center content horizontally */\n`;\n\nconst StyledPagination = styled(Pagination)`\n  && {\n    .MuiPaginationItem-root {\n      color: white; // Change text color\n      border-color: white; // Change border color\n      &.Mui-selected {\n        background-color: #333; // Change background color for selected page\n      }\n      &:hover {\n        background-color: #555; // Change background color on hover\n      }\n    }\n  }\n`;\n\nconst PostTemplate = ({ shows }) => {\n  const [tags, setTags] = useState(null);\n  const [tagsId, setTagsId] = useState(null);\n  const [paginationValue, setPagenationValue] = useState(1);\n  const [error, setError] = useState(null);\n\n  const handleChange = (event, newPage) => {\n    setPagenationValue(newPage); // Update the paginationValue state with the new page number\n  };\n\n  useEffect(() => {\n    const fetchTagsId = async () => {\n      try {\n        setError(null);\n        const tagsIdData = await Promise.all(\n          shows.map(async (show) => {\n            const data = await fetchShowTagsId(show.id);\n            return data;\n          })\n        );\n        if (tagsIdData.length > 0) {\n          const tagsIdArray = tagsIdData.reduce((acc, innerArray) => {\n            innerArray.forEach((row) => {\n              const { exhibition_id, tag_id } = row;\n              const index = acc.findIndex(\n                (obj) => obj.exhibition_id === exhibition_id\n              );\n              if (index === -1) {\n                acc.push({ exhibition_id, tags: [tag_id] });\n              } else {\n                acc[index].tags.push(tag_id);\n              }\n            });\n            return acc;\n          }, []);\n          setTagsId(tagsIdArray);\n        }\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    fetchTagsId();\n  }, [shows]);\n\n  useEffect(() => {\n    const fetchTag = async () => {\n      try {\n        setError(null);\n        const tagData = await Promise.all(\n          tagsId.map(async ({ exhibition_id, tags }) => {\n            const tagNames = await Promise.all(\n              tags.map(async (tagId) => {\n                const data = await fetchTagName(tagId);\n                return data;\n              })\n            );\n            return { exhibition_id, tagNames };\n          })\n        );\n\n        setTags(\n          tagData.reduce((acc, { exhibition_id, tagNames }) => {\n            acc[exhibition_id] = tagNames;\n            return acc;\n          }, {})\n        );\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    if (tagsId !== null) {\n      fetchTag();\n    }\n  }, [tagsId]);\n\n  return (\n    <>\n      <TemplateBlock>\n        {shows.map((show, index) => {\n          const key = `${show.show_name}`; // create unique key prop value\n          const colorIndex = index % colorSet.length; // determine color index based on position in array\n          const color = colorSet[colorIndex]; // get color from colorSet array\n          return (\n            <Post show={show} key={key} color={color} tags={tags?.[show.id]} />\n          ); // pass color as prop to Post component\n        })}\n        <PaginationBlock>\n          <StyledPagination\n            count={10}\n            page={paginationValue}\n            onChange={handleChange}\n          />\n        </PaginationBlock>\n      </TemplateBlock>\n    </>\n  );\n};\n\nexport default memo(PostTemplate);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}