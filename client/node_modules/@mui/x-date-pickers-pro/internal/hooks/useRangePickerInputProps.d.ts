import { PickersInputLocaleText } from '@mui/x-date-pickers';
import { DateOrTimeView, UsePickerResponse, WrapperVariant } from '@mui/x-date-pickers/internals';
import { DateRange, MultiInputFieldSlotRootProps, MultiInputFieldSlotTextFieldProps, RangePosition } from '../models';
interface UseRangePickerFieldParams<TDate, TView extends DateOrTimeView> extends Pick<UsePickerResponse<DateRange<TDate>, TView, any>, 'open' | 'actions'> {
    wrapperVariant: WrapperVariant;
    readOnly?: boolean;
    disabled?: boolean;
    disableOpenPicker?: boolean;
    onBlur?: () => void;
    rangePosition: RangePosition;
    onRangePositionChange: (newPosition: RangePosition) => void;
    localeText: PickersInputLocaleText<TDate> | undefined;
}
export declare const useRangePickerInputProps: <TDate, TView extends DateOrTimeView>({ wrapperVariant, open, actions, readOnly, disabled, disableOpenPicker, onBlur, rangePosition, onRangePositionChange, localeText: inLocaleText, }: UseRangePickerFieldParams<TDate, TView>) => {
    startInput: MultiInputFieldSlotTextFieldProps;
    endInput: MultiInputFieldSlotTextFieldProps;
    root: MultiInputFieldSlotRootProps;
};
export {};
