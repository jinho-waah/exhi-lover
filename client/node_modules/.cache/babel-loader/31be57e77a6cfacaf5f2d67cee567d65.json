{"ast":null,"code":"import { Listener } from \"./chunk-E5EY34JY.mjs\"; // src/helpers/event.tsx\n\nimport camelcase from \"camelcase\";\nimport pick from \"lodash.pick\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx } from \"react/jsx-runtime\";\n\nfunction HandleEvents(props) {\n  const {\n    events,\n    listeners: _listeners\n  } = props;\n  const eventMap = useMemo(() => createEventMap(events), events);\n  const listeners = pick(_listeners, Object.keys(eventMap));\n  return /* @__PURE__ */jsx(Fragment, {\n    children: Object.keys(listeners).map(key => {\n      const eventName = eventMap[key];\n      const listener = listeners[key];\n      return listener ? /* @__PURE__ */jsx(Listener, {\n        type: eventName,\n        listener\n      }, key) : null;\n    })\n  });\n}\n\nfunction createEventMap(events) {\n  return events.reduce((acc, eventName) => {\n    const key = camelcase(`on_${eventName}`);\n    return {\n      [key]: eventName,\n      ...acc\n    };\n  }, {});\n}\n\nexport { HandleEvents };","map":{"version":3,"mappings":";;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAgBI,mBAMsBC,GANtB;;AAPG,SAASC,YAAT,CAAsBC,KAAtB,EAAoC;EACzC,MAAM;IAAEC,MAAF;IAAUC,WAAWC;EAArB,IAAoCH,KAA1C;EAEA,MAAMI,WAAWP,QAAQ,MAAMQ,eAAeJ,MAAf,CAAd,EAAsCA,MAAtC,CAAjB;EACA,MAAMC,YAAYN,KAAKO,UAAL,EAAiBG,OAAOC,IAAP,CAAYH,QAAZ,CAAjB,CAAlB;EAEA,OACE;IACGI,iBAAOD,IAAP,CAAYL,SAAZ,EAAuBO,GAAvB,CAA2BC,OAAO;MAEjC,MAAMC,YAAYP,SAASM,GAAT,CAAlB;MACA,MAAME,WAAWV,UAAUQ,GAAV,CAAjB;MAEA,OAAOE,WAAW,mBAACC,QAAD,EAAC;QAEjBC,MAAMH,SAFW;QAGjBC;MAHiB,CAAD,EACXF,GADW,CAAX,GAIF,IAJL;IAKD,CAVA;EADH,EADF;AAeF;;AAGA,SAASL,cAAT,CAAwBJ,MAAxB,EAAkE;EAChE,OAAOA,OAAOc,MAAP,CAAc,CAACC,GAAD,EAAML,SAAN,KAAoB;IACvC,MAAMD,MAAMf,UAAU,MAAMgB,WAAhB,CAAZ;IAEA,OAAO;MACL,CAACD,GAAD,GAAOC,SADF;MAEL,GAAGK;IAFE,CAAP;EAIF,CAPO,EAOJ,EAPI,CAAP;AAQF","names":["camelcase","pick","useMemo","jsx","HandleEvents","props","events","listeners","_listeners","eventMap","createEventMap","Object","keys","children","map","key","eventName","listener","Listener","type","reduce","acc"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/node_modules/react-naver-maps/src/helpers/event.tsx"],"sourcesContent":["\nimport camelcase from 'camelcase';\nimport pick from 'lodash.pick';\nimport { useMemo } from 'react';\n\nimport { Listener } from '../listener';\n\ntype Props = {\n  events: string[];\n  listeners: Record<string, (...args: any[]) => any>;\n};\n\nexport function HandleEvents(props: Props) {\n  const { events, listeners: _listeners } = props;\n\n  const eventMap = useMemo(() => createEventMap(events), events);\n  const listeners = pick(_listeners, Object.keys(eventMap)) as unknown as Record<string, (e: any) => void>;\n\n  return (\n    <>\n      {Object.keys(listeners).map(key => {\n\n        const eventName = eventMap[key];\n        const listener = listeners[key];\n\n        return listener ? <Listener\n          key={key}\n          type={eventName}\n          listener={listener}\n        /> : null;\n      })}\n    </>\n  );\n}\n\n\nfunction createEventMap(events: string[]): Record<string, string> {\n  return events.reduce((acc, eventName) => {\n    const key = camelcase(`on_${eventName}`);\n\n    return {\n      [key]: eventName,\n      ...acc,\n    };\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}