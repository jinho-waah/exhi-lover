{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useEffect, useState, memo } from \"react\";\nimport axios from \"axios\";\nimport { fetchTagName, fetchTagsIdbyShowId } from \"../../lib/api/Api\"; // import { fetchShowTagsId, fetchTagName } from \"../../lib/api/Api\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n_c = TemplateBlock;\n\nconst PostTemplate = _ref => {\n  _s();\n\n  let {\n    shows\n  } = _ref;\n  const [tags, setTags] = useState(null);\n  const [tagsId, setTagsId] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchTagsId = async () => {\n      try {\n        setError(null);\n        const tagsIdData = await Promise.all(shows.map(async show => {\n          const data = await fetchTagsIdbyShowId(show.id);\n          const modifiedData = {\n            exhibition_id: show.id,\n            ...data\n          }; // console.log(modifiedData);\n          // return data;\n\n          return modifiedData;\n        })); // console.log(\"ere\", tagsIdData);\n\n        if (tagsIdData.length > 0) {\n          const tagsIdArray = tagsIdData.reduce((acc, innerArray) => {\n            innerArray.forEach(row => {\n              const {\n                exhibition_id,\n                tag_id\n              } = row; // console.log(row);\n\n              const index = acc.findIndex(obj => obj.exhibition_id === exhibition_id);\n\n              if (index === -1) {\n                acc.push({\n                  exhibition_id,\n                  tags: [tag_id]\n                });\n              } else {\n                acc[index].tags.push(tag_id);\n              }\n            });\n            return acc;\n          }, []);\n          setTagsId(tagsIdArray); // console.log(\"tagsId\", tagsId);\n        }\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    fetchTagsId();\n  }, [shows]);\n  useEffect(() => {\n    const fetchTag = async () => {\n      try {\n        setError(null);\n        const tagData = await Promise.all(tagsId.map(async _ref2 => {\n          let {\n            exhibition_id,\n            tags\n          } = _ref2;\n          const tagNames = await Promise.all(tags.map(async tagId => {\n            const name = await fetchTagName(tagId);\n            return name;\n          }));\n          return {\n            exhibition_id,\n            tagNames\n          };\n        }));\n        setTags(tagData.reduce((acc, _ref3) => {\n          let {\n            exhibition_id,\n            tagNames\n          } = _ref3;\n          acc[exhibition_id] = tagNames;\n          return acc;\n        }, {}));\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    if (tagsId !== null) {\n      fetchTag();\n    }\n  }, [tagsId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TemplateBlock, {\n      children: shows.map((show, index) => {\n        const key = `${show.show_name}`; // create unique key prop value\n\n        const colorIndex = index % colorSet.length; // determine color index based on position in array\n\n        const color = colorSet[colorIndex]; // get color from colorSet array\n\n        return /*#__PURE__*/_jsxDEV(Post, {\n          show: show,\n          color: color,\n          tags: tags === null || tags === void 0 ? void 0 : tags[show.id]\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this); // pass color as prop to Post component\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(PostTemplate, \"e2gu2TFi3Ow74SJwvemRq0mOUkc=\");\n\n_c2 = PostTemplate;\nexport default _c3 = /*#__PURE__*/memo(PostTemplate);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TemplateBlock\");\n$RefreshReg$(_c2, \"PostTemplate\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["styled","Post","colorSet","useEffect","useState","memo","axios","fetchTagName","fetchTagsIdbyShowId","TemplateBlock","div","PostTemplate","shows","tags","setTags","tagsId","setTagsId","error","setError","fetchTagsId","tagsIdData","Promise","all","map","show","data","id","modifiedData","exhibition_id","length","tagsIdArray","reduce","acc","innerArray","forEach","row","tag_id","index","findIndex","obj","push","e","fetchTag","tagData","tagNames","tagId","name","key","show_name","colorIndex","color"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js"],"sourcesContent":["import styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useEffect, useState, memo } from \"react\";\nimport axios from \"axios\";\nimport { fetchTagName, fetchTagsIdbyShowId } from \"../../lib/api/Api\";\n// import { fetchShowTagsId, fetchTagName } from \"../../lib/api/Api\";\n\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n\nconst PostTemplate = ({ shows }) => {\n  const [tags, setTags] = useState(null);\n  const [tagsId, setTagsId] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTagsId = async () => {\n      try {\n        setError(null);\n\n        const tagsIdData = await Promise.all(\n          shows.map(async (show) => {\n            const data = await fetchTagsIdbyShowId(show.id);\n            const modifiedData = {\n              exhibition_id: show.id,\n              ...data,\n            };\n            // console.log(modifiedData);\n            // return data;\n            return modifiedData;\n          })\n        );\n        // console.log(\"ere\", tagsIdData);\n        if (tagsIdData.length > 0) {\n          const tagsIdArray = tagsIdData.reduce((acc, innerArray) => {\n            innerArray.forEach((row) => {\n              const { exhibition_id, tag_id } = row;\n              // console.log(row);\n              const index = acc.findIndex(\n                (obj) => obj.exhibition_id === exhibition_id\n              );\n              if (index === -1) {\n                acc.push({ exhibition_id, tags: [tag_id] });\n              } else {\n                acc[index].tags.push(tag_id);\n              }\n            });\n            return acc;\n          }, []);\n          setTagsId(tagsIdArray);\n          // console.log(\"tagsId\", tagsId);\n        }\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    fetchTagsId();\n  }, [shows]);\n\n  useEffect(() => {\n    const fetchTag = async () => {\n      try {\n        setError(null);\n        const tagData = await Promise.all(\n          tagsId.map(async ({ exhibition_id, tags }) => {\n            const tagNames = await Promise.all(\n              tags.map(async (tagId) => {\n                const name = await fetchTagName(tagId);\n                return name;\n              })\n            );\n            return { exhibition_id, tagNames };\n          })\n        );\n        setTags(\n          tagData.reduce((acc, { exhibition_id, tagNames }) => {\n            acc[exhibition_id] = tagNames;\n            return acc;\n          }, {})\n        );\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    if (tagsId !== null) {\n      fetchTag();\n    }\n  }, [tagsId]);\n\n  return (\n    <>\n      <TemplateBlock>\n        {shows.map((show, index) => {\n          const key = `${show.show_name}`; // create unique key prop value\n          const colorIndex = index % colorSet.length; // determine color index based on position in array\n          const color = colorSet[colorIndex]; // get color from colorSet array\n          return (\n            <Post show={show} key={key} color={color} tags={tags?.[show.id]} />\n          ); // pass color as prop to Post component\n        })}\n      </TemplateBlock>\n    </>\n  );\n};\n\nexport default memo(PostTemplate);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}