{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n_c = TemplateBlock;\n\nconst PostTemplate = _ref => {\n  _s();\n\n  let {\n    shows\n  } = _ref;\n  const [tags, setTags] = useState(null);\n  const [tagId, setTagId] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchTagId = async () => {\n      try {\n        setError(null);\n        const tagsIdData = await Promise.all(shows.map(async show => {\n          const url = `/api/exhibition_tags/${show.id}`; // const response = await axios.get(`https://exhi-lover.com${url}`);\n\n          const response = await axios.get(`http://localhost:5100${url}`);\n          return response.data;\n        }));\n\n        if (tagsIdData.length > 0) {\n          const tagsIdArray = tagsIdData.reduce((acc, row) => {\n            const {\n              exhibition_id,\n              tag_id\n            } = row;\n            const index = acc.findIndex(obj => obj.exhibition_id === exhibition_id);\n\n            if (index === -1) {\n              acc.push({\n                exhibition_id,\n                tags: [tag_id]\n              });\n            } else {\n              acc[index].tags.push(tag_id);\n            }\n\n            return acc;\n          }, []);\n          setTagId(tagsIdArray);\n        }\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    const fetchTag = async () => {\n      try {\n        setError(null);\n        setTags(null);\n      } catch (e) {}\n    };\n\n    fetchTagId();\n  }, [shows]);\n  return /*#__PURE__*/_jsxDEV(TemplateBlock, {\n    children: shows.map((show, index) => {\n      const key = `${show.show_name}`; // create unique key prop value\n\n      const colorIndex = index % colorSet.length; // determine color index based on position in array\n\n      const color = colorSet[colorIndex]; // get color from colorSet array\n\n      return /*#__PURE__*/_jsxDEV(Post, {\n        show: show,\n        color: color,\n        tags: tags && tags[show.id]\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this); // pass color as prop to Post component\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostTemplate, \"WX5x9aolqNa6kcdHdYIlwT8va7Q=\");\n\n_c2 = PostTemplate;\nexport default PostTemplate;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TemplateBlock\");\n$RefreshReg$(_c2, \"PostTemplate\");","map":{"version":3,"names":["styled","Post","colorSet","useEffect","useState","axios","TemplateBlock","div","PostTemplate","shows","tags","setTags","tagId","setTagId","error","setError","fetchTagId","tagsIdData","Promise","all","map","show","url","id","response","get","data","length","tagsIdArray","reduce","acc","row","exhibition_id","tag_id","index","findIndex","obj","push","e","fetchTag","key","show_name","colorIndex","color"],"sources":["/Users/andrew/Desktop/exhi/exhi/client/src/component/post/PostTemplate.js"],"sourcesContent":["import styled from \"styled-components\";\nimport Post from \"./Post\";\nimport colorSet from \"../../lib/styles/colorSet\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst TemplateBlock = styled.div`\n  padding-top: 0.2rem;\n  box-sizing: border-box;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: row wrap;\n`;\n\nconst PostTemplate = ({ shows }) => {\n  const [tags, setTags] = useState(null);\n  const [tagId, setTagId] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTagId = async () => {\n      try {\n        setError(null);\n        const tagsIdData = await Promise.all(\n          shows.map(async (show) => {\n            const url = `/api/exhibition_tags/${show.id}`;\n            // const response = await axios.get(`https://exhi-lover.com${url}`);\n            const response = await axios.get(`http://localhost:5100${url}`);\n            return response.data;\n          })\n        );\n        if (tagsIdData.length > 0) {\n          const tagsIdArray = tagsIdData.reduce((acc, row) => {\n            const { exhibition_id, tag_id } = row;\n            const index = acc.findIndex(\n              (obj) => obj.exhibition_id === exhibition_id\n            );\n            if (index === -1) {\n              acc.push({ exhibition_id, tags: [tag_id] });\n            } else {\n              acc[index].tags.push(tag_id);\n            }\n            return acc;\n          }, []);\n\n          setTagId(tagsIdArray);\n        }\n      } catch (e) {\n        setError(e);\n      }\n    };\n\n    const fetchTag = async () => {\n      try {\n        setError(null);\n        setTags(null);\n      } catch (e) {}\n    };\n    fetchTagId();\n  }, [shows]);\n\n  return (\n    <TemplateBlock>\n      {shows.map((show, index) => {\n        const key = `${show.show_name}`; // create unique key prop value\n        const colorIndex = index % colorSet.length; // determine color index based on position in array\n        const color = colorSet[colorIndex]; // get color from colorSet array\n        return (\n          <Post\n            show={show}\n            key={key}\n            color={color}\n            tags={tags && tags[show.id]}\n          />\n        ); // pass color as prop to Post component\n      })}\n    </TemplateBlock>\n  );\n};\n\nexport default PostTemplate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}